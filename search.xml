<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[git-dos]]></title>
      <url>/2017/12/25/git-dos/</url>
      <content type="html"><![CDATA[<blockquote>
<p>工作中用到的 git 命令 dos</p>
</blockquote>
<p><a href="http://www.barretlee.com/blog/2014/04/30/switch-branch-in-git/" target="_blank" rel="external">博客链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">github创建静态页面发布静态页面</div><div class="line"></div><div class="line">1查看远程分支</div><div class="line">git branch -va</div><div class="line"></div><div class="line">2切换远程分支</div><div class="line">git checkout -t origin/gh-pages</div><div class="line"></div><div class="line">3发布静态网页</div><div class="line">add -&gt; commit -&gt; push</div><div class="line">-----------------------------</div><div class="line">1查看当前分支</div><div class="line">git branch</div><div class="line">* gh-pages</div><div class="line"></div><div class="line">2添加文件到库中</div><div class="line">git commit -a -m &quot;first commit&quot;</div><div class="line"></div><div class="line">3提交代码到远程分支</div><div class="line">git push origin gh-pages</div><div class="line"></div><div class="line">-----------------------------</div><div class="line"> 创建文件夹</div><div class="line"> git init</div><div class="line"> git add README.md</div><div class="line"> git remote add origin https://git.coding.net/BlankCat/elephant-blog-api.git</div><div class="line"> git push -u origin master</div><div class="line"></div><div class="line"></div><div class="line">第二次</div><div class="line">git add *</div><div class="line">git commit -m “zjf”</div><div class="line">git push</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-tool-curl]]></title>
      <url>/2017/12/25/develop-tool-curl/</url>
      <content type="html"><![CDATA[<blockquote>
<p>curl学习使用</p>
</blockquote>
<p><a href="https://curl.haxx.se/download.html" target="_blank" rel="external">curl官网</a></p>
<p><a href="https://itbilu.com/linux/man/4yZ9qH_7X.html" target="_blank" rel="external">curl使用方法–博客总结</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[url-tool-link]]></title>
      <url>/2017/12/25/url-tool-link/</url>
      <content type="html"><![CDATA[<blockquote>
<p>开发中用到的 导航链接 ，url链接 ，在线工具</p>
</blockquote>
<p><a href="http://www.gitnavi.com/" target="_blank" rel="external">开发使用导航url –&gt; gitnavi</a></p>
<p><a href="http://wttr.in/" target="_blank" rel="external">代码天气预报 –&gt; wttr</a></p>
<p><a href="http://ip.cn/" target="_blank" rel="external">查询IP地址 –&gt; ip</a></p>
<p><a href="http://tool.lu/" target="_blank" rel="external">在线工具【时间戳，端口号检测】 –&gt; tool</a><br><a href="http://tool.lu/calc/" target="_blank" rel="external">在线工具【常见计算统计工具】 –&gt; tool</a><br><a href="http://tool.lu/daxie/" target="_blank" rel="external">在线工具【数字转换成钱大小写】 –&gt; tool</a><br><a href="http://tool.lu/morse/" target="_blank" rel="external">在线工具【摩斯电码 字体编码解码】 –&gt; tool</a></p>
<p><a href="https://convertio.co/zh/html-converter/" target="_blank" rel="external">html–pdf转换工具 –&gt;可以将网页转换成各种格式的文件</a></p>
<p><a href="http://code.youmeek.com/2016/04/30/2016/04/Fiddler/" target="_blank" rel="external">抓包工具 Fiddler  –&gt; 抓包</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> url </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[life-study-skills]]></title>
      <url>/2017/12/25/life-study-skills/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文章导读： 在过去未被自己流程化的情况下，自己学习新的东西的时候一直是处理迷迷糊糊的状态，直到我看到这张思维导图，我瞬间就理清自己平时在学习东西时候那混乱的思维了。<br>可能平时我们也是这样做的，可是我们从来没有认真思考过或是整理过这样的思绪。<br>也许你认为这样不重要，但是对我而言，有记录的东西，代表可以被流程化，这可以帮助特定情况下的我。<br>下面跟着这张思维导图，我们一起来整理 Maven 的材料。</p>
</blockquote>
<p><img src="http://blankcat.github.io/img/learn/My-Learning-Way.jpg" alt="思维导图"></p>
<h2 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么?"></a>它是什么?</h2><ul>
<li>术语定义</li>
<li>Maven 官网定义：<a href="http://maven.apache.org/" target="_blank" rel="external">http://maven.apache.org/</a></li>
<li>百度百科定义：<a href="http://baike.baidu.com/view/336103.htm" target="_blank" rel="external">http://baike.baidu.com/view/336103.htm</a></li>
<li>维基百科定义：<a href="https://zh.wikipedia.org/wiki/Apache_Maven" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Apache_Maven</a></li>
<li>在 Wiki 上还需要注意如下，这些有助于你站在更加宏观的角度看待它，但是可能需要积累：</li>
<li>参见</li>
<li>补充阅读</li>
<li>参考资料</li>
<li>外部链接</li>
</ul>
<p><img src="http://blankcat.github.io/img/a-z/L.jpg" alt="封面图"></p>
<h2 id="它的历史"><a href="#它的历史" class="headerlink" title="它的历史?"></a>它的历史?</h2><ul>
<li>Google 搜索：Maven History</li>
<li>Google 搜索：Maven 区别、Maven difference</li>
<li>Google 搜索：Maven 使用场景</li>
<li>Google 搜索：What is Maven</li>
<li>Google 搜索：To use or not to use Maven</li>
<li>Google 搜索：Maven use case</li>
<li>在 Google 搜索结果页最下面，看它提示的搜索关键字内容，看是否有版本上的区别。</li>
</ul>
<h2 id="同类常见技术（按技术出现时间正序）"><a href="#同类常见技术（按技术出现时间正序）" class="headerlink" title="同类常见技术（按技术出现时间正序）"></a>同类常见技术（按技术出现时间正序）</h2><ul>
<li>Ant</li>
<li>Gradle</li>
</ul>
<h2 id="同类技术比较："><a href="#同类技术比较：" class="headerlink" title="同类技术比较："></a>同类技术比较：</h2><ul>
<li>Google 搜索：Ant Maven Gradle</li>
</ul>
<p><a href="http://blog.csdn.net/napolunyishi/article/details/39345995" target="_blank" rel="external">比如文章：</a></p>
<h2 id="学习前提-依赖"><a href="#学习前提-依赖" class="headerlink" title="学习前提/依赖"></a>学习前提/依赖</h2><ul>
<li>要有 Java 基础相关</li>
</ul>
<h2 id="为什么会出现"><a href="#为什么会出现" class="headerlink" title="为什么会出现"></a>为什么会出现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Google 搜索：</div><div class="line">关键字：为什么用 maven</div><div class="line">关键字：why use maven</div><div class="line">关键字：What does Maven do</div><div class="line">关键字：Why do we need Maven</div><div class="line">关键字：Why should we use Maven</div></pre></td></tr></table></figure>
<h2 id="哪些人不喜欢它"><a href="#哪些人不喜欢它" class="headerlink" title="哪些人不喜欢它"></a>哪些人不喜欢它</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Google 搜索：</div><div class="line">关键字：不用 maven</div><div class="line">关键字：Why I Don&apos;t Use Maven</div></pre></td></tr></table></figure>
<h2 id="为什么学习它"><a href="#为什么学习它" class="headerlink" title="为什么学习它"></a>为什么学习它</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">老师让学的？</div><div class="line">解决工作问题？</div><div class="line">提高效率？</div><div class="line">知识储备？</div><div class="line">灵机一动？</div></pre></td></tr></table></figure>
<h2 id="我要怎么做（按优先级从高到低排序）"><a href="#我要怎么做（按优先级从高到低排序）" class="headerlink" title="我要怎么做（按优先级从高到低排序）"></a>我要怎么做（按优先级从高到低排序）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">看教程</div><div class="line">官网快速入门文档</div><div class="line">在官网中查看带有下面几个关键字的链接：</div><div class="line">Getting Started</div><div class="line">Quick Start</div><div class="line">Getting Started Guides</div><div class="line">usage page</div><div class="line">Tutorials</div><div class="line">Guides</div><div class="line">Development Guides</div><div class="line">Documentation</div><div class="line">Docs</div><div class="line">Screencasts</div><div class="line">best practices</div><div class="line">在极客学院搜索对应的教学视频（我是年 VIP）</div><div class="line">Google 搜索：Maven 视频 教程 百度云网盘</div><div class="line">Google 搜索：Maven 视频 教程</div><div class="line">微博-搜索相关内容：http://weibo.com</div><div class="line">公众号-搜索相关内容：http://weixin.sogou.com/</div><div class="line">京东-图书：http://book.jd.com/</div><div class="line">YouTube-搜索相关内容：http://youtube.com/</div><div class="line"></div><div class="line">自己写 Demo</div><div class="line">参考别人 Demo</div><div class="line">Gtihub 搜索 Demo：https://github.com/search/advanced</div><div class="line">Git@OSC 搜索 Demo：http://git.oschina.net/</div><div class="line">项目场景模拟、提高</div><div class="line"></div><div class="line">遇到问题</div><div class="line">找官网 FAQ：https://maven.apache.org/general.html</div><div class="line">QQ 群组讨论</div><div class="line">Google 搜索下面关键字方法：</div><div class="line">Maven site:stackoverflow.com</div><div class="line">Maven site:quora.com</div><div class="line">Maven site:xitu.io</div><div class="line">Maven site:toutiao.io</div><div class="line">Maven site:segmentfault.com</div><div class="line">Maven site:jianshu.com</div><div class="line">Maven site:zhihu.com</div><div class="line">Maven site:blog.csdn.net</div><div class="line">Maven site:cnblogs.com</div><div class="line">Maven site:blog.51cto.com</div><div class="line">Maven site:oschina.net</div><div class="line">Maven site:iteye.com</div><div class="line">Maven site:importnew.com</div></pre></td></tr></table></figure>
<h2 id="归纳整理并分享"><a href="#归纳整理并分享" class="headerlink" title="归纳整理并分享"></a>归纳整理并分享</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">整理</div><div class="line">为知笔记里面内容</div><div class="line">浏览器书签</div><div class="line">简书中收藏：http://www.jianshu.com/bookmarks</div><div class="line">简书中喜欢：http://www.jianshu.com/favourites</div><div class="line">开发者头条中收藏：http://toutiao.io/favorites</div><div class="line">微博中收藏：http://weibo.com/fav</div><div class="line">RSS 订阅：http://www.inoreader.com/</div><div class="line">无法订阅的博客使用 Feed43 生成 RSS：http://feed43.com/</div><div class="line"></div><div class="line">分享</div><div class="line">写博客</div><div class="line">分享到开发者头条</div><div class="line">分享到简书</div><div class="line">分享到微信公众号</div><div class="line">系统整理 Demo 在 Github 上</div></pre></td></tr></table></figure>
<h2 id="过程细节"><a href="#过程细节" class="headerlink" title="过程细节"></a>过程细节</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Google 搜索必备：</div><div class="line">Maven site:www.youmeek.com，表示搜索结果局限于在：www.youmeek.com 这个站点</div><div class="line">Maven link:www.youmeek.com，返回所有链接到 www.youmeek.com 的网页</div><div class="line">r	elated:www.qq.com，查找类似 www.youmeek.com 的网站</div><div class="line">cache:www.youmeek.com，查找 www.youmeek.com 的历史快照</div><div class="line"></div><div class="line">结束语</div><div class="line">我猜测你可能需要 VPN 或是 Shadowsocks</div></pre></td></tr></table></figure>
<p><a href="http://code.youmeek.com/2016/03/07/2016/02/My-Learning-Way/#为什么会出现" target="_blank" rel="external">我的学习、归纳方法（以学习 Maven 为例）</a></p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[life-work-2017-12-20]]></title>
      <url>/2017/12/20/life-work-2017-12-20/</url>
      <content type="html"><![CDATA[<h2 id="三岁学说话，一生学闭嘴！"><a href="#三岁学说话，一生学闭嘴！" class="headerlink" title="三岁学说话，一生学闭嘴！"></a>三岁学说话，一生学闭嘴！</h2><h3 id="工作的时候不要带着情绪去工作，今天上班发火了，引以为戒…"><a href="#工作的时候不要带着情绪去工作，今天上班发火了，引以为戒…" class="headerlink" title="工作的时候不要带着情绪去工作，今天上班发火了，引以为戒…"></a>工作的时候不要带着情绪去工作，今天上班发火了，引以为戒…</h3><h3 id="完成的工作"><a href="#完成的工作" class="headerlink" title="完成的工作"></a>完成的工作</h3><ul>
<li>hexo 博客 添加搜索功能</li>
<li>idea 修改代码风格<br><img src="http://blankcat.top/img/idea/set-intellij-java-google-style.jpg" alt="idea添加图片"></li>
<li>学习 shiro</li>
<li>windows 和 linux 的tree使用</li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-search-plugin]]></title>
      <url>/2017/12/20/hexo-search-plugin/</url>
      <content type="html"><![CDATA[<p>##hexo 搜索插件<br><a href="http://hisen.me/20170407-Hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%20-%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/" target="_blank" rel="external">原文链接</a><br>之前安装过第三方的搜索服务，贼蛋疼。都不免费了。</p>
<p>也有自己安装插件，然后写js的，麻烦</p>
<p>后来找到两个插件，安装之后就搞定了</p>
<p>感谢开发的作者！！！</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>记得要在站点根目录执行下面的安装操作</p>
<p>1.安装 hexo-generator-search</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<p>2.安装 hexo-generator-searchdb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<h2 id="启用搜索"><a href="#启用搜索" class="headerlink" title="启用搜索"></a>启用搜索</h2><p>编辑站点文件<strong>_config.yml</strong>，添加以下内容开启搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">path: search.xml</div><div class="line">field: post</div><div class="line">format: html</div><div class="line">limit: 10000</div></pre></td></tr></table></figure></p>
<p>编辑主题文件<strong>_config.yml</strong>，启用本地搜索功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">enable: true</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java-爬虫]]></title>
      <url>/2017/12/19/java-%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p><a href="http://webmagic.io/docs/zh/posts/ch1-overview/" target="_blank" rel="external">java爬虫技术</a></p>
<p><a href="http://blog.csdn.net/u012012240/article/details/52440266" target="_blank" rel="external">博客</a></p>
<p><a href="https://github.com/code4craft/webmagic" target="_blank" rel="external">github</a></p>
<p><a href="http://git.oschina.net/flashsword20/webmagic" target="_blank" rel="external">oschina</a></p>
<p><a href="http://webmagic.io/" target="_blank" rel="external">官网</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-language-node.js]]></title>
      <url>/2017/12/19/develop-language-node-js/</url>
      <content type="html"><![CDATA[<p><a href="http://loopback.io" target="_blank" rel="external">loopbackjs 官网</a></p>
<p><a href="https://itbilu.com/nodejs/npm/VkYIaRPz-.html" target="_blank" rel="external">node.js 博客学习</a></p>
]]></content>
      
        <categories>
            
            <category> dev-language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dev-language </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-tool-link-url]]></title>
      <url>/2017/12/19/develop-tool-link-url/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>##开发中好的url链接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">LeetCode题目汇总</div><div class="line">http:<span class="comment">//blog.csdn.net/Yano_nankai/article/category/5853703/1</span></div><div class="line"></div><div class="line">https:<span class="comment">//www.zybuluo.com/Yano/note/255755</span></div><div class="line"></div><div class="line"></div><div class="line">webpack手册</div><div class="line">http:<span class="comment">//zhaoda.net/webpack-handbook/module-system.html</span></div><div class="line"></div><div class="line">redux手册</div><div class="line">http:<span class="comment">//cn.redux.js.org/docs/react-redux/api.html</span></div><div class="line"></div><div class="line">react+redux实战</div><div class="line">http:<span class="comment">//blog.csdn.net/sinat_17775997/article/details/52311448</span></div><div class="line"></div><div class="line"></div><div class="line">store+redux</div><div class="line">http:<span class="comment">//cn.redux.js.org/docs/basics/Store.html</span></div><div class="line"></div><div class="line"></div><div class="line">reactNative+f8-app</div><div class="line">https:<span class="comment">//f8-app.liaohuqiu.net/tutorials/building-the-f8-app/data/</span></div><div class="line"></div><div class="line"></div><div class="line">es6教程</div><div class="line">http:<span class="comment">//es6.ruanyifeng.com/</span></div><div class="line"></div><div class="line">markdown在线编辑器</div><div class="line">http:<span class="comment">//mahua.jser.me/</span></div><div class="line"></div><div class="line">清除缓存</div><div class="line">chrome:<span class="comment">//settings/clearBrowserData</span></div><div class="line">chrome:<span class="comment">//cache/</span></div><div class="line"></div><div class="line"></div><div class="line">reactXP官方文档</div><div class="line">https:<span class="comment">//microsoft.github.io/reactxp/docs/components/button.html</span></div><div class="line"></div><div class="line"></div><div class="line">linux命令</div><div class="line">http:<span class="comment">//blog.chinaunix.net/uid-87889-id-2014303.html</span></div><div class="line"></div><div class="line"></div><div class="line">json校验工具</div><div class="line">http:<span class="comment">//json.cn/</span></div><div class="line">bejson</div><div class="line"></div><div class="line"></div><div class="line">chrome快捷键</div><div class="line">http:<span class="comment">//www.cnblogs.com/mikalshao/archive/2010/11/03/1868568.html</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-framework-CKEditor]]></title>
      <url>/2017/12/19/develop-framework-CKEditor/</url>
      <content type="html"><![CDATA[<p>开发框架之–富文本编辑器</p>
<p><a href="http://blog.csdn.net/u012012240/article/details/51719271" target="_blank" rel="external">博客地址</a></p>
<p><a href="http://www.open-open.com/lib/view/open1355323983445.html" target="_blank" rel="external">CKEditor+CKFinder+jsp</a></p>
<p><a href="http://www.open-open.com/lib/view/open1394859753025.html" target="_blank" rel="external">将CKEditor集成到Java开发环境中</a></p>
]]></content>
      
        <categories>
            
            <category> framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-windows-dos]]></title>
      <url>/2017/12/19/develop-windows-dos/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>##常见windows命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">局域网查看工具(LanSee)V1.72破解版</div><div class="line">http://download.csdn.net/download/yanfei23/2317770</div><div class="line">http://z.download.csdn.net/download/zh830814/281895</div><div class="line"></div><div class="line"></div><div class="line">Windows下查看电脑信息的命令</div><div class="line">查看当前ip:  cmd-----&gt;ipconfig/all</div><div class="line">查看电脑配置    ----&gt;dxdiag</div><div class="line">查看注册表信息  ----&gt;regedit</div><div class="line">查看系统属性    ----&gt;sysdm.cpl</div><div class="line">查看系统信息    ----&gt;msinfo32</div><div class="line"> </div><div class="line"> </div><div class="line">查看网络     nbtstat  -aAn</div><div class="line">                      a 远程主机的名称，便可知NETBIOS</div><div class="line">                      A 远程主机的ip  便可知NETBIOS</div><div class="line">                      n 列出本地主机的NETBIOS</div><div class="line">查看网络状态 netstat  -ar</div><div class="line">                      a 查看本地机器的所有的端口 可以有效发现、防范木马，及知道机器所开的服务信息。用法 netstat -a IP</div><div class="line">                      r 列出当前的路由信息 告知本地机器的网关、子网掩码。 用法：netstat -r IP</div><div class="line">跟踪路由信息             tracert  IP</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line">如果电脑的运行、控制面板、命令提示符被禁用了</div><div class="line">    一：---&gt;gpedit.msc---&gt;用户配置--&gt;管理模块--&gt;系统（单击选中）--&gt;右边找到“阻止访问命令提示符”，鼠标双击，弹出窗口，点选“未配置”--&gt;应用--确定</div><div class="line">    二：---&gt;gpedit.msc---&gt;用户配置--&gt;管理模块--&gt;控制面板（单击选中）--&gt;右边找到“禁止访问控制面板”，鼠标双击，弹出窗口，点选“未配置”--&gt;应用--确定</div><div class="line">    三：---&gt;c:\windows\regedit.exe,</div><div class="line">            HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer,在右边空白处右键，选择“新建”的“DWORD”,然后输入名字“NoRun”，然后双击它，</div><div class="line"></div><div class="line">=============================================================================</div><div class="line"></div><div class="line"></div><div class="line">查看局域网内所有IP ：arp -a</div><div class="line"></div><div class="line">查看局域网内所有主机名： net view</div><div class="line"></div><div class="line">查看IP地址对应的主机名和MAC地址： nststat -a 192.168.0.101</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">=============================================================================</div><div class="line">linux 查看系统信息命令(比较全)</div><div class="line"></div><div class="line"># uname -a # 查看内核/操作系统/CPU信息 </div><div class="line"># head -n 1 /etc/issue # 查看操作系统版本 </div><div class="line"># cat /proc/cpuinfo # 查看CPU信息 </div><div class="line"># hostname # 查看计算机名 </div><div class="line"># lspci -tv # 列出所有PCI设备 </div><div class="line"># lsusb -tv # 列出所有USB设备 </div><div class="line"># lsmod # 列出加载的内核模块 </div><div class="line"># env # 查看环境变量资源 </div><div class="line"># free -m # 查看内存使用量和交换区使用量 </div><div class="line"># df -h # 查看各分区使用情况 </div><div class="line"># du -sh &lt;目录名&gt; # 查看指定目录的大小 </div><div class="line"># grep MemTotal /proc/meminfo # 查看内存总量 </div><div class="line"># grep MemFree /proc/meminfo # 查看空闲内存量 </div><div class="line"># uptime # 查看系统运行时间、用户数、负载 </div><div class="line"># cat /proc/loadavg # 查看系统负载磁盘和分区 </div><div class="line"># mount | column -t # 查看挂接的分区状态 </div><div class="line"># fdisk -l # 查看所有分区 </div><div class="line"># swapon -s # 查看所有交换分区 </div><div class="line"># hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) </div><div class="line"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络 </div><div class="line"># ifconfig # 查看所有网络接口的属性 </div><div class="line"># iptables -L # 查看防火墙设置 </div><div class="line"># route -n # 查看路由表 </div><div class="line"># netstat -lntp # 查看所有监听端口 </div><div class="line"># netstat -antp # 查看所有已经建立的连接 </div><div class="line"># netstat -s # 查看网络统计信息进程 </div><div class="line"># ps -ef # 查看所有进程 </div><div class="line"># top # 实时显示进程状态用户 </div><div class="line"># w # 查看活动用户 </div><div class="line"># id &lt;用户名&gt; # 查看指定用户信息 </div><div class="line"># last # 查看用户登录日志 </div><div class="line"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </div><div class="line"># cut -d: -f1 /etc/group # 查看系统所有组 </div><div class="line"># crontab -l # 查看当前用户的计划任务服务 </div><div class="line"># chkconfig –list # 列出所有系统服务 </div><div class="line"># chkconfig –list | grep on # 列出所有启动的系统服务程序 </div><div class="line"># rpm -qa # 查看所有安装的软件包</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pdf-book-resource-url]]></title>
      <url>/2017/12/19/pdf-book-resource-url/</url>
      <content type="html"><![CDATA[<h2 id="pdf-资源下载"><a href="#pdf-资源下载" class="headerlink" title="pdf 资源下载"></a>pdf 资源下载</h2><p><a href="http://www.bestcbooks.com/" target="_blank" rel="external">bestcbooks.com</a><br><a href="http://www.java1234.com" target="_blank" rel="external">java1234.com</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pdf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-apache-kafka-frame-work]]></title>
      <url>/2017/12/19/develop-apache-kafka-frame-work/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>##apache kafka 资源总结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">kafka资源整理</div><div class="line">https://yq.aliyun.com/articles/69501</div><div class="line"></div><div class="line">kafka中文教程</div><div class="line">http://www.orchome.com/kafka/index?spm=5176.100239.blogcont69501.5.5zZkfX</div><div class="line"></div><div class="line"></div><div class="line">kafka英文版:</div><div class="line">https://kafka.apache.org/0100/documentation.html?spm=5176.100239.blogcont69501.6.5zZkfX</div><div class="line"></div><div class="line"></div><div class="line">https://kafka.apache.org/0100/documentation.html?spm=5176.100239.blogcont69501.7.5zZkfX#streamsapi</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">kafka 0.10新特性</div><div class="line"></div><div class="line">https://www.iteblog.com/archives/1677.html</div><div class="line"></div><div class="line">kafka 机制:</div><div class="line"></div><div class="line">     http://blog.arganzheng.me/posts/kafka-in-action.html</div><div class="line"></div><div class="line">     http://www.infoq.com/cn/profile/%E9%83%AD%E4%BF%8A</div><div class="line"></div><div class="line">     https://www.oschina.net/translate/kafka-design</div><div class="line"></div><div class="line">kafka优化：</div><div class="line"></div><div class="line">     http://www.infoq.com/cn/articles/linkedIn-improving-kafka</div><div class="line"></div><div class="line">kafka技术内幕:</div><div class="line"></div><div class="line">http://zqhxuyuan.github.io/2017/01/01/Kafka-Code-Index/</div><div class="line"></div><div class="line">kafka文件存储机制:</div><div class="line"></div><div class="line">http://tech.meituan.com/kafka-fs-design-theory.html</div><div class="line"></div><div class="line">kafka zookeeper存储结构:</div><div class="line"></div><div class="line">http://blog.csdn.net/lizhitao/article/details/23744675</div><div class="line"></div><div class="line">kafka源码解析:</div><div class="line"></div><div class="line">http://zqhxuyuan.github.io/tags/kafka/</div><div class="line"></div><div class="line">https://zqhxuyuan1.gitbooks.io/kafka/content/index.html</div><div class="line"></div><div class="line"></div><div class="line">身份认证和安全机制:</div><div class="line"></div><div class="line">https://wangzzu.github.io/2016/07/29/sasl-plain-kafka/</div><div class="line"></div><div class="line">优秀博客:</div><div class="line"></div><div class="line">http://www.jasongj.com/tags/Kafka/</div><div class="line"></div><div class="line">https://my.oschina.net/ielts0909</div><div class="line"></div><div class="line">http://dongxicheng.org/search-engine/kafka/</div><div class="line"></div><div class="line">https://my.oschina.net/ielts0909/blog/117489</div><div class="line"></div><div class="line">https://my.oschina.net/u/591402/blog/145090</div><div class="line"></div><div class="line">http://rockybean.github.io/2012/07/30/jafka-design/</div><div class="line"></div><div class="line">http://www.cnblogs.com/cyfonly/p/5954614.html</div><div class="line"></div><div class="line">优秀博文</div><div class="line">http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</div><div class="line"></div><div class="line">kakfa kafka message delivery guarantee:</div><div class="line"></div><div class="line">http://blog.csdn.net/odailidong/article/details/49735475</div><div class="line"></div><div class="line">kakfa ISR:</div><div class="line"></div><div class="line">http://zqhxuyuan.github.io/2016/01/14/2016-01-14-Kafka-ISR/</div><div class="line"></div><div class="line">http://www.cnblogs.com/fxjwind/p/4972244.html</div><div class="line"></div><div class="line">http://zqhxuyuan.github.io/2016/01/13/2016-01-13-Kafka-Picture/</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Kafka实战：从RDBMS到Hadoop，七步实现实时传输</div><div class="line">http://geek.csdn.net/news/detail/97941</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-tool-register-code]]></title>
      <url>/2017/12/19/develop-tool-register-code/</url>
      <content type="html"><![CDATA[<p><a href="https://www.iteblog.com/idea/" target="_blank" rel="external">idea注册码</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://idea.lanyus.com/</div><div class="line">   https://www.iteblog.com/archives/1542.html</div><div class="line">   http://idea.iteblog.com/key.php</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-language-scala]]></title>
      <url>/2017/12/19/develop-language-scala/</url>
      <content type="html"><![CDATA[<p><a href="http://www.scala-lang.org/" target="_blank" rel="external">scala官网</a></p>
<p><a href="https://www.scala-js.org/" target="_blank" rel="external">scala.js官网</a></p>
<p><a href="http://www.yiibai.com/scala/scala_for_loop.html" target="_blank" rel="external">scala教程参考</a></p>
<p><a href="http://introcs.cs.princeton.edu/java/stdlib/" target="_blank" rel="external">常用类库</a> / <a href="http://introcs.cs.princeton.edu/java/22library/StdRandom.java.html" target="_blank" rel="external">常用类库</a> / <a href="http://introcs.cs.princeton.edu/java/stdlib/StdOut.java.html" target="_blank" rel="external">常用类库</a></p>
]]></content>
      
        <categories>
            
            <category> dev-language </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dev-language </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-skill-xshell-dos]]></title>
      <url>/2017/12/19/develop-skill-xshell-dos/</url>
      <content type="html"><![CDATA[<blockquote>
<p>windows 的一些操作，dos命令<br>帮助快速开发，提高工作效率！</p>
</blockquote>
<h2 id="管理员的方式启动电脑"><a href="#管理员的方式启动电脑" class="headerlink" title="管理员的方式启动电脑"></a>管理员的方式启动电脑</h2><p><img src="http://blankcat.top/img/windows/2015827992015586.jpg" alt="1"><br><img src="http://blankcat.top/img/windows/2015827993336324.jpg" alt="2"><br><img src="http://blankcat.top/img/windows/2015827994557426.jpg" alt="3"><br><img src="http://blankcat.top/img/windows/2015827910080487.jpg" alt="4"><br><img src="http://blankcat.top/img/windows/20158279101290422.jpg" alt="5"><br><img src="http://blankcat.top/img/windows/20158279101290422.jpg" alt="6"></p>
<h3 id="管理员方式启动电脑dos"><a href="#管理员方式启动电脑dos" class="headerlink" title="管理员方式启动电脑dos"></a>管理员方式启动电脑dos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">compmgmt.msc</div><div class="line">系统工具→本地用户和组→用户</div><div class="line"></div><div class="line"></div><div class="line">Win+Break</div><div class="line">系统属性</div></pre></td></tr></table></figure>
<p>##开发常用的xshell命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line">线上文件路径</div><div class="line">\\192.168.1.206\softMgr\jc</div><div class="line"></div><div class="line">base工程服务器地址</div><div class="line">121.40.51.43	</div><div class="line">用户名:root</div><div class="line">密码</div><div class="line"></div><div class="line"></div><div class="line">oGcnhnrjmnififtc2GX3v6bfXVxnqPrkSu7jcfxp</div><div class="line"></div><div class="line">启动服务器</div><div class="line">/etc/init.d/tomcat2 restart</div><div class="line">tail -f /usr/local/tomcat2/logs/catalina-daemon.out</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">cd /data0/wwwroot/</div><div class="line">ls</div><div class="line">cd base</div><div class="line"></div><div class="line">端口号 9282</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">http://base.zfwx.com</div><div class="line">去host文件里面根据域名找对应的ip</div><div class="line">http://base.zfwx.com/register.do;jsessionid=2273D8E3BE7EEE9124BB8082EE045D2C</div><div class="line"></div><div class="line"></div><div class="line">=====================================================================</div><div class="line"></div><div class="line">207服务器查看zookeeper查看服务是否启动</div><div class="line">192.168.1.207</div><div class="line">用户名</div><div class="line">root</div><div class="line">密码</div><div class="line">asdf!@#$</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">vi 编辑保存</div><div class="line"></div><div class="line"></div><div class="line">=====================================================================</div><div class="line">查询redis服务</div><div class="line">121.40.34.17</div><div class="line">用户名</div><div class="line">root</div><div class="line">密码</div><div class="line">pfrNzrgp6ajpfrNzrgp6aQQV9mepi4jpfrNzrgp6aQ</div><div class="line"></div><div class="line"></div><div class="line">查询redis</div><div class="line">ps -ef |grep redis</div><div class="line">cd /usr/local/redis/bin</div><div class="line">ls</div><div class="line">启动客户端软件</div><div class="line">./redis-cli</div><div class="line">选择库</div><div class="line">select 3 选择3号库</div><div class="line">ok</div><div class="line">get |lstangrongzhi  查询出对应的值</div><div class="line">key *</div><div class="line">key </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">===================================================================</div><div class="line">设置时效，过期后就自动删除</div><div class="line">set a f</div><div class="line">expire a 144000/3600 4个小时</div><div class="line">查看时效</div><div class="line">ttl a</div><div class="line"></div><div class="line"></div><div class="line">=====================================================================</div><div class="line"></div><div class="line">//30机器 data0目录是工程目录</div><div class="line">政法网校api</div><div class="line">114.55.36.30</div><div class="line">用户名</div><div class="line">root</div><div class="line">密码</div><div class="line">hvHS0ih6tVltyysoovZr8ccQlaesd2</div><div class="line"></div><div class="line"></div><div class="line">启动服务器</div><div class="line">/etc/init.d/tomcat2 restart</div><div class="line">tail -f /usr/local/tomcat1/logs/catalina-daemon.out</div><div class="line"></div><div class="line"></div><div class="line">api 监听的端口号：6088</div><div class="line"></div><div class="line"></div><div class="line">=====================================================================</div><div class="line"></div><div class="line">115.29.221.112</div><div class="line">mobile工程测试服务器</div><div class="line">用户名</div><div class="line">root</div><div class="line">密码</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">115.29.221.112   z0gmq5gpKbpXzuxmjlnwfYYpie9y9DygdpfbMkqR</div><div class="line"></div><div class="line">5098端口</div><div class="line">5099端口</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">步骤1</div><div class="line">进入tomcat的conf执行命令</div><div class="line">cat server.xml</div><div class="line">产看工程部署目录</div><div class="line"></div><div class="line">步骤2</div><div class="line">查看tomcat的环境变量</div><div class="line">cat /etc/profile</div><div class="line">查看tomcat环境变量</div><div class="line">步骤3</div><div class="line">进入/etc/init.d目录下查看有没有tomcat的启动脚本</div><div class="line">执行命令(在tomcat的脚本上面检索环境变量)</div><div class="line">grep &quot;CATALINA_HOME&quot; /etc/init.d/tomcat</div><div class="line"></div><div class="line"></div><div class="line">启动服务器</div><div class="line">/etc/init.d/tomcat2 restart</div><div class="line">tail -f /usr/local/tomcat1/logs/catalina-daemon.out</div><div class="line"></div><div class="line"></div><div class="line">112机器部署这所有的服务/data0/service/*_service</div><div class="line"></div><div class="line">=====================================================================</div><div class="line">207机器zookeeper配置</div><div class="line">192.168.1.207</div><div class="line">用户名</div><div class="line">root</div><div class="line">密码</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">测试端口是否成功</div><div class="line">telnet 192.168.1.207 2181 </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">课程详情接口</div><div class="line">http://mm.zfwx.com/tdk/get_detail.json?courseId=3288</div><div class="line"></div><div class="line">去购买接口</div><div class="line">http://mm.zfwx.com/tdk/gopay_mysignup.json?courseId=3288</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">select distinct cg_id as id,cg_name as name,cs.cg_count as count </div><div class="line">from dj_cscategory cs  where cs.cg_count != 0 and cg_pcategory = -10</div><div class="line"> and cg_belong LIKE &apos;%1%&apos; order by cg_order;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">mobile 端口5098</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">========================================</div><div class="line"></div><div class="line"></div><div class="line">===========================</div><div class="line">查看注册中心注册的服务</div><div class="line">进入zookeeper的安装目录，进入bin 目录 cd /usr/local/zookeeper/bin</div><div class="line">./zkCli.sh</div><div class="line">ls /dubbo/com.blank.service.servicename</div><div class="line">===========================</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">查看服务端口</div><div class="line">http://itindex.net/detail/53125-dubbo-%E6%9C%8D%E5%8A%A1-telnet</div><div class="line">http://alibaba.github.io/dubbo-doc-static/Telnet+Command+Reference-zh-showComments=true&amp;showCommentArea=true.htm</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">======================================================================</div><div class="line">管理后台界面</div><div class="line">账号yangdebao</div><div class="line">密码yangdebao</div><div class="line">http://admin.zfwx.com/admin/index.jsp</div><div class="line"></div><div class="line">-----------定位action------------</div><div class="line">打开管理后台界面</div><div class="line">随便找一个url--&gt;右键--&gt;在新的标签页面打开（t）</div><div class="line">http://admin.zfwx.com/admin/DjStucourse/batchSelectCourseForMembers.do</div><div class="line">分析这个路由规则--admin（管理后台）-- </div><div class="line">（DjStucourse:DjStucourseAction 定位到action）---（batchSelectCourseForMembers方法）</div><div class="line"></div><div class="line">-----------定位模板------------</div><div class="line">定位界面在路由方法里面return STUSELECT_JSP;这个页面规则</div><div class="line">protected static final String STUSELECT_JSP = &quot;/admin/DjStucourse/stuselectcs.jsp&quot;;</div><div class="line">ctrl+shift+r查找到对应的jsp页面</div><div class="line"></div><div class="line">-----------模板讲解------------</div><div class="line">http://admin.zfwx.com/admin/DjCourse/edit.do?courseId=3501&amp;</div><div class="line">edit.jsp页面嵌入一个模板</div><div class="line">&lt;%@ include file=&quot;form_include.jsp&quot; %&gt;</div><div class="line">jsp中struts2框架的标签</div><div class="line">&lt;s:form&gt;&lt;/s:form&gt; </div><div class="line"></div><div class="line"></div><div class="line">/**推送消息添加**/</div><div class="line">课程列表--课程&amp;选课--操作（推送）</div><div class="line"></div><div class="line"></div><div class="line">121.40.51.45</div><div class="line">用户名:root</div><div class="line">密码</div><div class="line">7Nxddaup2HEcBeq3jrrnzabumuvDSxndyUdypuc5</div><div class="line"></div><div class="line">zfwx_api 8088</div><div class="line"></div><div class="line">步骤1</div><div class="line">进入tomcat的conf执行命令</div><div class="line">cat server.xml</div><div class="line">产看工程部署目录</div><div class="line"></div><div class="line">步骤2</div><div class="line">查看tomcat的环境变量</div><div class="line">cat /etc/profile</div><div class="line">查看tomcat环境变量</div><div class="line">步骤3</div><div class="line">进入/etc/init.d目录下查看有没有tomcat的启动脚本</div><div class="line">执行命令(在tomcat的脚本上面检索环境变量)</div><div class="line">grep &quot;CATALINA_HOME&quot; /etc/init.d/tomcat</div><div class="line"></div><div class="line"></div><div class="line">启动服务器</div><div class="line">/etc/init.d/tomcat2 restart</div><div class="line">tail -f /usr/local/tomcat1/logs/catalina-daemon.out</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">----------------------------------</div><div class="line">步骤1</div><div class="line">进入tomcat的conf执行命令</div><div class="line">cat server.xml</div><div class="line">产看工程部署目录</div><div class="line"></div><div class="line">步骤2</div><div class="line">查看tomcat的环境变量</div><div class="line">cat /etc/profile</div><div class="line">查看tomcat环境变量</div><div class="line">步骤3</div><div class="line">进入/etc/init.d目录下查看有没有tomcat的启动脚本</div><div class="line">执行命令(在tomcat的脚本上面检索环境变量)</div><div class="line">grep &quot;CATALINA_HOME&quot; /etc/init.d/tomcat</div><div class="line"></div><div class="line"></div><div class="line">/etc/init.d/tomcat2 restart</div><div class="line">tail -f /usr/local/tomcat1/logs/catalina-daemon.out</div><div class="line"></div><div class="line">账号密码:yangdebao</div><div class="line"></div><div class="line">http://admin.zfwx.com/admin/index.jsp</div><div class="line"></div><div class="line">---------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">线上代码查找</div><div class="line">win+r</div><div class="line">\\192.168.1.206\softMgr\jc</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">测试服务器数据库密码</div><div class="line">djcourse密码 ssh密钥</div><div class="line">z0gmq5gpKbpXzuxmjlnwfYYpie9y9DygdpfbMkqR</div><div class="line">casserver密码 ssh密钥</div><div class="line">7Nxddaup2HEcBeq3jrrnzabumuvDSxndyUdypuc5</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">=======================================================================</div><div class="line">1查看tomcat监听的端口号</div><div class="line">2 ps -ef| grep tomcat</div><div class="line">  netstat -ntlp | grep 端口号/进程号</div><div class="line">3 jps</div><div class="line">4 杀死进程</div><div class="line">5 重启tomcat</div><div class="line"></div><div class="line">=========================================================================</div><div class="line">查看进程号</div><div class="line">lsof -i | grep 端口号</div><div class="line">lsof -i:端口号</div><div class="line">netstat -ntlp| grep 端口号</div><div class="line"></div><div class="line">例子：</div><div class="line">nststat -nflp|grep 20884</div><div class="line">lsof -i:20884</div><div class="line">lsof -i | grep 20884</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[develop-skill-route-names]]></title>
      <url>/2017/12/19/develop-skill-route-names/</url>
      <content type="html"><![CDATA[<p>##开发技巧(接口，路由命名)<br>参考下面的网站路由规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">web服务标准链接</div><div class="line">学习好的官网的路由规则</div><div class="line">http://ws-i.org/</div><div class="line">http://uddi.xml.org/uddi-org</div><div class="line">http://www.alibabagroup.com/cn/global/home</div></pre></td></tr></table></figure></p>
<p>方法命名规则<br><a href="http://blog.csdn.net/u012012240/article/category/6062384" target="_blank" rel="external">转自</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">单词</div><div class="line">eclipse使用git遇到的单词</div><div class="line">Browse 浏览</div><div class="line">push   推送</div><div class="line">Configuration  配置</div><div class="line">team     团队</div><div class="line">upgrade  升级</div><div class="line">cleanup  清理</div><div class="line">clone    克隆</div><div class="line">repository  仓库</div><div class="line">master    主要</div><div class="line">history   历史</div><div class="line">repositories  库</div><div class="line">ignore    忽略</div><div class="line">patch     补丁</div><div class="line">reset     复位,还原</div><div class="line">untracked  跟踪</div><div class="line">staged     上演</div><div class="line">modified   被改进的</div><div class="line">compare mode  比较模式</div><div class="line">team synchronizing 团队同步</div><div class="line"></div><div class="line"></div><div class="line">commit时:</div><div class="line">author     作者</div><div class="line">committer  提交者</div><div class="line"> </div><div class="line">commit 提交到本地仓库</div><div class="line">stashes  将</div><div class="line">push to upstream  推到上游</div><div class="line">fetch from upstream  从上游取</div><div class="line">push branch 推支</div><div class="line">pull   拉取</div><div class="line">remote 远程</div><div class="line">references  引用</div><div class="line">switch to   切换到</div><div class="line">advanced    先进的</div><div class="line">synchronize workspace  同步工作区</div><div class="line">merge tool  合并工具</div><div class="line">merge    合并</div><div class="line">rebase 垫底</div><div class="line">refresh  刷新</div><div class="line">Clone Git repository  克隆Git仓库</div><div class="line">discon nect 断开连接</div><div class="line">create patch      创建补丁</div><div class="line">apply patch  应用修补程序</div><div class="line">add to index      添加到索引</div><div class="line">remove from index 从索引中删除</div><div class="line">show in repositories view  显示仓库视图</div><div class="line"></div><div class="line"></div><div class="line">checkout as new local branch  作为新的本地分支结账</div><div class="line">checkout commit  结帐提交</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">git view 仓库</div><div class="line"></div><div class="line"></div><div class="line">branches  分支</div><div class="line">  local  局部</div><div class="line">  remote tracking 远程跟踪</div><div class="line">create branch  创建分支</div><div class="line">paste repository path or url 粘贴库路径或网址</div><div class="line">working directory  工作目录</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">添加索引 好处？</div><div class="line">EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作</div><div class="line"></div><div class="line">///////////////////////////////////////////////////////////////////////</div><div class="line"> Maven学习遇到的单词</div><div class="line">Apache 一个开放源码的网页服务器</div><div class="line">timestamp 时间戳</div><div class="line">dependency  依赖</div><div class="line">injection   注入</div><div class="line">dependency injection 依赖注入</div><div class="line">Archetype 原型</div><div class="line">maven  专家</div><div class="line">selection 选择</div><div class="line">skip 跳跃</div><div class="line">simple 简单的</div><div class="line">plan  计划</div><div class="line">skip Archetype selection 跳过原型选择</div><div class="line">Create a simple project 创建一个简单的项目</div><div class="line">configuration  配置</div><div class="line">restore defaults  恢复默认值</div><div class="line">choose 选择</div><div class="line">existing 目前的</div><div class="line">choose an existing server 选择一个现有的的服务器</div><div class="line">manually  手动的</div><div class="line">define 定义</div><div class="line">reason 理由</div><div class="line">missing 错过</div><div class="line">config 配置</div><div class="line">preferences 参数选择</div><div class="line">runtime  执行时间</div><div class="line">environment 环境</div><div class="line">runtime environment  运行环境</div><div class="line">Annotation 注释</div><div class="line">source 来源</div><div class="line">resource 资源</div><div class="line">DataSource 数据源</div><div class="line">Artifact ID  组中模块的名称</div><div class="line">group id  组标识符</div><div class="line">scan  扫描</div><div class="line"></div><div class="line">不是很全，欢迎补充！</div><div class="line"></div><div class="line">///////////////////////////////////////////////////////////////////////</div><div class="line">spring学习单词</div><div class="line"></div><div class="line">Component 组成</div><div class="line">include   包含</div><div class="line">filter    过滤</div><div class="line">scan      扫描</div><div class="line">status    状态</div><div class="line">report    报告</div><div class="line">status report 状态报告</div><div class="line">source 来源</div><div class="line">not 不</div><div class="line">found 创立，建立</div><div class="line">for 因为</div><div class="line">source not found for</div><div class="line">没有找到来源</div><div class="line">jetty   码头</div><div class="line">skills  技能</div><div class="line">background  背景音乐</div><div class="line">in  在...之内，按照</div><div class="line">run in background  在后台运行</div><div class="line"></div><div class="line">不是很全，欢迎补充！</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome-hot-key]]></title>
      <url>/2017/12/19/chrome-hot-key/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p><a href="http://www.cnblogs.com/Chierush/p/3863972.html" target="_blank" rel="external">文章转自</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">chrome窗口和标签页快捷键： </div><div class="line">Ctrl+N	打开新窗口 </div><div class="line">Ctrl+T	打开新标签页 </div><div class="line">Ctrl+Shift+N	在隐身模式下打开新窗口 </div><div class="line">Ctrl+Shift+T	重新打开上次关闭的标签页。谷歌浏览器可记住最近关闭的 10 个标签页。 </div><div class="line"></div><div class="line"></div><div class="line">Ctrl+O，然后选择文件	在谷歌浏览器中打开计算机上的文件 </div><div class="line"></div><div class="line">按住 Ctrl 键，然后点击链接	从后台在新标签页中打开链接，但您仍停留在当前标签页中 </div><div class="line">按住 Ctrl+Shift 键，然后点击链接	在新标签页中打开链接，同时切换到新打开的标签页 </div><div class="line">按住 Shift 键，然后点击链接	在 新窗口 中打开链接 </div><div class="line"></div><div class="line">Alt+F4	关闭当前窗口 </div><div class="line">Ctrl+W 或 Ctrl+F4 关闭当前标签页或弹出式窗口</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Ctrl+1 到 Ctrl+8	切换到指定位置编号的标签页。您按下的数字代表标签页横条上的相应标签位置。 </div><div class="line">Ctrl+9	切换到最后一个标签页</div><div class="line"></div><div class="line">Ctrl+Tab 或 Ctrl+PgDown	切换到下一个标签页 </div><div class="line">Ctrl+Shift+Tab 或 Ctrl+PgUp	切换到上一个标签页 </div><div class="line">Alt+Home	打开主页 </div><div class="line"></div><div class="line">PgDown键（pg Dn）</div><div class="line">PgUp键（pg Up）</div><div class="line"></div><div class="line">ctrl+Home 浏览器顶部</div><div class="line">ctrl+End 浏览器底部</div><div class="line"></div><div class="line"></div><div class="line">打开谷歌chrome浏览器各功能的快捷键 </div><div class="line">Ctrl+B	打开和关闭书签栏 </div><div class="line">Ctrl+Shift+B	打开书签管理器 </div><div class="line">Ctrl+H	查看”历史记录”页 </div><div class="line">Ctrl+J	查看”下载”页 </div><div class="line">Shift+Escape	查看任务管理器 (Escape键左上角esc)</div><div class="line"></div><div class="line"></div><div class="line">chrome网页快捷键 </div><div class="line">Ctrl+P	打印当前页 </div><div class="line">Ctrl+S	保存当前页 </div><div class="line">F5	重新加载当前页 </div><div class="line">Esc	停止加载当前页 </div><div class="line">Ctrl+D	将当前网页加入书签 </div><div class="line">Ctrl+U	查看源代码 将链接拖动到书签栏	将链接加入书签 </div><div class="line">Ctrl++，或者按住 Ctrl 键并向上滚动鼠标滚轮	放大网页上的所有内容 </div><div class="line">Ctrl+-，或者按住 Ctrl 键并向下滚动鼠标滚轮	缩小网页上的所有内容 </div><div class="line">Ctrl+0	将网页上的所有内容都恢复到正常大小 chrome文字快捷键</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> hot-key </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hot-key </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chome-plugins]]></title>
      <url>/2017/12/19/chome-plugins/</url>
      <content type="html"><![CDATA[<p>###[常用的谷歌插件]</p>
<ul>
<li>Infinity</li>
<li>Momentum for Chrome  美丽瞬间</li>
<li>click&amp;clean 清除插件</li>
<li>react Developer Tools</li>
<li>redux devTools 插件</li>
<li>JsonView 插件</li>
<li>谷歌访问助手</li>
<li>扩展程序DevTools Theme: Zero Dark Matrix</li>
<li><a href="https://github.com/mauricecruz/chrome-devtools-zerodarkmatrix-theme" target="_blank" rel="external">黑色主题github地址</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jeecms]]></title>
      <url>/2017/11/06/jeecms/</url>
      <content type="html"><![CDATA[<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="http://www.jeecms.com/" target="_blank" rel="external">jeecms官网</a></p>
<p><a href="http://blog.csdn.net/huangjingqian/article/details/7410725" target="_blank" rel="external">JEECMS开发文档</a></p>
<p><a href="http://www.csdn.net/tag/jeecms" target="_blank" rel="external">csdn-jeecms</a></p>
<p>##Jeecsm使用框架包括：</p>
<ul>
<li>springMVC，</li>
<li>hibernate(数据持久层框架)，</li>
<li>Quartz(作业调度框架)，</li>
<li>ant(自动编译构建框架，在自动生成模版类时用到)，</li>
<li>Httpclient，</li>
<li>c3p数据池，</li>
<li>ehcache缓存框架，</li>
<li>dom4j框架（解析xml），</li>
<li>DWR框架(该框架可以通过js调用Java函数)，</li>
<li>Lucene全文检索框架，</li>
<li>Jcaptcha验证码生成框架，</li>
<li>sl4f和Log4j日志框架，</li>
<li>Jmagick图片处理框架，</li>
<li>JODConverter文件转化框架及FCK编辑器及Freemarker框架</li>
<li></li>
</ul>
<p>##Jeecsm框架包结构：</p>
<ul>
<li>Jeecsm有三大主要包分别为core(核心包)，common(公共类库包)和csm(网站主要包)</li>
<li>Action:页面交互层包，包含与页面交互类</li>
<li>Dao:DAO层包，包含封装数据操作类</li>
<li>Web:包含与页面有关的拦截器、过滤器、校验器等</li>
<li>Security:包含与安全有关联的类</li>
<li>Manager：业务逻辑层包，包含业务处理类</li>
<li>Entity:模型层包，包含数据模型类</li>
<li>Tpl:包含模版文件管理类，包括上传，删除等</li>
<li>Lucene:包含整站全文检索处理类</li>
<li>Staticpage:静态页面处理模块，包含与静态页面生成有关的类，包括该功能模块的页面交互层,DAO层和业务逻辑层包对象</li>
<li>Statistic:统计功能模块，包含与统计相关的处理类，包括该功能模块的页面交互层,DAO层和业务逻辑层包对象</li>
<li>Task:包含定时处理任务，定时器等</li>
<li>Tmplate:包含模版生成类，及模版文档</li>
<li>Common包都是一些工具包，就不详解释</li>
<li>Core核心包：封装与系统架构基础，如：登录，文件上传，图片模版保存等</li>
<li>Bhm包：包含全部hibernate配置文件，将配置文件和实体类分离</li>
<li>Base包：该包下全部对象都是抽象类，其封装数据模型及其基本操作，与模型类一一对应</li>
<li>模型类：继承Base包对应的抽象类，主要封装一些额外数据操作</li>
</ul>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>数据模型包中将Hibernate配置文件抽到一个包中管理，有利配置文件维护，将逻辑操作和数据模型分离，有利系统维护和问题域定位（这一点我们可以借鉴）</li>
<li>混合式包结构设计，网站业务逻辑按分层结构设计，而功能使用模块结构。前者灵活性和性能高但不利于维护，后者维护性和伸缩性好但不灵活。这导致站内业务不同层之间高耦合，不利于站内业务维护。</li>
<li>函数体中构建数据库操作语句，应视情况而定，与数据库交流频率多的语句应当作类的静态属性存放，不应该也放在函数体中，这将导致，内存消耗大，JVM虚拟机会频繁调用CG回收器。（如：用户访问）</li>
<li>动态构建sql语句应该使用StringBuilder或StringBuffer(线程安全),不应该在函数中通过“+”连接（除非是一条语句）</li>
<li>增加一个web包用来存放与容器有关的拦截器或过滤器，有利于维护和问题域定位(可以借鉴）</li>
</ol>
<hr>
<h2 id="转jeecms中一些分析"><a href="#转jeecms中一些分析" class="headerlink" title="转jeecms中一些分析"></a>转jeecms中一些分析</h2><ol>
<li><p>拦截器： 后台管理拦截器:com.jeecms.cms.web.AdminContextInterceptor<br>前台拦截器:FrontContextInterceptor 都会把site信息和user信息设置到request和线程变量中</p>
</li>
<li><p>UnifiedUser: 用户信息及登录信息表，记录用户基本信息及最后一次登录的信息 Authentication: 记录每次的登录信息 认证时抛出用户不存在的异常</p>
</li>
<li><p>国际化通用模板技术现在比较主流的是Velocity和Freemarker。如果我们的Web应用程序要启用这两种技术渲染视图，那么，spring MVC提供了FreeMarkerView和VelocityView两种View实现。因为二者都是基于同样的理念构建视图，所以，FreeMarkerView和VelocityView有着共同的父类AbstractTemplateViewAbstractTemplateView定义了几个boolean属性，让我们可以决定是否公开暴露某些数据给最终的合并过程，如下所述。private boolean exposeSpringMacroHelpers = true。是否需要为Spring提供的宏（macro）公开一个需要的RequestContext对象，默认需要，将以”springMacroRequestContext”为键公开一个RequestContext给合并过程。这样freeswitch就可以使用RequestContext中的方法获取国际化信息</p>
</li>
<li><p>权限控制拦截器在postHandler中取出用户的权限集合放到ModelMap中，自定义指令cms_perm，类：PermistionDirective，从ModelMap中取出用户权限集合，判断url是在其中</p>
</li>
<li><p>页面管理top.html显示登录用户信息，日期，上面的一排菜单点击top菜单，如栏目，跳转到/frame/channel_main.do，显示frame/channel_main.html，它是一个包含left和right的框架页，channel/v_left.do和channel/v_list.doleft显示刷新按钮和模型管理按钮，采用JavaScript加载v_tree.do，显示树菜单,v_tree.html是json数据，用于jQuery的treeview函数的数据源</p>
</li>
</ol>
<hr>
<p>##link<br><a href="http://blog.csdn.net/luoshenfu001/article/details/11764035" target="_blank" rel="external">blog</a></p>
<p><a href="http://www.blogjava.net/freeman1984/archive/2010/11/04/337239.html" target="_blank" rel="external">link2</a></p>
<p><a href="http://www.oschina.net/p/freemarker/" target="_blank" rel="external">关于FreeMaker的开源项目介绍
</a></p>
<p><a href="H:\archive\17-06-06\jeecms框架学习" target="_blank" rel="external">H:\archive\17-06-06\jeecms框架学习</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[project-name]]></title>
      <url>/2017/11/06/project-name/</url>
      <content type="html"><![CDATA[<ul>
<li>alliance_api</li>
<li>alliance_service</li>
<li>base</li>
<li>base_api</li>
<li>base_service</li>
<li>bbs</li>
<li>bdlk</li>
<li>cas</li>
<li>dailyreport</li>
<li>demo_api</li>
<li>demo_client</li>
<li>demo_service</li>
<li>design</li>
<li>dianda</li>
<li>dianda_manage</li>
<li>dianjing_model</li>
<li>dianjing_util</li>
<li>dianting</li>
<li>dianting_manage</li>
<li>djDef</li>
<li>djframework</li>
<li>djframework-ui</li>
<li>djph_api</li>
<li>djph_service</li>
<li>djyFe</li>
<li>expert-api</li>
<li>expert-service</li>
<li>facetoface_api</li>
<li>facetoface_mobile</li>
<li>facetoface_service</li>
<li>group</li>
<li>haijian</li>
<li>library_api</li>
<li>library_service</li>
<li>mail_api</li>
<li>mail_service</li>
<li>member_api</li>
<li>member_service</li>
<li>sfjd</li>
<li>sfml_api</li>
<li>sfml_pc</li>
<li>sfml_service</li>
<li>shop-api</li>
<li>shop-service</li>
<li>stustats_api</li>
<li>stustats_service</li>
<li>ui_worklog</li>
<li>wangqun</li>
<li>wdwq_api</li>
<li>wdwq_client</li>
<li>wdwq_service</li>
<li>wxdy</li>
<li>wxgr</li>
<li>wxht_old</li>
<li>wxqt</li>
<li>wxqt_old</li>
<li>wxsy_api</li>
<li>wxsy_service</li>
<li>xhht</li>
<li>zfwx</li>
<li>zfwx-admin</li>
<li>zfwx-android</li>
<li>zfwx-api</li>
<li>zfwx-ios</li>
<li>zfwx-ios-2</li>
<li>zfwx-pad</li>
<li>zyjs_api</li>
<li>zyjs_service</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> project </tag>
            
            <tag> 工程名称 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cas-01]]></title>
      <url>/2017/11/06/cas-01/</url>
      <content type="html"><![CDATA[<h2 id="Cas认证基本概念"><a href="#Cas认证基本概念" class="headerlink" title="Cas认证基本概念"></a>Cas认证基本概念</h2><ul>
<li>SSO     Single Sign On 单点登录</li>
<li>TGT      Ticket Granting Ticket 用户身份凭证票据（令牌，存在与浏览器与S端）</li>
<li>ST      Service Ticket 服务许可凭证票据（随机参数，每次S端校验后作废）</li>
<li>TGC      Ticket Granting Cookie 存放用户身份认证票据（存放令牌）的cookie ，浏览器关闭就失效</li>
</ul>
<h2 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h2><ul>
<li>1 web1的客户端检测到session无令牌凭证信息，将用户重定向到casserver</li>
<li><p>2 s端检测到传来的请求没有带（st）证书 参数，所以跳转到Login界面进行用户登陆验证</p>
</li>
<li><p>3 s端登陆认证结束后生成TGT令牌 和 随机的Ticket-ST证书 ，<br>并在用户的浏览器写入cookie STC，<br>随后让用户的浏览器重定向到web1应用中，并将随机参数ST证书带上一起带过去，之后web1的cas客户端将检测到此ST证书参数，<br>发送到Server端进行校验，校验成功后，服务端主动销毁此ST证书，并继续返回web1应用中，<br>web应用此时将令牌信息写入自己的Session中，从而完成用户的单点登陆认证。<br>服务端同样的也会用一个Map记录web1假如到单点登陆范围。</p>
</li>
<li><p>4 带参重定向到web1</p>
</li>
<li>5 拿到ST参数发送到s端进行校验</li>
<li>6 校验成功，进入web1应用，w1将令牌凭证TGT写如session</li>
</ul>
<h2 id="web2-发出请求"><a href="#web2-发出请求" class="headerlink" title="web2 发出请求"></a>web2 发出请求</h2><ul>
<li><p>此时用户第一次访问web2应用，<br>web2在自己的session中无法找到令牌信息。所以将用户重定向到S端，<br>S端拿到用户浏览器传来的cookie，从里面读取TGT，<br>生成一个随机的ST证书，<br>返回w2，w2拿到ST证书，就立即和S端进行校验，<br>S端校验成功后，立即销毁此ST证书，<br>并将web2加入到单点登陆范围内，<br>用户此时在web2中进行业务操作，<br>web2同样也会在seesion中记录此令牌凭证的，至此完成用户单点登陆功能</p>
</li>
<li><p>当用户下次访问web1或者web2的时候，<br>由于各自session中都能拿到TGT信息，<br>只需要从中的取到每次请求时所带的ST证书参数即可和S端进行交互校验正确后达到一站登陆，N站访问的SSO效果。<br>校验最后一登陆的信息。</p>
</li>
<li><p>w2让用户浏览器带cookie重定向到S端</p>
</li>
<li>s端从cookie中找到了TGT，生成ST证书返回到w2</li>
<li>w2根据参数ST返回到S端进行校验</li>
<li>校验成功后可以访问W2，W2的令牌写入Session</li>
</ul>
<hr>
<p>【H:\archive\17-06-06\cas架构】</p>
]]></content>
      
        <categories>
            
            <category> cas </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cas </tag>
            
            <tag> sso </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Driving-skills]]></title>
      <url>/2017/08/26/Driving-skills/</url>
      <content type="html"><![CDATA[<p>=^<em>^= 以下是本人考驾照的一些总结，仅供参考，恕请勿喷！=^</em>^= </p>
<h2 id="开车习惯"><a href="#开车习惯" class="headerlink" title="开车习惯"></a>开车习惯</h2><ul>
<li>只要不加油就备刹车</li>
<li>右脚不是在油门就是在刹车上。</li>
<li>停车跟车距离，看到前车的车轮胎，就是安全车距。</li>
<li>先挂档，再打灯</li>
<li>车随路走，路正车正，路歪车歪</li>
<li>拐弯处停车，先踩离合器，再踩刹车</li>
<li>注意停车踩刹车，不要着急，着急什么。说话不紧不慢的。</li>
<li>松离合，有震动，油离配合，加速起步</li>
</ul>
<h2 id="开始注意"><a href="#开始注意" class="headerlink" title="开始注意"></a>开始注意</h2><ul>
<li>档起步，一级一级加档减档</li>
<li>离合器不能离开左脚</li>
<li>考试系安全带</li>
<li>起步打灯</li>
<li>停车，空挡，拉手刹</li>
</ul>
<h2 id="反光镜调试"><a href="#反光镜调试" class="headerlink" title="反光镜调试"></a>反光镜调试</h2><ul>
<li>四分之一车身，</li>
<li>四分之一地上，</li>
<li>天地各一半。</li>
<li>左右车身占四分之一，</li>
<li>上下各一半。</li>
</ul>
<h2 id="驾照考试错误"><a href="#驾照考试错误" class="headerlink" title="驾照考试错误"></a>驾照考试错误</h2><ul>
<li>倒库，提前打轮</li>
<li>侧方停车，最后左打轮，进车位</li>
<li>库在哪个方向，往哪个方向打轮</li>
<li>两次打灯，侧方停车打灯，坡起打灯</li>
<li>经常犯的错误，停车刹车</li>
<li>脚搭在油门，轻轻加油。</li>
<li>半坡起步错误–手刹按到底</li>
<li>脚使点劲，平行踩离合，不是脚尖踩离合</li>
</ul>
<h2 id="半坡起步技巧"><a href="#半坡起步技巧" class="headerlink" title="半坡起步技巧"></a>半坡起步技巧</h2><ul>
<li>半坡起步</li>
<li>车速降下来，离合器抬一点，车速降下来，离合器抬一点。</li>
<li>自己与空调缝隙，杆，三点一线</li>
<li>半坡起步</li>
<li>右转向灯，对箭头</li>
<li>对点对杆，踩刹车，拉手刹</li>
<li>左转向灯，方向盘左90度，松离合器到抖动</li>
<li>加油到20-30，油门听到轰隆声，松手刹</li>
<li>反光镜过杆，回正方向盘</li>
<li>杆子和空调第三格子对齐。</li>
</ul>
<h2 id="倒库"><a href="#倒库" class="headerlink" title="倒库"></a>倒库</h2><ul>
<li>直行1号线消失，右打满</li>
<li>车头正了。一圈半回正。</li>
<li>行至到7号线中间，停车，踩刹车</li>
<li>挂倒档，</li>
<li>后视镜下沿三指头距离回正，</li>
<li>右打满，继续倒车</li>
<li>库位角两指，回正，倒车</li>
<li>库位角消失，右打满</li>
<li>看左边与4号线平行，车头正，一圈半回正方向盘</li>
<li>倒到平行，回正</li>
<li>倒车直，左透视镜下沿与黄线两指多一点，停车刚刚好。</li>
</ul>
<h2 id="直角转弯技巧"><a href="#直角转弯技巧" class="headerlink" title="直角转弯技巧"></a>直角转弯技巧</h2><ul>
<li>直角转弯，扳手挨着黄线，左打满</li>
<li>看远处左黄线与门把手平行，左打满，转弯回正</li>
<li>直角转弯。右透视镜与黄线重合，方向盘打满，转正就ok</li>
</ul>
<h2 id="s型转弯"><a href="#s型转弯" class="headerlink" title="s型转弯"></a>s型转弯</h2><ul>
<li>车速压速。</li>
<li>侧方停车</li>
<li>三个点</li>
<li>压车速，到侧方停车牌，打右转向灯</li>
<li>箭头一寸，右打满，倒车，</li>
<li>对着右下角点，左一圈半调整。</li>
<li>左扳手与黄线交叉，转正</li>
<li>前进档，左转向</li>
<li>右雨刷与白线交叉，向右</li>
<li></li>
<li><p>s转弯，往前边走边打弯</p>
</li>
<li>进车到打转向</li>
<li>车速越快，不能猛打方向盘</li>
<li>收油，踩离合，换档</li>
<li>收油，准备刹车，准备刹车</li>
<li>离合到底。</li>
</ul>
<h2 id="上车后操作顺序"><a href="#上车后操作顺序" class="headerlink" title="上车后操作顺序"></a>上车后操作顺序</h2><ul>
<li>1调整坐椅</li>
<li>2打左灯，举手</li>
<li>开始考试</li>
<li>松手刹，提，按，压</li>
<li>反光镜的下沿出现角</li>
</ul>
<h2 id="防止溜车"><a href="#防止溜车" class="headerlink" title="防止溜车"></a>防止溜车</h2><ul>
<li>1踩离合，踩刹车</li>
<li>2轻松离合车抖动，松刹车</li>
</ul>
<p>##倒库，倒车技巧</p>
<ul>
<li>看后视镜，哪边宽，往哪调，调90度，然后回正。</li>
<li>黄线在门把手的中间</li>
</ul>
<p>##正确挂挡</p>
<ul>
<li>横着用劲，竖着不用劲</li>
</ul>
<p>##考试步骤</p>
<ul>
<li>看镜子</li>
<li>扭头看盲区</li>
<li>转弯的时候</li>
<li>半连动就是起步离合的位置，轻加油门。</li>
<li>不要猛抬离合器。</li>
<li>停车，踩离合，踩刹车，轻点刹车</li>
<li>离合踩到底，轻点刹车。停车。</li>
</ul>
<ul>
<li>轻踏缓抬</li>
<li>油离配合</li>
<li>方向盘够使就可以了。</li>
</ul>
<ul>
<li>半坡，油离配合，</li>
<li><p>快速起步，</p>
</li>
<li><p>停车起步，</p>
<ul>
<li>轻点离合，踩刹车，起步，松刹车，油离配合。</li>
</ul>
</li>
<li><p>半坡起步，</p>
<ul>
<li>轻抬离合器，踩刹车，踩油门。松刹车</li>
</ul>
</li>
</ul>
<ul>
<li>下车逆时针。<ul>
<li>开车门左边右边左右手接替</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitpage-push]]></title>
      <url>/2017/08/26/gitpage-push/</url>
      <content type="html"><![CDATA[<p>查看远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -va</div></pre></td></tr></table></figure>
<p>切换远程分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -t origin/2.0.0</div><div class="line">git checkout -t origin/gh-pages</div></pre></td></tr></table></figure></p>
<p>发布静态网页</p>
<p>add -&gt; commit -&gt; push<br>这里要注意一下，我是直接新建的库，然后发布的，所以，没有master分支，只有gh-pages分支，github只会将你的gh-pages分支部署上去，不会动你的其他分支的东西。所以，我们要将改动提交到gh-pages分支上，再push。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myindex$ git branch</div><div class="line">        * gh-pages</div><div class="line">myindex$ git commit -a -m &quot;first commit&quot;</div><div class="line">myindex$ git push origin gh-pages</div></pre></td></tr></table></figure>
<p>总结<br>github创建静态页面发布静态页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1查看远程分支</div><div class="line">git branch -va</div><div class="line"></div><div class="line">2切换远程分支</div><div class="line">git checkout -t origin/gh-pages</div><div class="line"></div><div class="line">3发布静态网页</div><div class="line">add -&gt; commit -&gt; push</div></pre></td></tr></table></figure></p>
<p>步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1查看当前分支</div><div class="line">git branch</div><div class="line">   * gh-pages</div><div class="line"></div><div class="line">2添加文件到库中</div><div class="line">git commit -a -m &quot;first commit&quot;</div><div class="line"></div><div class="line">3提交代码到远程分支</div><div class="line">git push origin gh-pages</div></pre></td></tr></table></figure></p>
<p>git 提交代码步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> 创建文件夹</div><div class="line"></div><div class="line"> git init</div><div class="line"> </div><div class="line"> git add README.md</div><div class="line"> </div><div class="line"> git remote add origin</div><div class="line"> </div><div class="line"> https://git.coding.net/BlankCat/elephant-blog-api.git</div><div class="line"> </div><div class="line"> git push -u origin master</div><div class="line"> </div><div class="line">第二次</div><div class="line"></div><div class="line">git add *</div><div class="line">git commit -m “zjf”</div><div class="line">git push</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure></p>
<p> <a href="http://www.barretlee.com/blog/2014/04/30/switch-branch-in-git/" target="_blank" rel="external">参考链接</a></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-black-them]]></title>
      <url>/2017/03/06/hexo-black-them/</url>
      <content type="html"><![CDATA[<h3 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h3><h3 id="hexo主题-知乎"><a href="#hexo主题-知乎" class="headerlink" title="hexo主题:知乎"></a>hexo主题:<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">知乎</a></h3><h3 id="黑色主题-github"><a href="#黑色主题-github" class="headerlink" title="黑色主题:github"></a>黑色主题:<a href="https://github.com/idhyt/hexo-theme-next/tree/magiclamp" target="_blank" rel="external">github</a></h3>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[google-search]]></title>
      <url>/2017/03/06/google-search/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<hr>
<p>I am BlankCat，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">搜索引擎</div><div class="line">1完整匹配</div><div class="line">  mysql foreign key 关键字加空格</div><div class="line">  <span class="string">"mysql foreign key"</span></div><div class="line"></div><div class="line"></div><div class="line">2筛选 就要求Google返回含有mysql foreign key但不存在nodejs的文章。 减号-的使用</div><div class="line">  <span class="string">"mysql foreign key"</span> - <span class="string">"nodejs"</span></div><div class="line"></div><div class="line"></div><div class="line">3通配符</div><div class="line">  <span class="string">"mysql connect error *"</span> 返回所有已知的关于MySQL连接错误的文章。</div><div class="line"></div><div class="line"></div><div class="line"> 4站内搜索</div><div class="line">  程序找bug，stackoverflow是我个人觉得可信度最高也最全面的一个网站</div><div class="line">  <span class="string">"mysql foreign key"</span> site:stackoverflow.com</div><div class="line">  <span class="string">"mysql foreign key"</span> site:baidu.com</div><div class="line"></div><div class="line">5语言和日期</div><div class="line">  像2shou叔这种英语阅读能力不过关的人，遇到急事就不能一篇篇翻原版文档了，</div><div class="line">  不得不求助国内的二手货；这时，Google界面上的一个小按钮就帮上大忙了：</div><div class="line">  点击搜索工具 - 不限语言，下拉选择所有简体中文网页，</div><div class="line">  一下子就回到了祖国母亲的怀抱。有时用新出的库版本，别忘了隔壁那个不限日期按钮</div><div class="line">  ，可以帮你找到最最新鲜的技术文章。</div><div class="line"></div><div class="line">6Tab键使用</div><div class="line">  输入某个网址，再点击Tab</div><div class="line">  baidu.com+按tab键 搜索关键字</div><div class="line"></div><div class="line">7谷歌的安全搜索怎么关闭</div><div class="line">  搜索网址加个参数：&amp;safe=off</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Google </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[skill]]></title>
      <url>/2017/02/23/skill/</url>
      <content type="html"><![CDATA[<p>I am BlankCat ，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><p>``` bash</p>
<p>#####Android总结</p>
<p>oncreate –</p>
<p>上一个界面传值</p>
<p>查看上一个界面传值是干啥用的？–&gt;看变量注释</p>
<p>布局文件叫什么布局文件layout</p>
<p>2看网络请求回掉</p>
<p> onData开头的网络请求回掉</p>
<p>哪个网络请求对应哪个回调去找点击事件查看是哪个网络请求</p>
<p>ctrl+k 查找下一个</p>
<p>找控件去找布局文件的Sting.xml文件</p>
<p>string_activity_voicelecture.xml布局文件</p>
<p>找到布局文件</p>
<p>ctrl+h 全局搜索布局文件的内容</p>
<p>3.查找出所有的布局资源文件的引用</p>
<p>查找到布局文件是在我门的</p>
<p>3.找到对应的控件去找到id去Activity里面找点击事件</p>
<p>debug</p>
<p>dbms–&gt;应用进程–&gt;点击debug</p>
<p>f6下一步 debug</p>
<p>4 EventBus</p>
<p>接收界面：</p>
<p>EventBus.getDefault().register(this);</p>
<p>onDestroy解注册</p>
<p>EventBus.getDefault().unregister(this);</p>
<p>onEventMainThread()这个方法中接收定义的方法</p>
<p>发送界面：</p>
<p>EventBus.getDefault().post(new PayEvent()) 发送自定义的事件，发送Event之后,只要注册EventBus的Activity中的onEventMainThread()方法会接收一个自定义的Event</p>
<p>A发送，B,C,D界面接收同一个事件</p>
<p>自定义不同的EventBus，发生用不同的Eventbus发送，这样写太麻烦，也比较浪费性能</p>
<p>定义一个Event事件，这个事件里面加标记，在事件中判断Event的类型tag值进行判断。</p>
<p>微信支付流程</p>
<p><a href="http://www.mamicode.com/info-detail-469919.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-469919.html</a></p>
<p>支付宝支付流程</p>
<p><a href="http://blog.csdn.net/tspangle/article/details/39932963" target="_blank" rel="external">http://blog.csdn.net/tspangle/article/details/39932963</a></p>
<p>1支付流程，支付成功之后，后台发通知，前端App接收通知，然后提示支付成功</p>
<p>支付成功，后台和前台都会收到来自微信的回掉接口，以后台收到的为准</p>
<p>前端接到App的通知后，会发一个handler，通知界面已经接到消息</p>
<p>BaiduPushMessageReceiver</p>
<p>2渐变的listView 渐变的listView</p>
<p>3界面传数据Bundle传参数</p>
<p>4 android 设置自动点击事件就是不触发就执行点击事件的onclick方法</p>
<p>安卓桌面开发显示小控件</p>
<p>App Widgets</p>
<p>######################################html5 js总结##########################################################</p>
<p>手机浏览器h5项目</p>
<p><a href="https://github.com/ScorpionJay/oneH5" target="_blank" rel="external">https://github.com/ScorpionJay/oneH5</a></p>
<p><a href="https://github.com/ScorpionJay/react-redux-demo" target="_blank" rel="external">https://github.com/ScorpionJay/react-redux-demo</a></p>
<p><a href="http://reactnative.cn/" target="_blank" rel="external">http://reactnative.cn/</a></p>
<p>用reactjs写h5</p>
<p>angualarjs 前端框架</p>
<p>angualarjs 写后台管理系统项目，说的后台是后台管理项目</p>
<p>Angualarjs教程</p>
<p><a href="http://www.tuicool.com/articles/BZzUVrb" target="_blank" rel="external">http://www.tuicool.com/articles/BZzUVrb</a></p>
<p>当然react angularjs 后台是可以跑的 它们设计的方向是这样 现在还没</p>
<p>写组件 然后在什么上跑 就看渲染了 但是这里的服务器跑 还不是很了解</p>
<p>react native 项目</p>
<p><a href="https://github.com/helengray/XiFan" target="_blank" rel="external">https://github.com/helengray/XiFan</a></p>
<p>react native 大牛博客</p>
<p><a href="http://blog.csdn.net/it_talk" target="_blank" rel="external">http://blog.csdn.net/it_talk</a></p>
<p>前端js特效网站（<strong><strong><em>**</em></strong></strong>）</p>
<p><a href="http://js1k.com/" target="_blank" rel="external">http://js1k.com/</a></p>
<p>前端学习历程</p>
<p><a href="http://bbs.jointforce.com/topic/19501" target="_blank" rel="external">http://bbs.jointforce.com/topic/19501</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8-Stream详解]]></title>
      <url>/2017/02/05/jdk8-4/</url>
      <content type="html"><![CDATA[<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p>
<a id="more"></a>
<ul>
<li>Collection提供了新的stream()方法</li>
<li>流不存储值，通过管道的方式获取值</li>
<li>本质是函数式的，对流的操作会产生一个结果，不过并不会修改底层的数据源，集合可以作为流底层数据源</li>
<li>延迟查找，很多流操作（过滤、映射、排序等）都可以延迟实现</li>
</ul>
<p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。<br>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。<br>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。<br>流由3部分构成：</p>
<ol>
<li>源</li>
<li>零个或多个中间操作</li>
<li>终止操作<br><img src="http://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/img001.png" alt=""></li>
</ol>
<p>流操作的分类：</p>
<ol>
<li>惰性求值（中间操作）</li>
<li>及早求值（终止操作）</li>
</ol>
<h2 id="创建流的几种方式"><a href="#创建流的几种方式" class="headerlink" title="创建流的几种方式"></a>创建流的几种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Stream stream = Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>);</div><div class="line"></div><div class="line">        String[] strArray = <span class="keyword">new</span> String[]&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>&#125;;</div><div class="line">        Stream stream1 = Stream.of(strArray);</div><div class="line">        Stream stream2 = Arrays.stream(strArray);</div><div class="line"></div><div class="line">        List&lt;String&gt; list = Arrays.asList(strArray);</div><div class="line">        Stream stream3 = list.stream();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="流的简单使用"><a href="#流的简单使用" class="headerlink" title="流的简单使用"></a>流的简单使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;).forEach(System.out::println);</div><div class="line">        System.out.println(<span class="string">"--------"</span>);</div><div class="line">        <span class="comment">// 不包含8</span></div><div class="line">        IntStream.range(<span class="number">3</span>, <span class="number">8</span>).forEach(System.out::println);</div><div class="line">        System.out.println(<span class="string">"--------"</span>);</div><div class="line">        <span class="comment">// 包含8</span></div><div class="line">        IntStream.rangeClosed(<span class="number">3</span>, <span class="number">8</span>).forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="进一步应用"><a href="#进一步应用" class="headerlink" title="进一步应用"></a>进一步应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line"></div><div class="line">        System.out.println(list.stream().map(i -&gt; <span class="number">2</span> * i).reduce(<span class="number">0</span>, Integer::sum));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Stream转换为数组和集合"><a href="#Stream转换为数组和集合" class="headerlink" title="Stream转换为数组和集合"></a>Stream转换为数组和集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest4</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        String[] strArray = stream.toArray(i -&gt; new String[i]);</span></div><div class="line"><span class="comment">//        Arrays.asList(strArray).forEach(System.out::println);</span></div><div class="line"></div><div class="line"><span class="comment">//        String[] strArray = stream.toArray(String[]::new);</span></div><div class="line"><span class="comment">//        Arrays.asList(strArray).forEach(System.out::println);</span></div><div class="line"></div><div class="line"><span class="comment">//        List&lt;String&gt; list = stream.collect(Collectors.toList());</span></div><div class="line"><span class="comment">//        list.forEach(System.out::println);</span></div><div class="line"></div><div class="line">        <span class="comment">// 第一个参数是要返回的容器，第二个参数是对每一个结果进行处理，第三个参数是把所有处理过的结果组装进要返回的list</span></div><div class="line"><span class="comment">//        List&lt;String&gt; list = stream.collect(() -&gt; new ArrayList(), (theList, item) -&gt; theList.add(item), (theList1, theList2) -&gt; theList1.addAll(theList2));</span></div><div class="line"><span class="comment">//        List&lt;String&gt; list = stream.collect(ArrayList::new, ArrayList::add, ArrayList::addAll);</span></div><div class="line"><span class="comment">//        list.forEach(System.out::println);</span></div><div class="line"></div><div class="line">        <span class="comment">// 另一个重载的collect方法</span></div><div class="line"><span class="comment">//        List&lt;String&gt; list = stream.collect(Collectors.toCollection(ArrayList::new));</span></div><div class="line"><span class="comment">//        list.forEach(System.out::println);</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 转换为Set</span></div><div class="line"><span class="comment">//        Set&lt;String&gt; set = stream.collect(Collectors.toCollection(TreeSet::new));</span></div><div class="line"><span class="comment">//        set.forEach(System.out::println);</span></div><div class="line"></div><div class="line">        <span class="comment">// 拼接字符串</span></div><div class="line">        String str = stream.collect(Collectors.joining());</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="map和flatMap"><a href="#map和flatMap" class="headerlink" title="map和flatMap"></a>map和flatMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"helloworld"</span>, <span class="string">"test"</span>);</div><div class="line">        list.stream().map(String::toUpperCase).collect(Collectors.toList()).forEach(System.out::println);</div><div class="line">        System.out.println(<span class="string">"-------------"</span>);</div><div class="line"></div><div class="line">        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">        list2.stream().map(item -&gt; item * item).collect(Collectors.toList()).forEach(System.out::println);</div><div class="line">        System.out.println(<span class="string">"-------------"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// flapMap是把流里的List也打开成一整个流</span></div><div class="line">        Stream&lt;List&lt;Integer&gt;&gt; stream = Stream.of(Arrays.asList(<span class="number">1</span>), Arrays.asList(<span class="number">2</span>, <span class="number">3</span>), Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</div><div class="line">        stream.flatMap(theList -&gt; theList.stream()).map(item -&gt; item).forEach(System.out::println);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest6</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//        Stream&lt;String&gt; stream = Stream.generate(UUID.randomUUID()::toString);</span></div><div class="line"><span class="comment">//        stream.findFirst().ifPresent(System.out::println);</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// iterate会产生一个无限流，所以要配合limit使用</span></div><div class="line">        Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">1</span>, item -&gt; item + <span class="number">2</span>).limit(<span class="number">6</span>);</div><div class="line"><span class="comment">//        stream.forEach(System.out::println);</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//找出该流中大于2的元素，然后将每个月元素乘以2，然后过滤掉流中的前两个元素，然后再取流中的前两个元素，最后求出流中元素的总和。</span></div><div class="line">        <span class="comment">// 1,3,5,7,9,11 结果是32</span></div><div class="line"><span class="comment">//        Integer integer = stream.filter(item -&gt; item &gt; 2).mapToInt(item -&gt; item * 2)</span></div><div class="line"><span class="comment">//                .skip(2).limit(2).sum();</span></div><div class="line"><span class="comment">//        System.out.println(integer);</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//        IntSummaryStatistics intSummaryStatistics = stream.filter(item -&gt; item &gt; 2).mapToInt(item -&gt; item * 2)</span></div><div class="line"><span class="comment">//                .skip(2).limit(2).summaryStatistics();</span></div><div class="line"></div><div class="line"><span class="comment">//        System.out.println(intSummaryStatistics.getCount());</span></div><div class="line"><span class="comment">//        System.out.println(intSummaryStatistics.getMax());</span></div><div class="line"><span class="comment">//        System.out.println(intSummaryStatistics.getMin());</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//        System.out.println(stream);</span></div><div class="line"><span class="comment">//        System.out.println(stream.filter(item -&gt; item &gt; 2));</span></div><div class="line">        <span class="comment">// 这句代码会抛异常: stream has already been operated upon or closed</span></div><div class="line"><span class="comment">//        System.out.println(stream.distinct());</span></div><div class="line"></div><div class="line">        <span class="comment">// 正确的调用方式如下</span></div><div class="line">        System.out.println(stream);</div><div class="line">        Stream&lt;Integer&gt; stream2 = stream.filter(item -&gt; item &gt; <span class="number">2</span>);</div><div class="line">        System.out.println(stream2);</div><div class="line">        Stream&lt;Integer&gt; stream3 = stream2.distinct();</div><div class="line">        System.out.println(stream3);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="中间操作和终止操作本质上的区别"><a href="#中间操作和终止操作本质上的区别" class="headerlink" title="中间操作和终止操作本质上的区别"></a>中间操作和终止操作本质上的区别</h3><p>中间操作都会返回一个Stream对象，比如说返回Stream<integer>。<br>终止操作则不会返回Stream类型，可能不返回值，也可能返回其他类型的单个值。</integer></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest7</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// map是一个中间操作，是惰性的，在没有遇到终止操作的时候，中间操作是不会执行的</span></div><div class="line">        Stream&lt;String&gt; test = list.stream().map(item -&gt; &#123;</div><div class="line">            String result = item.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + item.substring(<span class="number">1</span>);</div><div class="line">            System.out.println(<span class="string">"test"</span>);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 这句代码才会输入map方法中的test</span></div><div class="line">        test.forEach(System.out::println);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 这段代码虽然输出了正确的结果，但是程序不会终止，因为distinct一直在为无限流不停的去重</span></div><div class="line">        IntStream.iterate(<span class="number">0</span>, i -&gt; (i + <span class="number">1</span> ) % <span class="number">2</span>).distinct().limit(<span class="number">6</span>).forEach(System.out::println);</div><div class="line">        <span class="comment">// 下面才是正确的方式</span></div><div class="line">        IntStream.iterate(<span class="number">0</span>, i -&gt; (i + <span class="number">1</span> ) % <span class="number">2</span>).limit(<span class="number">6</span>).distinct().forEach(System.out::println);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="串行流和并行流的区别"><a href="#串行流和并行流的区别" class="headerlink" title="串行流和并行流的区别"></a>串行流和并行流的区别</h3><p>Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest9</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 准备500w个uuid来用不同的流进行排序</span></div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5000000</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000000</span>; i++) &#123;</div><div class="line">            list.add(UUID.randomUUID().toString());</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"开始排序"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"></div><div class="line">        list.stream().sorted().count();</div><div class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(endTime - startTime);</div><div class="line">        System.out.println(<span class="string">"排序耗时："</span> + millis);</div><div class="line"></div><div class="line"></div><div class="line">        startTime = System.nanoTime();</div><div class="line"></div><div class="line">        list.parallelStream().sorted().count();</div><div class="line">        endTime = System.nanoTime();</div><div class="line"></div><div class="line">        millis = TimeUnit.NANOSECONDS.toMillis(endTime - startTime);</div><div class="line">        System.out.println(<span class="string">"排序耗时："</span> + millis);</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 开始排序</div><div class="line">         * 排序耗时：6500</div><div class="line">         * 排序耗时：3394</div><div class="line">         */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="流的短路"><a href="#流的短路" class="headerlink" title="流的短路"></a>流的短路</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest10</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>);</div><div class="line">        <span class="comment">// 打印长度为5的第一个单词</span></div><div class="line"><span class="comment">//        list.stream().mapToInt(String::length).filter(length -&gt; length == 5).findFirst().ifPresent(System.out::println);</span></div><div class="line"></div><div class="line">        <span class="comment">// 下面只会输入出hello和5，因为流针对每一个元素的统一应用所有操作，所以直接找到了第一个hello</span></div><div class="line">        list.stream().mapToInt(item -&gt; &#123;</div><div class="line">            <span class="keyword">int</span> length = item.length();</div><div class="line">            System.out.println(item);</div><div class="line">            <span class="keyword">return</span> length;</div><div class="line">        &#125;).filter(length -&gt; length == <span class="number">5</span>).findFirst().ifPresent(System.out::println);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flatMap的应用场景"><a href="#flatMap的应用场景" class="headerlink" title="flatMap的应用场景"></a>flatMap的应用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest11</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">"hello welcome"</span>, <span class="string">"world hello"</span>, <span class="string">"hello world hello"</span>, <span class="string">"hello welcome"</span>);</div><div class="line">        <span class="comment">// 找出所有单词并且去重</span></div><div class="line">        list.stream().flatMap(item -&gt; Arrays.stream(item.split(<span class="string">" "</span>))).distinct().forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进一步应用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest12</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(<span class="string">"Hi"</span>, <span class="string">"Hello"</span>, <span class="string">"你好"</span>);</div><div class="line">        List&lt;String&gt; list2 = Arrays.asList(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        List&lt;String&gt; result = list1.stream().flatMap(item -&gt; list2.stream().map(item2 -&gt; item + <span class="string">" "</span> + item2)).collect(Collectors.toList());</div><div class="line">        result.forEach(System.out::println);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分组：group-by操作"><a href="#分组：group-by操作" class="headerlink" title="分组：group by操作"></a>分组：group by操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest13</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">100</span>, <span class="number">20</span>);</div><div class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">90</span>, <span class="number">20</span>);</div><div class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">90</span>, <span class="number">30</span>);</div><div class="line">        Student student4 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">80</span>, <span class="number">40</span>);</div><div class="line"></div><div class="line">        List&lt;Student&gt; students = Arrays.asList(student1, student2, student3, student4);</div><div class="line"></div><div class="line">        <span class="comment">// select * from student group by name;</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 传统方式：</div><div class="line">         * 1. 循环列表</div><div class="line">         * 2. 取出学生名字</div><div class="line">         * 3. 检查map中是否存在该名字，不存在则直接添加到该map中；存在则将map中的List对象取出来，然后将该Student对象添加到List中</div><div class="line">         * 4. 返回map对象</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="comment">// 流方式，一行代码</span></div><div class="line">        Map&lt;String, List&lt;Student&gt;&gt; map = students.stream().collect(Collectors.groupingBy(Student::getName));</div><div class="line">        System.out.println(map);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//  select count(*) from student group by name;</span></div><div class="line">        Map&lt;String, Long&gt; map1 = students.stream().collect(Collectors.groupingBy(Student::getName, Collectors.counting()));</div><div class="line">        System.out.println(map1);</div><div class="line"></div><div class="line">        <span class="comment">// 每个人的平均分</span></div><div class="line">        Map&lt;String, Double&gt; map2 = students.stream().collect(Collectors.groupingBy(Student::getName, Collectors.averagingDouble(Student::getScore)));</div><div class="line">        System.out.println(map2);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 分区是分组的一种特例，就是用条件来分为两组</span></div><div class="line">        Map&lt;Boolean, List&lt;Student&gt;&gt; map3 = students.stream().collect(Collectors.partitioningBy(student -&gt; student.getScore() &gt;= <span class="number">90</span>));</div><div class="line">        System.out.println(map3);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8-方法引用]]></title>
      <url>/2017/02/05/jdk8-3/</url>
      <content type="html"><![CDATA[<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用：method reference<br>方法引用实际上是个Lambda表达式的一种语法糖。</p>
<p>我们可以将方法引用看作是一个<code>函数指针</code>，function pointer。</p>
<p>方法引用共分为4类：<br><a id="more"></a></p>
<ol>
<li><p>类名::静态方法名</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">10</span>);</div><div class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">90</span>);</div><div class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">50</span>);</div><div class="line">        Student student4 = <span class="keyword">new</span> Student(<span class="string">"zhaoliu"</span>, <span class="number">40</span>);</div><div class="line"></div><div class="line">        List&lt;Student&gt; students = Arrays.asList(student1, student2, student3, student4);</div><div class="line"></div><div class="line">        <span class="comment">// 这是常规的lambda表达式写法</span></div><div class="line">        students.sort((o1, o2) -&gt; Student.compareStudentByScore(o1, o2));</div><div class="line">        students.forEach(student -&gt; System.out.println(student.getScore()));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"-----------"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 下面展示方法引用的写法，这就是上面的代码的语法糖，更简洁</span></div><div class="line">        students.sort(Student::compareStudentByName);</div><div class="line">        students.forEach(student -&gt; System.out.println(student.getName()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>引用名::实例方法名</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentComparator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareStudentByScore</span><span class="params">(Student student1, Student student2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> student1.getScore() - student2.getScore();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareStudentByName</span><span class="params">(Student student1, Student student2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> student1.getName().compareToIgnoreCase(student2.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里演示了如何使用</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">StudentComparator studentComparator = <span class="keyword">new</span> StudentComparator();</div><div class="line">   students.sort((o1, o2) -&gt; studentComparator.compareStudentByScore(o1, o2));</div><div class="line">   students.sort(studentComparator::compareStudentByScore);</div></pre></td></tr></table></figure>
</li>
<li><p>类名::实例方法名<br> 新增2个方法</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareByScore</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.getScore() - student.getScore();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">comparByeName</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.getName().compareToIgnoreCase(student.getName());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 然后演示</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用lambda表达式和类型对象的实例方法</span></div><div class="line">   students.sort((o1, o2) -&gt; o1.compareByScore(o2));</div><div class="line">   <span class="comment">// 使用方法引用</span></div><div class="line"> <span class="comment">// 引用的是类型对象的实例方法</span></div><div class="line"> <span class="comment">// 这种方式的调用，lambda表达式的第一个参数是作为调用方，然后其他的lambda表达式参数都作为实例方法的参数传入</span></div><div class="line">   students.sort(Student::compareByScore);</div></pre></td></tr></table></figure>
</li>
<li><p>构造方法引用：类名::new</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Supplier&lt;Student&gt; supplier = () -&gt; <span class="keyword">new</span> Student();</div><div class="line">   <span class="comment">// 构造方法引用</span></div><div class="line">   Supplier&lt;Student&gt; supplier2 = Student::<span class="keyword">new</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8-Optional详解]]></title>
      <url>/2017/01/17/jdk8-2/</url>
      <content type="html"><![CDATA[<p>在Java中我们会经常遇到NullPointerException异常，代码里就少不了很多这样的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != obj) &#123;</div><div class="line">	.......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java 8中的Optional<t>是一个可以包含或不可以包含非空值的容器对象，在 Stream API中很多地方也都使用到了Optional。<br>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</t></p>
<p>我们应该怎么使用Optional这个类呢。<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Optional&lt;String&gt; optional = Optional.of(<span class="string">"hello"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 这是传统方式的代码书写方式</span></div><div class="line"><span class="comment">//        if (optional.isPresent()) &#123;</span></div><div class="line"><span class="comment">//            System.out.println(optional.get());</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"></div><div class="line">        <span class="comment">// 我们应该用函数式风格来使用Optional</span></div><div class="line">        optional.ifPresent(System.out::println);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"------"</span>);</div><div class="line">        System.out.println(optional.orElse(<span class="string">"world"</span>));</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"------"</span>);</div><div class="line">        System.out.println(optional.orElseGet(() -&gt; <span class="string">"nihao"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面再展示一个具体的应用场景</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employeeList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmployeeList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> employeeList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployeeList</span><span class="params">(List&lt;Employee&gt; employeeList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.employeeList = employeeList;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">        employee.setName(<span class="string">"zhangsan"</span>);</div><div class="line"></div><div class="line">        Employee employee2 = <span class="keyword">new</span> Employee();</div><div class="line">        employee2.setName(<span class="string">"lisi"</span>);</div><div class="line"></div><div class="line">        Company company = <span class="keyword">new</span> Company();</div><div class="line">        company.setName(<span class="string">"company1"</span>);</div><div class="line"></div><div class="line">        List&lt;Employee&gt; employeeList = Arrays.asList(employee, employee2);</div><div class="line"></div><div class="line">        company.setEmployeeList(employeeList);</div><div class="line">	    <span class="comment">// 下面的代码使用函数式的风格开发，避免了null判断以及条件分支等等代码</span></div><div class="line">        Optional&lt;Company&gt; optional = Optional.ofNullable(company);</div><div class="line">        System.out.println(optional.map(theCompany -&gt; theCompany.getEmployeeList()).orElse(Collections.emptyList()));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Security配置cors跨域访问]]></title>
      <url>/2016/12/29/spring-security-cors/</url>
      <content type="html"><![CDATA[<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cors.html" target="_blank" rel="external">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cors.html</a></p>
<p>文档看似很清晰的描述了如何在Spring 4.2之后启用cors跨域访问，网上搜索介绍这样的帖子也不少。也提到了说什么如果用了Spring Security的话要采用filter的方式来配置。下面这段话就是官方文档</p>
<blockquote>
<p>In order to support CORS with filter-based security frameworks like Spring Security, or with other libraries that do not support natively CORS, Spring Framework also provides a CorsFilter. Instead of using @CrossOrigin or WebMvcConfigurer#addCorsMappings(CorsRegistry), you need to register a custom filter defined like bellow:<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</div><div class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilter</span> <span class="keyword">extends</span> <span class="title">CorsFilter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyCorsFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(configurationSource());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> UrlBasedCorsConfigurationSource <span class="title">configurationSource</span><span class="params">()</span> </span>&#123;</div><div class="line">		CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">		config.setAllowCredentials(<span class="keyword">true</span>);</div><div class="line">		config.addAllowedOrigin(<span class="string">"http://domain1.com"</span>);</div><div class="line">		config.addAllowedHeader(<span class="string">"*"</span>);</div><div class="line">		config.addAllowedMethod(<span class="string">"*"</span>);</div><div class="line">		UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">		source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</div><div class="line">		<span class="keyword">return</span> source;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在经过测试之后，实在是无论采用哪一种方式都不行，实在是太费解了，debug了半天跨域的时候GET方法根本连DispatchServlet都不进去，POST方法倒是可以跨域，发现POST请求是根据header的origin来判断是否跨域。</p>
<p>还是想着从Spring Security这边来入手，结果就发现HttpSecurity类提供了这么一个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Adds a &#123;<span class="doctag">@link</span> CorsFilter&#125; to be used. If a bean by the name of corsFilter is</div><div class="line"> * provided, that &#123;<span class="doctag">@link</span> CorsFilter&#125; is used. Else if corsConfigurationSource is</div><div class="line"> * defined, then that &#123;<span class="doctag">@link</span> CorsConfiguration&#125; is used. Otherwise, if Spring MVC is</div><div class="line"> * on the classpath a &#123;<span class="doctag">@link</span> HandlerMappingIntrospector&#125; is used.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> CorsConfigurer&#125; for customizations</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> CorsConfigurer&lt;HttpSecurity&gt; <span class="title">cors</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">return</span> getOrApply(<span class="keyword">new</span> CorsConfigurer&lt;HttpSecurity&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我抱着试一试的心态，加上了这句话代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.headers()</div><div class="line">            .frameOptions()</div><div class="line">            .sameOrigin()</div><div class="line">            .and()</div><div class="line">            <span class="comment">// disable CSRF, http basic, form login</span></div><div class="line">            .csrf().disable()</div><div class="line">            <span class="comment">// 跨域支持</span></div><div class="line">            .cors().and()</div><div class="line"></div><div class="line">            .httpBasic().disable() <span class="comment">//</span></div><div class="line">            .formLogin().disable()</div><div class="line"></div><div class="line">            <span class="comment">// ReST is stateless, no sessions</span></div><div class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="comment">//</span></div><div class="line"></div><div class="line">            .and()</div><div class="line"></div><div class="line">            <span class="comment">// return 403 when not authenticated</span></div><div class="line">            .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> NoAuthenticationEntryPoint());</div><div class="line"></div><div class="line">    <span class="comment">// Let child classes set up authorization paths</span></div><div class="line">    setupAuthorization(http);</div><div class="line"></div><div class="line">    http.addFilterBefore(jsonWebTokenFilter, UsernamePasswordAuthenticationFilter.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就是<code>.cors().and()</code>这句了，然后还是采用<code>addCorsMappings</code>方法来配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">		registry.addMapping(<span class="string">"/api/**"</span>)</div><div class="line">			.allowedOrigins(<span class="string">"http://domain2.com"</span>)</div><div class="line">			.allowedMethods(<span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</div><div class="line">			.allowedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>, <span class="string">"header3"</span>)</div><div class="line">			.exposedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>)</div><div class="line">			.allowCredentials(<span class="keyword">false</span>).maxAge(<span class="number">3600</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果当然是成功了，Spring的文档也老是跟不上节奏，还是需要自己多探索和思考。希望能帮到遇到这个问题的朋友们。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8-Lambda表达式初步与函数式接口]]></title>
      <url>/2016/12/19/jdk8-1/</url>
      <content type="html"><![CDATA[<h1 id="Lambda表达式初步与函数式接口"><a href="#Lambda表达式初步与函数式接口" class="headerlink" title="Lambda表达式初步与函数式接口"></a>Lambda表达式初步与函数式接口</h1><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。<br><a id="more"></a></p>
<h2 id="为何需要Lambda表达式"><a href="#为何需要Lambda表达式" class="headerlink" title="为何需要Lambda表达式"></a>为何需要Lambda表达式</h2><ul>
<li>在Java中，我们无法将函数作为参数传递给一个方法，也无法声明返回一个函数的方法。</li>
<li>在JavaScript中，函数参数一个函数，返回值是另一个函数的情况是非常常见的；JavaScript是一门非常典型的函数式语言。</li>
</ul>
<p>Java匿名内部类示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do something     </span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样写是有点繁琐的，在Java8中可以直接下面这样写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">   <span class="comment">// do something     </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在Java8的循环中，我们也可以很方便的使用Lambda表达式。<br>示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.assList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"><span class="comment">// foreach语法</span></div><div class="line"><span class="keyword">for</span>(Integer i : list) &#123;</div><div class="line">	System.out.println(i);	</div><div class="line">&#125;</div><div class="line"><span class="comment">// JDK8新增的forEach方法</span></div><div class="line">list.forEach(i -&gt; System.out.println(i));</div><div class="line"><span class="comment">// 这种只有一行代码，一个参数的调用，我们甚至还可以再简化一点</span></div><div class="line">list.forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>看forEach的方法源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</div><div class="line">    Objects.requireNonNull(action);</div><div class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</div><div class="line">        action.accept(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接受了一个Consumer参数，这个接口是JDK8新增的一个函数式接口。<br>什么是函数式接口？</p>
<ol>
<li>一个接口，有且只有一个抽象方法，这个接口就称为函数式接口。</li>
<li>如果我们在某个接口上声明了@FunctionalInterface注解，那么编译器就会按照函数式接口的定义来要求该接口。</li>
<li>如果某个接口只有抽象方法，但我们并没有给该接口声明@FunctionalInterface注解，那么编译器依旧会将该接口看做是函数式接口。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(after);</div><div class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来试试自己写一个函数式接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 这个不算抽象方法，因为MyInterface的实现类必然是Object的子类，他会直接继承Object类的实现，实现类依然只需要实现test()方法。</span></div><div class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTest</span><span class="params">(MyInterface myInterface)</span> </span>&#123;</div><div class="line">        myInterface.test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        test.myTest(() -&gt; &#123;</div><div class="line">            <span class="comment">// 这里就是MyInterface.test()方法的实现</span></div><div class="line">            System.out.println(<span class="string">"mytest"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Lambda表达式的作用"><a href="#Lambda表达式的作用" class="headerlink" title="Lambda表达式的作用"></a>Lambda表达式的作用</h2><p>Lambda表达式为Java添加了缺失的函数式编程特性，使我们能将函数当作一等公民看待。<br>在将函数作为一等公民的语言中，Lambda表达式是类型是函数。但在Java中，Lambda表达式是对象，他们必须依附于一类特别的对象类型—-函数式接口（functional interface）。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>下面是用lambda表达式和stream来对一个列表的字符串进行大写字母转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"hello world"</span>);</div><div class="line">list.stream().map(String::toUpperCase).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>上面看到有2个冒号的地方，这个叫做方法引用，方法引用有四种方式，这是其中一种，通过类的方式引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Function&lt;String, String&gt; function = String::toUpperCase;</div><div class="line">System.out.println(function.apply(<span class="string">"hello"</span>));</div><div class="line">``` </div><div class="line"></div><div class="line">那么对象会被当做lambda表达式的第一个参数传入，上面的代码就相当于<span class="string">"hello"</span>.toUpperCase();</div><div class="line"></div><div class="line"></div><div class="line">下面演示一个Comparator的例子</div><div class="line"></div><div class="line">```java</div><div class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>, <span class="string">"zhaoliu"</span>);</div><div class="line">Collections.sort(names, (o1, o2) -&gt; o2.compareTo(o1));</div><div class="line"></div><div class="line">System.out.println(names);</div></pre></td></tr></table></figure>
<p>这就是一个倒序排序，Collections.sort()的第二个参数就是一个Comparator对象，我们用lambda表示来写的，看一下Comparator是声明为函数式接口。所以可以用lambda来写。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Java-Lambda基本语法"><a href="#Java-Lambda基本语法" class="headerlink" title="Java Lambda基本语法"></a>Java Lambda基本语法</h2><ul>
<li>Java中的Lambda表达式基本语法<ul>
<li>(arg) -&gt; (body)</li>
</ul>
</li>
<li>比如<ul>
<li>(arg1, arg2) -&gt; {bodu}</li>
<li>(type1 arg1, type2 arg2…) -&gt; {body}</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>(int a, int b) -&gt; { return a + b; }</li>
<li>() -&gt; System.out.println(“Hello World”);</li>
<li>(String s) -&gt; {System.out.println(s);}</li>
<li>() -&gt; 42</li>
</ul>
<h2 id="Java-Lambda结构"><a href="#Java-Lambda结构" class="headerlink" title="Java Lambda结构"></a>Java Lambda结构</h2><ul>
<li>一个Lambda表达式可以有零个或多个参数</li>
<li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同。</li>
<li>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a,b)或(int a,int b)或(String a,int b, float c)</li>
<li>空圆括号代表参数集为空。例如：() -&gt; 42</li>
<li>当只有一个参数，且其类型可推导时，圆括号()可省略。例如：a -&gt; return a * a;</li>
<li>Lambda表达式的主体可包含零条或多条语句。</li>
<li>如果Lambda表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致。</li>
<li>如果Lambda表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中(形成代码块)。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空。</li>
</ul>
<h2 id="主要接口详解"><a href="#主要接口详解" class="headerlink" title="主要接口详解"></a>主要接口详解</h2><h3 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        FunctionTest test = <span class="keyword">new</span> FunctionTest();</div><div class="line">        System.out.println(test.compute(<span class="number">1</span>, value -&gt; <span class="number">2</span> * value));</div><div class="line">        System.out.println(test.compute(<span class="number">2</span>, value -&gt; <span class="number">5</span> + value));</div><div class="line">        System.out.println(test.compute(<span class="number">3</span>, value -&gt; value * value));</div><div class="line"></div><div class="line"></div><div class="line">        Function&lt;Integer, String&gt; function = String::valueOf;</div><div class="line">        System.out.println(test.convert(<span class="number">5</span>, function.compose((Integer i) -&gt; i + <span class="number">1</span>)));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = function.apply(a);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, String&gt; function)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> function.apply(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="compose和andThen"><a href="#compose和andThen" class="headerlink" title="compose和andThen"></a>compose和andThen</h4><p>compose()方法，它接受一个Function，也返回一个Function，结果就是执行参数里的apply，再执行本对象的apply。<br>andThen()方法则相反，是先执行本对象的apply，再执行参数Function的apply。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionTest2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        FunctionTest2 test2 = <span class="keyword">new</span> FunctionTest2();</div><div class="line"></div><div class="line">        <span class="comment">// 输出12</span></div><div class="line">        System.out.println(test2.compute(<span class="number">2</span>, value -&gt; value * <span class="number">3</span>, value -&gt; value * value));</div><div class="line">        <span class="comment">// 输出36</span></div><div class="line">        System.out.println(test2.compute2(<span class="number">2</span>, value -&gt; value * <span class="number">3</span>, value -&gt; value * value));</div><div class="line"></div><div class="line">        <span class="comment">// 动态+-操作</span></div><div class="line">        System.out.println(test2.compute3(<span class="number">1</span>, <span class="number">2</span>, (value1, value2) -&gt; value1 + value2));</div><div class="line">        System.out.println(test2.compute3(<span class="number">1</span>, <span class="number">2</span>, (value1, value2) -&gt; value1 - value2));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// BIFunction实例</span></div><div class="line">        System.out.println(test2.compute4(<span class="number">2</span>, <span class="number">3</span>, (value1, value2) -&gt; value1 + value2, value -&gt; value * value));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> function1.compose(function2).apply(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute2</span><span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> function1.andThen(function2).apply(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, BiFunction&lt;Integer, Integer, Integer&gt; biFunction)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> biFunction.apply(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, BiFunction&lt;Integer, Integer, Integer&gt; biFunction, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> biFunction.andThen(function).apply(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BiFunction"><a href="#BiFunction" class="headerlink" title="BiFunction"></a>BiFunction</h3><p>接受2个参数，返回一个值的函数式接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>, <span class="number">20</span>);</div><div class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">30</span>);</div><div class="line">        Person person3 = <span class="keyword">new</span> Person(<span class="string">"wangwu"</span>, <span class="number">40</span>);</div><div class="line"></div><div class="line">        List&lt;Person&gt; people = Arrays.asList(person1, person2, person3);</div><div class="line"></div><div class="line"></div><div class="line">        PersonTest test = <span class="keyword">new</span> PersonTest();</div><div class="line"><span class="comment">//        List&lt;Person&gt; personResult = test.getPeopleByUsername("zhangsan", people);</span></div><div class="line"><span class="comment">//        personResult.forEach(person -&gt; System.out.println(person.getUsername()));</span></div><div class="line"></div><div class="line"><span class="comment">//        List&lt;Person&gt; personResult = test.getPeopleByAge(20, people);</span></div><div class="line"><span class="comment">//        personResult.forEach(person -&gt; System.out.println(person.getAge()));</span></div><div class="line"></div><div class="line">        List&lt;Person&gt; personResult = test.getPeopleByAge2(<span class="number">20</span>, people, (ageOfPerson, personList) -&gt; personList.stream().filter(person -&gt; person.getAge() &gt; ageOfPerson).collect(Collectors.toList()));</div><div class="line">        personResult.forEach(person -&gt; System.out.println(person.getAge()));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPeopleByUsername</span><span class="params">(String username, List&lt;Person&gt; people)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> people.stream().filter(person -&gt; person.getUsername().equals(username)).collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPeopleByAge</span><span class="params">(<span class="keyword">int</span> age, List&lt;Person&gt; people)</span> </span>&#123;</div><div class="line">        BiFunction&lt;Integer, List&lt;Person&gt;, List&lt;Person&gt;&gt; biFunction = (ageOfPerson, personList) -&gt; personList.stream().filter(person -&gt; person.getAge() &gt; ageOfPerson).collect(Collectors.toList());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> biFunction.apply(age, people);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPeopleByAge2</span><span class="params">(<span class="keyword">int</span> age, List&lt;Person&gt; people, BiFunction&lt;Integer, List&lt;Person&gt;, List&lt;Person&gt;&gt; biFunction)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> biFunction.apply(age, people);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>判断用的函数式接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Predicate&lt;String&gt; predicate = p -&gt; p.length() &gt; <span class="number">5</span>;</div><div class="line">        System.out.println(predicate.test(<span class="string">"hello"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateTest2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">        PredicateTest2 predicateTest2 = <span class="keyword">new</span> PredicateTest2();</div><div class="line">        predicateTest2.conditionFilter(list, i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</div><div class="line"></div><div class="line">        predicateTest2.conditionFilter2(list, item -&gt; item &gt; <span class="number">5</span>, item -&gt; item % <span class="number">2</span> == <span class="number">0</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 以前我们在对数据进行筛选或者处理的时候，一般是单独定义一个方法来进行处理，现在我们只需要把筛选条件当作参数传入</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionFilter</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</div><div class="line">            <span class="keyword">if</span> (predicate.test(integer)) &#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Predicate的其他方法测试</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionFilter2</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate, Predicate&lt;Integer&gt; predicate2)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</div><div class="line">            <span class="keyword">if</span> (predicate.or(predicate2).test(integer)) &#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>简单测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Supplier&lt;String&gt; supplier = () -&gt; <span class="string">"hello world"</span>;</div><div class="line">        System.out.println(supplier.get());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>java.util.function包下面还有很多函数式接口，无非就是0参数，1个参数，2个参数的接口，用法都是一样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryOperatorTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BinaryOperatorTest binaryOperatorTest = <span class="keyword">new</span> BinaryOperatorTest();</div><div class="line">        System.out.println(binaryOperatorTest.compute(<span class="number">1</span>, <span class="number">2</span>, (a, b) -&gt; a + b));</div><div class="line">        System.out.println(binaryOperatorTest.compute(<span class="number">1</span>, <span class="number">2</span>, (a, b) -&gt; a - b));</div><div class="line">        System.out.println(<span class="string">"----------------"</span>);</div><div class="line">        System.out.println(binaryOperatorTest.getShort(<span class="string">"hello123"</span>, <span class="string">"world"</span>, (a, b) -&gt; a.length() - b.length()));</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, BinaryOperator&lt;Integer&gt; binaryOperator)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binaryOperator.apply(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShort</span><span class="params">(String a, String b, Comparator&lt;String&gt; comparator)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BinaryOperator.minBy(comparator).apply(a, b);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程7-取消与关闭]]></title>
      <url>/2016/12/14/concurrency7/</url>
      <content type="html"><![CDATA[<h1 id="取消与关闭"><a href="#取消与关闭" class="headerlink" title="取消与关闭"></a>取消与关闭</h1><p>任务和线程的启动很容易。在大多数时候，我们都会让它们运行直到结束，或者让它们自行停止。然而，有时候我们希望提前结束任务或线程，或许是因为用户取消了操作，或者应用程序需要被快速关闭。</p>
<h2 id="任务取消"><a href="#任务取消" class="headerlink" title="任务取消"></a>任务取消</h2><p>在Java中没有一种安全的抢占式方法来停止线程，因此也就没有安全的抢占式方法来停止任务。只有一些协作式的机制，使请求取消的任务和代码都遵循一种协商好的协议。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> cancelled;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span>(!cancelled)&#123;</div><div class="line">		<span class="comment">// do something</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>一些特殊的阻塞库的方法支持中断。线程中断是一种协作机制，线程可以通过这种机制来通知另一个线程，告诉它在合适的或者可能的情况下轻质当前工作，并转而执行其他的工作。</p>
<p>在Java的API或语言规范中，并没有将中断与任何取消语义关联起来，但实际上，如果在取消之外的其他操作中使用中断，那么都是不合适的，并且很难职称起更大的应用。</p>
<p>每个线程都有一个boolean类型的中断状态。当中断线程时，这个线程的中断状态将设置为true。在Thread中包含了中断线程以及查询中断状态的方法。interrupt方法能中断目标线程，isInterrupted方法能返回目标线程的中断状态。静态方法interrupted将清除当前线程的中断状态，并返回它之前的值，这也是清除中断状态的唯一方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Thread</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;...&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;...&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用interrupt并不意味着立即停止目标线程正在进行的工作，而只是传递了请求中断的消息。</p>
<h3 id="中断策略"><a href="#中断策略" class="headerlink" title="中断策略"></a>中断策略</h3><p>正如任务中应该包含取消策略一样，线程同样应该包含中断策略。中断策略规定线程如何解释某个中断请求-当发现中断请求时，应该做哪些工作。由于每个线程拥有各自的中断策略，因此除非你知道中断对该线程的含义，否则就不应该中断这个线程。</p>
<h3 id="响应中断"><a href="#响应中断" class="headerlink" title="响应中断"></a>响应中断</h3><p>当调用可中断的阻塞函数时，例如Thread.sleep或BlockingQueue.put等，有两种实用策略可用于处理InterruptedException:</p>
<ul>
<li>传递异常，从而使你的方法也成为可中断的阻塞方法</li>
<li>恢复中断方法，从而使调用栈中的上层代码能够对进行处理。</li>
</ul>
<p>只有实现了线程中断策略的代码才可以屏蔽中断请求。在常规的任务和库代码中都不应该屏蔽中断请求。</p>
<h3 id="处理不可中断的阻塞"><a href="#处理不可中断的阻塞" class="headerlink" title="处理不可中断的阻塞"></a>处理不可中断的阻塞</h3><p>并非所有的可阻塞方法或者阻塞机制都能相应中断；如果一个线程由于执行同步的Socket I/O或者等待获得内置锁而阻塞，那么中断请求只能设置线程的中断状态，除此之外没有其他任何作用。对于那些由于执行补课中断操作而被阻塞的线程，可以使用类似于中断的手段来停止这些线程，但这要求我们必须知道线程阻塞的原因。</p>
<h2 id="停止基于线程的服务"><a href="#停止基于线程的服务" class="headerlink" title="停止基于线程的服务"></a>停止基于线程的服务</h2><p>应用程序通常会创建拥有多个线程的服务，例如线程池，并且这些服务的生命周期通常比创建它们的方法的生命周期更长。如果应用程序准备退出，那么这些服务所拥有的线程也需要结束。由于无法通过抢占式的方法来停止线程，因此它们需要自行结束。</p>
<p>除非拥有某个线程，否则不能对该线程进行操控。对于持有线程的服务，只要服务的存在时间大于创建线程的方法的存在时间，那么就应该提供生命周期方法。</p>
<p>例如日志服务，为了不给程序带来性能开销，记录日志的操作有一种方法是通过调用log方法将日志消息放入某个队列中，并由其他线程来处理。然后我们要合理的处理这个日志队列，避免因为JVM无法正常关闭时，停止日志线程导致消息丢失。</p>
<h3 id="关闭ExecutorService"><a href="#关闭ExecutorService" class="headerlink" title="关闭ExecutorService"></a>关闭ExecutorService</h3><p>ExecutorService提供两种关闭方法：使用shutdown正常关闭，以及使用shutdownNow强行关闭。在进行强行关闭时，shutdownNow首先关闭当前正在执行的任务，然后返回所有尚未启动的任务清单。</p>
<p>这两种关闭方式的差别在于各自的安全性和响应性：强行关闭的速度更快，但风险也更大，因为任务很可能在执行到一半时被结束；而正常关闭虽然速度慢，但却更安全，因为ExecutorService会一直等到队列中的所有任务都执行完成后才关闭。在其他拥有线程的服务中也应该考虑提供累死的关闭方式以供选择。</p>
<h3 id="shutdownNow的局限性"><a href="#shutdownNow的局限性" class="headerlink" title="shutdownNow的局限性"></a>shutdownNow的局限性</h3><p>当通过shutdownNow来强行关闭ExecutorService时，它会尝试取消正在执行的任务，并返回所有已提交但尚未开始的任务，从而将这些任务写入日志或者保存起来以便之后进行处理。</p>
<p>然而，我们无法通过常规方法来找出哪些任务已经开始但尚未结束。这意味着我们无法在关闭过程中知道正在执行的任务的状态，除非任务本身会执行某种检查。要知道哪些任务还没有完成，你不仅需要知道哪些任务还没有开始，而且还需要知道当Executor关闭时哪些任务正在执行。</p>
<h3 id="未捕获的异常"><a href="#未捕获的异常" class="headerlink" title="未捕获的异常"></a>未捕获的异常</h3><p>当线程内代码抛出RuntimeException时，Thread API提供了uncaughtExceptionHanlder，它能检测出某个线程由于未捕获的异常而终结的情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptureUncaughtException</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool(<span class="keyword">new</span> HandlerThreadFactory());</div><div class="line">        executorService.execute(<span class="keyword">new</span> ExceptionThread2());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        System.out.println(<span class="string">"run() by "</span> + t);</div><div class="line">        System.out.println(<span class="string">"eh = "</span> + t.getUncaughtExceptionHandler());</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"caught "</span> + e);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span> + <span class="string">" creating new Thread"</span>);</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(r);</div><div class="line">        System.out.println(<span class="string">"created "</span> + t);</div><div class="line">        t.setUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</div><div class="line">        System.out.println(<span class="string">"eh = "</span> + t.getUncaughtExceptionHandler());</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JVM关闭"><a href="#JVM关闭" class="headerlink" title="JVM关闭"></a>JVM关闭</h2><p>JVM既可以正常关闭，也可以强行关闭。</p>
<h3 id="关闭钩子"><a href="#关闭钩子" class="headerlink" title="关闭钩子"></a>关闭钩子</h3><p>在正常关闭中，JVM首先调用所有已注册的关闭钩子。关闭钩子是指通过Runtime.addShutdownHook注册的但尚未开始的线程。JVM并不能保证关闭钩子的调用顺序。在关闭应用程序线程时，如果有（守护或非守护）线程仍然在运行，那么这些线程接下来将与关闭进程并发执行。当所有的关闭钩子都执行结束时，如果runFinalizersOnExit为true，那么JVM将运行终结器，然后再停止。JVM并不会停止或中断任何在关闭时仍然运行的应用程序线程。当JVM最终结束时，这些线程将被强行结束。如果关闭钩子或终结器没有执行完成，那么正常关闭进行“挂起”并且JVM必须被强行关闭。当被强行关闭时，只是关闭JVM，而不会运行关闭钩子。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>线程可分为两种：普通线程和守护线程。在JVM启动时创建的所有线程中，除了主线程以外，其他的线程都是守护线程（例如垃圾回收器以及其他执行辅助工作的线程）。当创建一个新线程时，新线程将继承创建它的线程的守护状态，因此在默认情况下，主线程创建的所有线程都是普通线程。</p>
<p>普通线程与守护线程之间的差异仅在于当线程退出时发生的操作。当一个线程退出时，JVM会检查其他正在运行的线程，如果这些线程都是守护线程，那么JVM会正常退出操作。当JVM停止时，所有仍然存在的守护线程都将被抛弃—-既不会执行finally代码块，也不会执行回卷栈，而JVM只是退出。我们应尽可能少地使用守护线程。</p>
<h3 id="终结器"><a href="#终结器" class="headerlink" title="终结器"></a>终结器</h3><p>finalize方法就是终结器，JVM并不保证何时运行甚至是否运行，应该避免使用终结器。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在任务、线程、服务以及应用程序等模块中的生命周期结束问题，可能会增加它们在设计和实现时的复杂性。Java并没有提供某种抢占式的机制来取消操作或者终结线程。相反，它提供了一种协作式的中断机制来实现取消操作，但这要依赖于如何构建取消操作的协议，以及能否始终遵循这些协议。通过FutureTask和Executor框架，可以帮助我们构建可取消的任务和服务。</p>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016-12-13-life]]></title>
      <url>/2016/12/13/2016-12-13-life/</url>
      <content type="html"><![CDATA[<p>I am BlankCat，welcome to my blog；</p>
<p>##生活感悟</p>
<p>无论遇见什么事，切记别发火，地铁上一个人和一个老人抢座，那个男的非逼自己的老婆坐在自己旁边，挤那个老人，没有风度，切记不要那样。</p>
<p>####从刘老师身上学到的</p>
<p>学会慢，说话慢慢说，学会安静，就学学刘老师是怎么处理生活和工作。</p>
<p>####对技术的感悟</p>
<ul>
<li><p>对于技术层面，要高度模仿别人的思维，和别人的工作方式</p>
</li>
<li><p>把复杂的工作简单化</p>
</li>
<li><p>做一件事，要清楚自己的目标，我要啥，我有啥，我该怎么做</p>
</li>
</ul>
<p>####今日总结（2016-12-13）</p>
<ul>
<li><p>zookeeper命令的操作（上午）</p>
</li>
<li><p>看电子书《angular》基础知识</p>
</li>
</ul>
<p>（下午）</p>
<ul>
<li>写了一篇博客，画一个界面</li>
</ul>
<p>####明日memo</p>
<ul>
<li><p>坚持吃早餐</p>
</li>
<li><p>梳理业务需求，完成近期的开发工作</p>
</li>
<li><p>坚持画一个界面</p>
</li>
<li><p>坚持学博客</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程6-任务执行]]></title>
      <url>/2016/12/13/concurrency6/</url>
      <content type="html"><![CDATA[<h1 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h1><p>任务通常是一些抽象的且离散的工作单元。通过把应用程序的工作分解到多个任务中，可以简化程序的组织结构</p>
<h2 id="在线程中执行任务"><a href="#在线程中执行任务" class="headerlink" title="在线程中执行任务"></a>在线程中执行任务</h2><p>在理想情况下，各个任务之间是相互独立的：任务并不依赖其他任务的状态、结果或边界效应。独立性有助于实现并发，例如向web服务器提交一个请求，不会影响正在处理的其他请求。</p>
<h3 id="为任务创建线程"><a href="#为任务创建线程" class="headerlink" title="为任务创建线程"></a>为任务创建线程</h3><p>如果为每一个任务都创建一个线程，那么资源开销是极大的，无限制的创建线程存在一些缺陷：</p>
<ul>
<li>线程生命周期的开销非常高</li>
<li>资源消耗</li>
<li>稳定性<a id="more"></a>
<h2 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h2></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Executor基于生产者-消费者模式，提交任务的操作相当于生产者（生成待完成的工作单元），执行任务的线程则相当于消费者（执行完这些工作单元）。</p>
<p>每当看到下面这种形式的代码时：</p>
<pre><code>new Thread(runnable).start();
</code></pre><p>并且你希望获得一种更灵活的执行策略时，请考虑使用Executor来代替Thread。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池从字面意思来看，是指管理一组同构工作线程的资源池。</p>
<p>在线程池中执行任务比「为每一个任务分配一个线程」优势更多。通过重用现有的线程而不是创建新线程，可以在处理多个请求时分摊在线程创建和销毁过程中产生的巨大开销。另外一个额外的好处死，当请求到达时，工作线程通常已经存在，因此不会由于等待创建线程而延迟任务的执行，从而提高了响应性。</p>
<p>Executors中的静态工厂方法提供了一些线程池：</p>
<ul>
<li>newFixedThreadPool</li>
<li>newCachedThreadPool</li>
<li>newSingleThreadExecutor</li>
<li>newScheduledThreadPool</li>
</ul>
<h3 id="Executor的生命周期"><a href="#Executor的生命周期" class="headerlink" title="Executor的生命周期"></a>Executor的生命周期</h3><p>ExecutorService提供了一些用于生命周期管理的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</div><div class="line">    Future&lt;?&gt; submit(Runnable task);</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line">                    <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ExecutorService的生命周期有3种状态：运行、关闭和已终止。ExecutorService在初始创建时处于运行状态。shotdown方法将执行平缓的关闭过程：不再接受新的任务，同事等待已经提交的任务执行完成–包括那些还未开始执行的任务。shotdownNow方法将执行粗暴的关闭过程：它将尝试取消所有运行中的任务，并且不再启动队列中尚未开始执行的任务。</p>
<h3 id="延迟任务与周期任务"><a href="#延迟任务与周期任务" class="headerlink" title="延迟任务与周期任务"></a>延迟任务与周期任务</h3><p>Timer类负责管理延迟任务以及周期任务。然而，Timer存在一些缺陷，因此应该考虑使用ScheduledThreadPoolExecutor来代替它。</p>
<h3 id="携带结果的任务Callable与Future"><a href="#携带结果的任务Callable与Future" class="headerlink" title="携带结果的任务Callable与Future"></a>携带结果的任务Callable与Future</h3><p>Callable：它人为主入口点将返回一个值，并可能抛出一个异常。Future表示一个任务的生命周期，并提供相应的方法来判断是否已经完成或取消，以及获取任务的结果和取消任务等。</p>
<p>可以通过许多种方法创建一个Future来描述任务。ExecutorService中的所有submit方法都将反悔一个Future，从而将一个Runnable或Callable提交给Executor，并得到一个Future用来获得任务的执行结果或者取消任务。</p>
<h3 id="CompletionService与BlockingQueue"><a href="#CompletionService与BlockingQueue" class="headerlink" title="CompletionService与BlockingQueue"></a>CompletionService与BlockingQueue</h3><p>CompletionService将Executor和BlockingQueue的功能融合在一起。你可以将Callable任务提交给它来执行，然后使用类似于队列操作的take和poll等方法来获得已完成的结果，而这些结果会在完成时将被封装为Future。ExecutorCompletionService实现了CompletionService，并将计算部分委托给一个Executor。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过围绕任务执行来设计应用程序，可以简化开发过程，并有助于实现并发。Executor框架将任务提交与执行策略解耦开来，同时还支持多重不同类型的执行策略。当需要创建线程来执行任务时，可以考虑使用Executor。要想在将应用程序分解为不同的任务时获得最大的好处，必须定义清晰的任务边界。某些应用程序中存在着比较明显的任务边界，而在其他一些程序中则需要进一步分析才能揭示出粒度更细的并行性。</p>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集成JWT到Spring Boot项目]]></title>
      <url>/2016/12/08/spring-boot-jwt/</url>
      <content type="html"><![CDATA[<p>这篇文章我们来讲一下如何集成JWT到Spring Boot项目中来完成接口的权限验证。</p>
<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>JWT是一种用于双方之间传递安全信息的简洁的、URL安全的表述性声明规范。JWT作为一个开放的标准（ RFC 7519 ），定义了一种简洁的，自包含的方法用于通信双方之间以Json对象的形式安全的传递信息。因为数字签名的存在，这些信息是可信的，JWT可以使用HMAC算法或者是RSA的公私秘钥对进行签名。<br>如何使用JWT？</p>
<p>在身份鉴定的实现中，传统方法是在服务端存储一个session，给客户端返回一个cookie，而使用JWT之后，当用户使用它的认证信息登陆系统之后，会返回给用户一个JWT，用户只需要本地保存该token（通常使用local storage，也可以使用cookie）即可。<br><a id="more"></a><br>因为用户的状态在服务端的内存中是不存储的，所以这是一种 无状态 的认证机制。服务端的保护路由将会检查请求头 Authorization 中的JWT信息，如果合法，则允许用户的行为。由于JWT是自包含的，因此减少了需要查询数据库的需要。</p>
<p>JWT的这些特性使得我们可以完全依赖其无状态的特性提供数据API服务，甚至是创建一个下载流服务。因为JWT并不使用Cookie的，所以你可以使用任何域名提供你的API服务而不需要担心跨域资源共享问题（CORS）。<br>大概就是这样：<br><img src="http://img1.tuicool.com/UfIbUjj.png!web" alt=""></p>
<h1 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h1><p>我是勤劳的搬运工，<a href="http://www.jdon.com/dl/best/json-web-tokens-spring-cloud-microservices.html" target="_blank" rel="external">这应该是翻译老外的东西</a>，项目地址：<a href="https://github.com/thomas-kendall/trivia-microservices。" target="_blank" rel="external">https://github.com/thomas-kendall/trivia-microservices。</a></p>
<p>废话不多说了，我直接上代码,依然是搬运工。<br>我是gradle构建的，就是引入一些依赖的jar包。顺便推荐一下阿里云的中央仓库</p>
<pre><code>http://maven.aliyun.com/nexus/content/groups/public/
</code></pre><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter-aop'</span>)</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</div><div class="line">	compile(<span class="string">'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1'</span>)</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</div><div class="line">    compile(<span class="string">'com.google.guava:guava:20.0'</span>)</div><div class="line">    compile(<span class="string">'com.alibaba:druid:0.2.9'</span>)</div><div class="line">	compile(<span class="string">'org.apache.commons:commons-lang3:3.5'</span>)</div><div class="line">	compile(<span class="string">'commons-collections:commons-collections:3.2.2'</span>)</div><div class="line">	compile(<span class="string">'commons-codec:commons-codec:1.10'</span>)</div><div class="line">	compile(<span class="string">'com.github.pagehelper:pagehelper:4.1.6'</span>)</div><div class="line">	compile(<span class="string">'io.jsonwebtoken:jjwt:0.6.0'</span>)</div><div class="line">	runtime(<span class="string">'mysql:mysql-connector-java'</span>)</div><div class="line">	compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</div><div class="line">	testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面这个是类是产生token的主要类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/28 上午10:01.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> */</div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonWebTokenUtility</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SignatureAlgorithm signatureAlgorithm;</div><div class="line">    <span class="keyword">private</span> Key secretKey;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonWebTokenUtility</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 这里不是真正安全的实践</span></div><div class="line">        <span class="comment">// 为了简单，我们存储一个静态key在这里，</span></div><div class="line">        signatureAlgorithm = SignatureAlgorithm.HS512;</div><div class="line">        String encodedKey =</div><div class="line">                <span class="string">"L7A/6zARSkK1j7Vd5SDD9pSSqZlqF7mAhiOgRbgv9Smce6tf4cJnvKOjtKPxNNnWQj+2lQEScm3XIUjhW+YVZg=="</span>;</div><div class="line">        secretKey = deserializeKey(encodedKey);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createJsonWebToken</span><span class="params">(AuthTokenDetails authTokenDetails)</span> </span>&#123;</div><div class="line">        String token =</div><div class="line">                Jwts.builder().setSubject(authTokenDetails.getId().toString())</div><div class="line">                        .claim(<span class="string">"username"</span>, authTokenDetails.getUsername())</div><div class="line">                        .claim(<span class="string">"roleNames"</span>, authTokenDetails.getRoleNames())</div><div class="line">                        .setExpiration(authTokenDetails.getExpirationDate())</div><div class="line">                        .signWith(getSignatureAlgorithm(),</div><div class="line">                                getSecretKey()).compact();</div><div class="line">        <span class="keyword">return</span> token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">deserializeKey</span><span class="params">(String encodedKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] decodedKey = Base64.getDecoder().decode(encodedKey);</div><div class="line">        Key key =</div><div class="line">                <span class="keyword">new</span> SecretKeySpec(decodedKey, getSignatureAlgorithm().getJcaName());</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Key <span class="title">getSecretKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> secretKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SignatureAlgorithm <span class="title">getSignatureAlgorithm</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> signatureAlgorithm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthTokenDetails <span class="title">parseAndValidate</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">        AuthTokenDetails authTokenDetails = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Claims claims =</div><div class="line">                    Jwts.parser().setSigningKey(getSecretKey()).parseClaimsJws(token).getBody();</div><div class="line">            String userId = claims.getSubject();</div><div class="line">            String username = (String) claims.get(<span class="string">"username"</span>);</div><div class="line">            List&lt;String&gt; roleNames = (List) claims.get(<span class="string">"roleNames"</span>);</div><div class="line">            Date expirationDate = claims.getExpiration();</div><div class="line"></div><div class="line">            authTokenDetails = <span class="keyword">new</span> AuthTokenDetails();</div><div class="line">            authTokenDetails.setId(Long.valueOf(userId));</div><div class="line">            authTokenDetails.setUsername(username);</div><div class="line">            authTokenDetails.setRoleNames(roleNames);</div><div class="line">            authTokenDetails.setExpirationDate(expirationDate);</div><div class="line">        &#125; <span class="keyword">catch</span> (JwtException ex) &#123;</div><div class="line">            log.error(ex.getMessage(), ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> authTokenDetails;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">serializeKey</span><span class="params">(Key key)</span> </span>&#123;</div><div class="line">        String encodedKey =</div><div class="line">                Base64.getEncoder().encodeToString(key.getEncoded());</div><div class="line">        <span class="keyword">return</span> encodedKey;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们需要一个定制授权过滤器，将能读取请求头部信息，在Spring中已经有一个这样的授权Filter称为：RequestHeaderAuthenticationFilter，我们只要扩展继承即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonWebTokenAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">RequestHeaderAuthenticationFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonWebTokenAuthenticationFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Don't throw exceptions if the header is missing</span></div><div class="line">        <span class="keyword">this</span>.setExceptionIfHeaderMissing(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="comment">// This is the request header it will look for</span></div><div class="line">        <span class="keyword">this</span>.setPrincipalRequestHeader(<span class="string">"Authorization"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationManager</span><span class="params">(</span></span></div><div class="line">            AuthenticationManager authenticationManager) &#123;</div><div class="line">        <span class="keyword">super</span>.setAuthenticationManager(authenticationManager);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，头部信息将被转换为Spring Authentication对象，名称为PreAuthenticatedAuthenticationToken<br>我们需要一个授权提供者读取这个记号，然后验证它，然后转换为我们自己的定制授权对象，就是把header里的token转化成我们自己的授权对象。然后把解析之后的对象返回给Spring Security，这里就相当于完成了token-&gt;session的转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonWebTokenAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JsonWebTokenUtility tokenService = <span class="keyword">new</span> JsonWebTokenUtility();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">            <span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        Authentication authenticatedUser = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// Only process the PreAuthenticatedAuthenticationToken</span></div><div class="line">        <span class="keyword">if</span> (authentication.getClass().</div><div class="line">                isAssignableFrom(PreAuthenticatedAuthenticationToken.class)</div><div class="line">                &amp;&amp; authentication.getPrincipal() != <span class="keyword">null</span>) &#123;</div><div class="line">            String tokenHeader = (String) authentication.getPrincipal();</div><div class="line">            UserDetails userDetails = parseToken(tokenHeader);</div><div class="line">            <span class="keyword">if</span> (userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">                authenticatedUser =</div><div class="line">                        <span class="keyword">new</span> JsonWebTokenAuthentication(userDetails, tokenHeader);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// It is already a JsonWebTokenAuthentication</span></div><div class="line">            authenticatedUser = authentication;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> authenticatedUser;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> UserDetails <span class="title">parseToken</span><span class="params">(String tokenHeader)</span> </span>&#123;</div><div class="line"></div><div class="line">        UserDetails principal = <span class="keyword">null</span>;</div><div class="line">        AuthTokenDetails authTokenDetails =</div><div class="line">                tokenService.parseAndValidate(tokenHeader);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (authTokenDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            List&lt;GrantedAuthority&gt; authorities =</div><div class="line">                    authTokenDetails.getRoleNames().stream()</div><div class="line">                            .map(SimpleGrantedAuthority::<span class="keyword">new</span>).collect(Collectors.toList());</div><div class="line">            <span class="comment">// userId介入Spring Security</span></div><div class="line">            principal = <span class="keyword">new</span> User(authTokenDetails.getId().toString(), <span class="string">""</span>,</div><div class="line">                    authorities);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> principal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">                authentication.isAssignableFrom(</div><div class="line">                        PreAuthenticatedAuthenticationToken.class)||</div><div class="line">                        authentication.isAssignableFrom(</div><div class="line">                                JsonWebTokenAuthentication.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p>上面完成了JWT和Spring Boot的集成。<br>接下来我们再如何把自己的权限系统也接入Spring Security。<br>刚才已经展示了通过JsonWebTokenAuthenticationProvider的处理，我们已经能通过header的token来识别用户，并拿到他的角色和userId等信息。</p>
<p>配置Spring Security有3个不可缺的类。<br>首先配置拦截器，拦截所有的请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/28 上午11:32.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">Filter</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> FilterInvocationSecurityMetadataSource securityMetadataSource;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessDecisionManager</span><span class="params">(AccessDecisionManager accessDecisionManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setAccessDecisionManager(accessDecisionManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationManager</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setAuthenticationManager(authenticationManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</div><div class="line">        invoke(fi);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;? extends Object&gt; getSecureObjectClass() &#123;</div><div class="line">        <span class="keyword">return</span> FilterInvocation.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.securityMetadataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterconfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是把我们自己的权限数据加载到Spring Security中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/28 上午11:33.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 最核心的地方，就是提供某个资源对应的权限定义，即getAttributes方法返回的结果。</div><div class="line"> * 此类在初始化时，应该取到所有资源及其对应角色的定义。</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInvocationSecurityMetadataSourceService</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">FilterInvocationSecurityMetadataSource</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Collection&lt;ConfigAttribute&gt;&gt; resourceMap = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoInvocationSecurityMetadataSourceService</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadResourceDefine</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 应当是资源为key， 权限为value。 资源通常为url， 权限就是那些以ROLE_为前缀的角色。 一个资源可以由多个权限来访问。</div><div class="line">         * sparta</div><div class="line">         */</div><div class="line">        Role r = <span class="keyword">new</span> Role();</div><div class="line">        r.setId(<span class="number">0L</span>);</div><div class="line">        r.setName(<span class="string">"admin"</span>);</div><div class="line">        <span class="comment">// 假数据</span></div><div class="line">        List&lt;Role&gt; roles = Collections.singletonList(r); <span class="comment">// 替换为查询角色列表</span></div><div class="line">        resourceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</div><div class="line">            ConfigAttribute ca = <span class="keyword">new</span> SecurityConfig(role.getName());</div><div class="line"></div><div class="line">            Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            params.put(<span class="string">"roleId"</span>, role.getId());</div><div class="line">            <span class="comment">// 查询每个角色对于的权限,我这里假设直接查到了url</span></div><div class="line">            List&lt;String&gt; resources = Collections.singletonList(<span class="string">"/user/*"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (String url : resources) &#123;</div><div class="line"></div><div class="line">                <span class="comment">/*</span></div><div class="line">                 * 判断资源文件和权限的对应关系，如果已经存在相关的资源url，则要通过该url为key提取出权限集合，将权限增加到权限集合中。</div><div class="line">                 * sparta</div><div class="line">                 */</div><div class="line">                <span class="keyword">if</span> (resourceMap.containsKey(url)) &#123;</div><div class="line"></div><div class="line">                    Collection&lt;ConfigAttribute&gt; value = resourceMap.get(url);</div><div class="line">                    value.add(ca);</div><div class="line">                    resourceMap.put(url, value);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Collection&lt;ConfigAttribute&gt; atts = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    atts.add(ca);</div><div class="line">                    resourceMap.put(url, atts);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</div><div class="line">        loadResourceDefine();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据URL，找到相关的权限配置。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span></span></div><div class="line">            <span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line"></div><div class="line">        FilterInvocation filterInvocation = (FilterInvocation) object;</div><div class="line">        <span class="keyword">for</span> (String url : resourceMap.keySet()) &#123;</div><div class="line">            RequestMatcher requestMatcher = <span class="keyword">new</span> AntPathRequestMatcher(url);</div><div class="line">            HttpServletRequest httpRequest = filterInvocation.getHttpRequest();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (requestMatcher.matches(httpRequest)) &#123;</div><div class="line">                <span class="keyword">return</span> resourceMap.get(url);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; arg0)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们拿到了用户的角色，也拿到了系统里有的角色和权限，就需要判断他是否有这个权限了，配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/28 下午12:19.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * AccessdecisionManager在Spring security中是很重要的。</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 在验证部分简略提过了，所有的Authentication实现需要保存在一个GrantedAuthority对象数组中。</div><div class="line"> * 这就是赋予给主体的权限。 GrantedAuthority对象通过AuthenticationManager</div><div class="line"> * 保存到 Authentication对象里，然后从AccessDecisionManager读出来，进行授权判断。</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Spring Security提供了一些拦截器，来控制对安全对象的访问权限，例如方法调用或web请求。</div><div class="line"> * 一个是否允许执行调用的预调用决定，是由AccessDecisionManager实现的。</div><div class="line"> * 这个 AccessDecisionManager 被AbstractSecurityInterceptor调用，</div><div class="line"> * 它用来作最终访问控制的决定。 这个AccessDecisionManager接口包含三个方法：</div><div class="line"> * &lt;p&gt;</div><div class="line"> * void decide(Authentication authentication, Object secureObject,</div><div class="line"> * List&lt;ConfigAttributeDefinition&gt; config) throws AccessDeniedException;</div><div class="line"> * boolean supports(ConfigAttribute attribute);</div><div class="line"> * boolean supports(Class clazz);</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 从第一个方法可以看出来，AccessDecisionManager使用方法参数传递所有信息，这好像在认证评估时进行决定。</div><div class="line"> * 特别是，在真实的安全方法期望调用的时候，传递安全Object启用那些参数。</div><div class="line"> * 比如，让我们假设安全对象是一个MethodInvocation。</div><div class="line"> * 很容易为任何Customer参数查询MethodInvocation，</div><div class="line"> * 然后在AccessDecisionManager里实现一些有序的安全逻辑，来确认主体是否允许在那个客户上操作。</div><div class="line"> * 如果访问被拒绝，实现将抛出一个AccessDeniedException异常。</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 这个 supports(ConfigAttribute) 方法在启动的时候被</div><div class="line"> * AbstractSecurityInterceptor调用，来决定AccessDecisionManager</div><div class="line"> * 是否可以执行传递ConfigAttribute。</div><div class="line"> * supports(Class)方法被安全拦截器实现调用，</div><div class="line"> * 包含安全拦截器将显示的AccessDecisionManager支持安全对象的类型。</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object,</span></span></div><div class="line">                       Collection&lt;ConfigAttribute&gt; configAttributes)</div><div class="line">            <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (configAttributes == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (ConfigAttribute ca : configAttributes) &#123;</div><div class="line"></div><div class="line">            String needRole = ca.getAttribute();</div><div class="line"></div><div class="line">            <span class="comment">//ga 为用户所被赋予的权限。 needRole 为访问相应的资源应该具有的权限。</span></div><div class="line">            <span class="keyword">for</span> (GrantedAuthority ga : authentication.getAuthorities()) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (needRole.trim().equals(ga.getAuthority().trim())) &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"没有权限进行操作！"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们试试登录的接口：<br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/login.png" alt=""></p>
<p>然后我们用这个token来调用另外一个接口。<br>我们先试试不传Token会返回什么</p>
<p><img src="http://7xs4nh.com1.z0.glb.clouddn.com/spring-boot-jwt-user-0.png" alt=""></p>
<p>判断没有登录，现在再来试试带上token的请求。<br>已经成功的请求到了数据。<br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/spring-boot-jwt-1.png" alt=""></p>
<p>好了，核心配置就是这些，我把这些代码上传github上，有需要的可以下载下来看看。里面的角色和权限都是虚拟数据，应用还需要自行修改代码。<br><a href="https://github.com/sail-y/spring-boot-jwt" target="_blank" rel="external">https://github.com/sail-y/spring-boot-jwt</a></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程5-基础构建模块]]></title>
      <url>/2016/12/08/concurrency5/</url>
      <content type="html"><![CDATA[<h1 id="基础构建模块"><a href="#基础构建模块" class="headerlink" title="基础构建模块"></a>基础构建模块</h1><p>第4章介绍了构造线程安全类时采用的一些技术，例如将线程安全性委托给现有的线程安全类。委托是创建线程安全类的一个最有效的策略：只需让现有的线程安全类管理所有的状态即可。<br>下面将介绍一些JDK提供的工具类。</p>
<h2 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h2><p>同步容器类包括Vector和Hashtable。这些类实现线程安全的方式是：将它们的状态封装起来，并对每个共有方法都进行同步，使得每次只有一个线程能访问容器的状态。</p>
<h3 id="同步容器类的问题"><a href="#同步容器类的问题" class="headerlink" title="同步容器类的问题"></a>同步容器类的问题</h3><p>同步容器类都是线程安全的，但在某些情况下需要加锁来保护复合操作。例如2个线程都在进行「若没有，则添加」的运算，如果没有对这个复合操作加锁，就可能会出问题。<br><a id="more"></a></p>
<h3 id="迭代器与ConcurrentModificationException"><a href="#迭代器与ConcurrentModificationException" class="headerlink" title="迭代器与ConcurrentModificationException"></a>迭代器与ConcurrentModificationException</h3><p>无论是迭代还是foreach循环，当它们发现容器在迭代过程中被修改时，就会抛出ConcurrentModificationException异常。<br>如果不希望在迭代期间对容器加锁，有一种替代方法就是「克隆」容器，并在副本中进行迭代。</p>
<h3 id="隐藏迭代器"><a href="#隐藏迭代器" class="headerlink" title="隐藏迭代器"></a>隐藏迭代器</h3><p>虽然加锁可以防止迭代器抛出ConcurrentModificationException，但是必须在所有对共享容器进行迭代的地方都需要加锁。还有一个很隐蔽的迭代器，就是没有显式的迭代器，但是实际上也执行了迭代操作，那就是编译器会将字符串的连接操作转化为StringBuilder.append，而这个方法会调用容器的toString方法，标准容器的toString方法会迭代容器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">System.out.println(set);</div></pre></td></tr></table></figure></p>
<p>如果在输出期间对容器进行了修改，就会抛出异常。</p>
<h2 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h2><p>JDK5提供了多种并发容器类来改进同步容器的性能。因为同步容器对所有容器状态的访问都串行化，降低了并发性，性能不太好。<br>通过并发容器来代替同步容器，可以极大的提高伸缩性并降低防线。例如ConcurentHashMap和CopyOnWriteArrayList。<br>BlockingQueue提供可阻塞的插入和获取操作。如果队列为空，那么获取元素的操作将一直阻塞，直到队列中出现一个可用的元素。如果队列已满，那么插入元素的操作将一直阻塞，直到队列中出现可用的空间。</p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>同步容器类在执行每个操作期间都持有一个锁，HashMap的键值对是通过单向链表来实现的，当遍历很长的链表并且在某些或者全部元素上调用equals方法时，会耗费很长时间，而其他线程在这段时间内都不能访问该容器。<br>ConcurrentHashMap与HashMap一样也是一个基于散列的Map，它使用了一种<strong>分段锁</strong>的机制来实现更大程度的共享，而不是将每个方法都进行同步。这样执行写入操作的线程可以并发地访问Map。它提供的迭代器也不会抛出ConcurrentModificationException，因此不需要在迭代的时候加锁。</p>
<p>ConcurrentHashMap将一些常见的复合操作实现为了原子操作，例如putIfAbsent,remove,replace等。</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>CopyOnWriteArrayList用于替代同步List，在某些情况下它提供了更好的并发性能，并且在迭代期间不需要对容器进行加锁或复制。<br>CopyOnWriteArrayList底层用基础数组实现，不会被修改，可以随意并发的访问。不过显然每当修改容器的时候会复制底层数组，这会造成一定的开销。仅当迭代操作远远多余修改操作时，才应该使用这个容器。<br>这个容器适用于许多事件通知系统：分发通知时迭代监听器，并调用。而注册或者注销监听器的操作则较少。</p>
<h2 id="阻塞队列和生产者-消费者模式"><a href="#阻塞队列和生产者-消费者模式" class="headerlink" title="阻塞队列和生产者-消费者模式"></a>阻塞队列和生产者-消费者模式</h2><p>刚才提到BlockingQueue提供可阻塞的put和take操作。阻塞队列支持生产者-消费者这种设计模式。该模式将「找出需要完成的工作」与「执行工作」这两个过程分离开来，并把工作放入一个「待完成」的列表以便在随后处理。在基于阻塞队列构建的生产者-消费者设计中，当数据生成时，生产者把数据放入队列，而当消费者准备处理数据时，将从队列中获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> BlockingQueue&lt;String&gt; bq = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">10</span>);</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        executorService.execute(() -&gt; &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"produce "</span> + i++);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    bq.put(i + <span class="string">""</span>);</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        executorService.execute(() -&gt; &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String take = bq.take();</div><div class="line">                    System.out.println(<span class="string">"take "</span> + take);</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但需要注意的是我们应该用有界队列，因此如果消费者处理速度较慢，队列可能会将耗尽内存。在构建高可靠的应用程序时，有界队列是一种强大的资源管理工具：它们能抑制并防止产生过多的工作项，使应用程序在负荷过载的情况秀爱变得更加健壮。</p>
<h3 id="串行线程封闭"><a href="#串行线程封闭" class="headerlink" title="串行线程封闭"></a>串行线程封闭</h3><p>对于可变对象，生产者-消费者这种设计与阻塞队列一起，促进了串行线程封闭，从而将对象所有权从生产者缴费给消费者。线程封闭对象只能由单个线程拥有，但可以通过安全地发布该对象来「转移」所有权。</p>
<h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><p>JDK6还增加了两种容器类型，Deque和BlockingDeque。Deque是一个双端队列，实现了在队列头和队列尾的高效插入和移除。具体实现包括ArrayDeque和LinkedBlockingDeque。</p>
<h2 id="阻塞方法与中断方法"><a href="#阻塞方法与中断方法" class="headerlink" title="阻塞方法与中断方法"></a>阻塞方法与中断方法</h2><p>线程可能会阻塞或者暂停执行，等待I/O操作，等待锁等。简单举例就是Thread.sleep()。<br>当某方法会抛出InterruptedException时，表示该方法是一个阻塞方法，如果这个方法被中断，那么它将努力提前结束阻塞状态。<br>Thread提供了interrupt方法，用于中断线程或者查询线程是否已经被中断。每个线程都有一个布尔类型的属性，表示线程的中断状态，当中断线程时将设置这个值。<br>我们看源码就知道，interrupt()只是将interrupt的标记设置一下而已，interrupt0()是一个native方法。具体什么时候中断，JDK并不保证。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread())</div><div class="line">            checkAccess();</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (blockerLock) &#123;</div><div class="line">            Interruptible b = blocker;</div><div class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</div><div class="line">                interrupt0();           <span class="comment">// Just to set the interrupt flag</span></div><div class="line">                b.interrupt(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        interrupt0();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/26 下午4:17.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 中断机制是一种协作机制，也就是说通过中断并不能直接终止另一个线程，而需要被中断的线程自己处理。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        executorService.execute(() -&gt; &#123;</div><div class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class="line">                System.out.println(<span class="string">"running"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        executorService.shutdownNow();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="同步工具类"><a href="#同步工具类" class="headerlink" title="同步工具类"></a>同步工具类</h2><p>下面介绍一些并发包的同步工具类，它们封装了一些状态，这些状态将决定执行同步工具类的线程是继续执行还是等待，此外还提供了一些方法对状态进行操作，以及另一些方法用于高效地等待同步工具类进入到预期状态，这些类有CountDownLatch、Semaphore和Barrier等。</p>
<h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>Latch可以延迟线程的进度直到其到达终止状态。它的作用相当于一扇门：在条件达到之前，这扇门是关闭着的，并没有任何线程能通过，直到条件到达结束状态时，这扇门打开并允许所有线程通过。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/26 下午5:10.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * CountDownLatch主要提供的机制是当多个（具体数量等于初始化CountDownLatch时count参数的值）线程都达到了预期状态或完成预期工作时触发事件，</div><div class="line"> * 其他线程可以等待这个事件来触发自己的后续工作。值得注意的是，CountDownLatch是可以唤醒多个等待的线程的。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sleepSecond;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WorkThread</span><span class="params">(String name, CountDownLatch countDownLatch, <span class="keyword">int</span> sleepSecond)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">            <span class="keyword">this</span>.sleepSecond = sleepSecond;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" start: "</span> + LocalDateTime.now());</div><div class="line">                TimeUnit.SECONDS.sleep(sleepSecond);</div><div class="line">                countDownLatch.countDown();</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" end: "</span> + LocalDateTime.now());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DoneThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoneThread</span><span class="params">(String name, CountDownLatch countDownLatch)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" await start:"</span> + LocalDateTime.now());</div><div class="line">                countDownLatch.await();</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" await end:"</span> + LocalDateTime.now());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// CountDownLatch指定3次调用，无论前面有多少线程await，都需要等待CountDownLatch调用3次countDown()统一唤醒</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</div><div class="line">        DoneThread d0 = <span class="keyword">new</span> DoneThread(<span class="string">"DoneThread1"</span>, countDownLatch);</div><div class="line">        DoneThread d1 = <span class="keyword">new</span> DoneThread(<span class="string">"DoneThread2"</span>, countDownLatch);</div><div class="line">        d0.start();</div><div class="line">        d1.start();</div><div class="line"></div><div class="line">        WorkThread w0 = <span class="keyword">new</span> WorkThread(<span class="string">"WorkThread0"</span>, countDownLatch, <span class="number">2</span>);</div><div class="line">        WorkThread w1 = <span class="keyword">new</span> WorkThread(<span class="string">"WorkThread1"</span>, countDownLatch, <span class="number">3</span>);</div><div class="line">        WorkThread w2 = <span class="keyword">new</span> WorkThread(<span class="string">"WorkThread2"</span>, countDownLatch, <span class="number">4</span>);</div><div class="line">        w0.start();</div><div class="line">        w1.start();</div><div class="line">        w2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><p>FutureTask可以获得线程返回的结果，get方法取决于线程的状态，如果已经完成会直接返回，否则会一直阻塞直到任务执行完成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/26 下午5:54.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"call()"</span>);</div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">1500</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"123"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        Future future = executorService.submit(<span class="keyword">new</span> CallableThread());</div><div class="line">        executorService.shutdown();</div><div class="line"></div><div class="line">        System.out.println(future.get());</div><div class="line"><span class="comment">//        while (!future.isDone()) &#123;</span></div><div class="line"><span class="comment">//            System.out.println(future.get());</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>Semaphore用来控制同时访问某个特定资源的操作数量，或者同事执行某个指定操作的数量。Semaphore还可以用来实现某种资源池，或者对容器施加边界。<br>Semaphore管理着一组虚拟的许可，许可的初始数量可通过构造函数来指定，在执行操作时可以先获得许可，并在使用后释放许可。如果没有许可，那么acquire()将阻塞直到有许可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/26 下午5:23.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</div><div class="line"></div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            executorService.execute(() -&gt; &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    semaphore.acquire();</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" acquire: "</span> + LocalDateTime.now());</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                    semaphore.release();</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" release: "</span> + LocalDateTime.now());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>CountDownLatch是一次性对象，一旦结束进入终止状态，就不能被重置。CyclicBarrier能阻塞一组线程直到某个事件发生。CyclicBarrier和CountDownLatch的关键区别在于，所有线程必须同时达到CyclicBarrier的条件，才能继续执行。CountDownLatch是等待某个条件或者事件，CyclicBarrier是等待其他线程。例如CountDownLatch是指6点一到大家就可以下班了，而CyclicBarrier是要等大家到齐了才能开会。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/26 下午5:43.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * CyclicBarrier从字面理解是指循环屏障，它可以协同多个线程，让多个线程在这个屏障前等待，直到所有线程都达到了这个屏障时，再一起继续执行后面的动作。</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sleepSecond;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrierThread</span><span class="params">(CyclicBarrier cyclicBarrier, <span class="keyword">int</span> sleepSecond)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">        <span class="keyword">this</span>.sleepSecond = sleepSecond;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" running"</span>);</div><div class="line">            TimeUnit.SECONDS.sleep(sleepSecond);</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" waiting "</span> + LocalDateTime.now());</div><div class="line">            cyclicBarrier.await();</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" end wait "</span> + LocalDateTime.now());</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">CountDownLatch和CyclicBarrier都是用于多个线程间的协调的，它们二者的几个差别是：</div><div class="line"></div><div class="line">1、CountDownLatch是在多个线程都进行了latch.countDown()后才会触发事件，唤醒await()在latch上的线程，而执行countDown()的线程，</div><div class="line">执行完countDown()后会继续自己线程的工作；CyclicBarrier是一个栅栏，用于同步所有调用await()方法的线程，并且等所有线程都到了await()方法时，这些线程才一起返回继续各自的工作</div><div class="line"></div><div class="line">2、另外CountDownLatch和CyclicBarrier的一个差别是，CountDownLatch不能循环使用，计数器减为0就减为0了，不能被重置，CyclicBarrier可以循环使用</div><div class="line"></div><div class="line">3、CountDownLatch可以唤起多条线程的任务，CyclicBarrier只能唤起一条线程的任务</div><div class="line"></div><div class="line">注意，因为使用CyclicBarrier的线程都会阻塞在await方法上，所以在线程池中使用CyclicBarrier时要特别小心，如果线程池的线程过少，那么就会发生死锁了</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Runnable command = () -&gt; System.out.println(<span class="string">"I'm coming"</span>);</div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, command);</div><div class="line">        CyclicBarrierThread t1 = <span class="keyword">new</span> CyclicBarrierThread(cyclicBarrier, <span class="number">2</span>);</div><div class="line">        CyclicBarrierThread t0 = <span class="keyword">new</span> CyclicBarrierThread(cyclicBarrier, <span class="number">2</span>);</div><div class="line">        CyclicBarrierThread t2 = <span class="keyword">new</span> CyclicBarrierThread(cyclicBarrier, <span class="number">1</span>);</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        executorService.execute(t1);</div><div class="line">        executorService.execute(t0);</div><div class="line">        executorService.execute(t2);</div><div class="line">        executorService.shutdown();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>可变状态是至关重要的<br>  所有的并发问题都可以归结为如何协调对并发状态的访问。可变状态越少，就越容易保证线程安全性</li>
<li>尽量将域声明为final类型，除非需要它们是可变的。</li>
<li>不可变对象一定是线程安全的<br>  不可变对象能极大地降低并发编程的复杂性。它们更简单而且安全，可以任意共享而无须使用加锁或保护性复制等机制。</li>
<li>封装有助于管理复杂性。<br>  在编写线程安全的程序时，虽然可以将所有数据都保存在全局变量中，但为什么要这样做？将数据封装在对象中，更易于维持不变性条件：将同步机制封装在对象中，更易于遵循同步策略。</li>
<li>用锁来保护每个可变变量。</li>
<li>当保护同一个不变性中的所有变量时，要使用同一个锁。</li>
<li>在执行复合操作期间，要持有锁。</li>
<li>如果从多个线程中访问同一个可变变量时没有同步机制，那么程序就会出现问题。</li>
<li>不要故作聪明地推断出不需要使用同步。</li>
<li>在设计过程中考虑线程安全，或者在文档中明确地指出它不是线程安全的。</li>
<li>将同步策略文档化。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程4-对象的组合]]></title>
      <url>/2016/12/06/concurrency4/</url>
      <content type="html"><![CDATA[<h1 id="对象的组合"><a href="#对象的组合" class="headerlink" title="对象的组合"></a>对象的组合</h1><p>本章将介绍一些组合模式，这些模式能够使一个类更容易成为线程安全的，并且在维护这些类时不会无意中破坏类的安全性保证。</p>
<h2 id="设计线程安全的类"><a href="#设计线程安全的类" class="headerlink" title="设计线程安全的类"></a>设计线程安全的类</h2><p>在设计线程安全类的过程中，需要包含以下三个基本要素：</p>
<ul>
<li>找出构成对象状态的所以变量</li>
<li>找出约束状态变量的不变性条件</li>
<li>建立对象状态的并发访问管理策略</li>
</ul>
<h3 id="收集同步需求"><a href="#收集同步需求" class="headerlink" title="收集同步需求"></a>收集同步需求</h3><p>要确保的类的线程安全性，就需要确保它的不变性条件不会在并发访问的情况下被破坏，这就需要对其状态进行推断。<br><a id="more"></a><br>不变性条件是指变量的取值范围约束，后验条件是指状态改变的时候值是否合法。<br>如果不了解对象的不变性条件与后验条件，那么就不能确保线程安全性。要满足在状态变量的有效值或状态转换上的各种约束条件，就需要借助于原子性与封装性。</p>
<h3 id="依赖状态的操作"><a href="#依赖状态的操作" class="headerlink" title="依赖状态的操作"></a>依赖状态的操作</h3><p>先验条件是基于前一个状态的操作，例如不能从空队列中移除一个元素，这个被称为依赖状态的操作。<br>在单线程程序中，如果某个操作无法满足先验条件，那么就只能失败。但在并发程序中先验条件可能会由于其他线程执行的操作而变成真。在并发程序中要一只等到先验条件威震，然后再执行操作。后面将会介绍JDK提供的BlockingQueue和Semaphore等同步工具类来实现依赖状态的行为。</p>
<h3 id="状态的所有权"><a href="#状态的所有权" class="headerlink" title="状态的所有权"></a>状态的所有权</h3><p>许多情况下，所有权与封装性总是相互关联的：对象封装它拥有的状态，反之也城里，即对它封装的状态拥有所有权。</p>
<h2 id="实例封闭"><a href="#实例封闭" class="headerlink" title="实例封闭"></a>实例封闭</h2><p>如果某对象不是线程安全的，那么可以通过多种技术使其在多线程程序中安全地使用。你可以确保该对象只能由单个线程访问（线程封闭），或者通过一个锁来保护该对象的所有访问。<br>将数据封装在对象内部，可以将数据的访问限制在对象的方法上，从而更容易确保线程在访问数据时总能持有正确的锁。<br>封闭机制更易于构造线程安全的类，因为当封闭类的状态时，在分析类的线程安全性时就无须检查整个程序。</p>
<h3 id="Java监视器模式"><a href="#Java监视器模式" class="headerlink" title="Java监视器模式"></a>Java监视器模式</h3><p>从线程封闭原则及其逻辑推论可以得出Java监视器模式。遵循Java监视器模式的对象会把对象的所有可变状态都封装起来，并由对象自己的内置锁来保护。意思就是对象的属性全部通过同步的方法来访问或者修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateLock</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object myLock = <span class="keyword">new</span> Object();</div><div class="line">	Widget widget;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span>(myLock) &#123;</div><div class="line">			<span class="comment">// 访问或修改Widget的状态</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用私有的锁对象而不是对象的内置锁，有许多优点。私有锁对象可以将锁封装起来，使客户代码无法得到锁，但客户代码可以通过共有方法来访问锁，以便参与到它的同步策略中。</p>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程3-对象的共享]]></title>
      <url>/2016/12/05/concurrency3/</url>
      <content type="html"><![CDATA[<h1 id="对象的共享"><a href="#对象的共享" class="headerlink" title="对象的共享"></a>对象的共享</h1><p>要编写正确的并发程序，管关键问题在于：在访问共享的可变状态时需要进行正确的管理。本章介绍如何共享和发布对象，从而使它们能够安全地由多个线程同时访问。</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>「可见性」是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量做不到这一点，普通变量的值在线程间传递均需要通过主内存来完成，例如线程A修改一个普通变量的值，然后向主内存进行回写，另外一条线程B在线程A回写完成了之后再从主内存进行读取操作，新变量值才会对线程B可见。<br><a id="more"></a><br>Java内存模型的有序性可以总结为一句话，如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指「线程内表现为串行的语义」，后半句是指「指令重排序」现象和「工作内存与主内存同步延迟」现象。<br>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由”一个变量在同一时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则规定了持有同一个锁的两个同步块只能串行地进入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoVisibility</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ready;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">while</span> (!ready) </div><div class="line">				Thread.yield();</div><div class="line">			System.out.println(number);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> ReaderThread().start();</div><div class="line">		number = <span class="number">42</span>;</div><div class="line">		ready = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子可能是一个死循环，因为ReaderThread线程可能永远看不到ready的值变化（可见性问题）。还有另外一种情况就是输出了0，因为指令重排序优化的原因，<code>ready = true</code>可能会先于<code>number=42</code>执行。</p>
<blockquote>
<p>指令重排序优化是指为了使得处理内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行优化，处理器会再计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，因此如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。</p>
</blockquote>
<h3 id="失效数据"><a href="#失效数据" class="headerlink" title="失效数据"></a>失效数据</h3><p><code>NoVisibility</code>展示了在缺乏同步的程序中可能产生错误结果中的一种情况：失效数据。除非在每次访问变量的时候使用同步。</p>
<h3 id="非原子的64位操作"><a href="#非原子的64位操作" class="headerlink" title="非原子的64位操作"></a>非原子的64位操作</h3><p>因为double和long是64位数据，内存模型允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32为的操作来进行。<br>如果有多个线程共享一个并未声明为volatile的long或double类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读取到一个既非原值，也不是其他线程修改的值代表了「半个变量」的数值。不过这很罕见，因为目前的商用虚拟机几乎都还是选择把64位数据的读写作为原子操作来对待，所以我们写代码一般也不需要对long和double变量专门声明为volatile。</p>
<h3 id="加锁与可见性"><a href="#加锁与可见性" class="headerlink" title="加锁与可见性"></a>加锁与可见性</h3><p><strong>synchronized和final</strong>关键字能实现可见性，synchronized的可见性是由「对一个变量执行unlock操作之前，必须先把此变量同步回主内存中」这条规则获得的。另外，final关键字也可以实现可见性，因为被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this传递出去，那在其他线程中就能看见final字段的值。</p>
<blockquote>
<p>加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。</p>
</blockquote>
<h3 id="Volatile变量"><a href="#Volatile变量" class="headerlink" title="Volatile变量"></a>Volatile变量</h3><p>Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程时操作变量的可见性，而普通变量则不能保证这一点。<br>volatile变量通常用做某个操作完成、发生中断或者状态的标志。</p>
<blockquote>
<p>注意：加锁机制即可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。</p>
</blockquote>
<p>当且仅当满足以下所有条件时，才应该使用volatile变量：</p>
<ul>
<li>对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。</li>
<li>该变量不会与其他状态变量一起纳入不变性条件中</li>
<li>这种访问变量时不需要加锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/25 上午10:37.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VThread_0</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (VolatileTest.isRunning) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VThread_1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        VolatileTest.isRunning = <span class="keyword">false</span>;</div><div class="line">        System.out.println(<span class="string">"stop running"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">       这个不是必现，得多试几次</div><div class="line">       stop running 后死循环</div><div class="line">       在第二个线程更改后，第一个线程并没有马上停止，原因从Java内存模型（JMM）说起。</div><div class="line">       根据JMM，Java中有一块主内存，不同的线程有自己的工作内存，同一个变量值在主内存中有一份，如果线程用到了这个变量的话，自己的工作内存中有一份一模一样的拷贝。</div><div class="line">       每次进入线程从主内存中拿到变量值，每次执行完线程将变量从工作内存同步回主内存中。</div><div class="line">       出现打印结果现象的原因就是主内存和工作内存中数据的不同步造成的。</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">// 线程安全围绕的是可见性和原子性这两个特性展开的，volatile解决的是变量在多个线程之间的可见性，但是无法保证原子性。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        VThread_0 vThread_0 = <span class="keyword">new</span> VThread_0();</div><div class="line">        VThread_1 vThread_1 = <span class="keyword">new</span> VThread_1();</div><div class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line">        executorService.execute(vThread_0);</div><div class="line">        executorService.execute(vThread_1);</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="发布与逸出"><a href="#发布与逸出" class="headerlink" title="发布与逸出"></a>发布与逸出</h2><p>「发布」的意思是使对象能够在当前作用于之外的代码中使用，当某个不应该发布的对象被发布时，这种情况就被称为「逸出」。        </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Set&lt;Secret&gt; knownSecrets;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</div><div class="line">	knownSecrets = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Secret&gt; <span class="title">getKnownSecrets</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> knownSecrets;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码发布了HashSet对象，但是却导致knownSecrets里的Secret逸出了，因为任何调用者都能修改knownSecrets里的值。</p>
<h2 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h2><p>当访问共享的可变数据时，通常需要使用同步，一种避免使用同步的方式就是不共享数据，如果仅在单线程内访问数据时，就不需要同步，这种技术被称为线程封闭。Java提供了ThreadLocal类来帮助维持线程封闭性。</p>
<h2 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h2><p>不可变对象一定是线程安全的，当满足以下条件时，对象才是不可变的：</p>
<ul>
<li>对象创建以后其状态就不能修改。</li>
<li>对象的所有域都是final类型。</li>
<li>对象是正确创建的（在对象的创建期间，this对象没有逸出）</li>
</ul>
<h2 id="安全发布的常用模式"><a href="#安全发布的常用模式" class="headerlink" title="安全发布的常用模式"></a>安全发布的常用模式</h2><p>要安全的地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见。一个正确构造的对象可以通过一下方式来安全地发布：</p>
<ul>
<li>在静态初始化函数中初始化一个对象引用。</li>
<li>将对象的引用保存到volatile类型的域或者AtomicReferance对象中。</li>
<li>将对象的引用保存到某个正确构造对象的final类型域中。</li>
<li>将对象的引用保存到一个由锁保护的域中。</li>
</ul>
<p>如果对象从技术上来看是可变的，但其状态在发布后不会在再改变，那么把这种对象称为「<strong>事实不可变对象</strong>」，在没有额外的同步情况下，任何线程都可以安全地使用被安全发布的事实不可变对象。</p>
<p>对象的发布需求取决于它的可变性：</p>
<ul>
<li>不可变对象可以通过任意机制来发布。</li>
<li>事实不可变对象必须通过安全方式来发布。</li>
<li>可变对象必须通过安全方式来发布，并且必须是线程安全的或者由某个锁保护起来。</li>
</ul>
<p>在并发程序中使用和共享对象时，可以使用一些实用的策略，包括：</p>
<ul>
<li><strong>线程封闭</strong>：线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。</li>
<li><strong>只读共享</strong>：在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。</li>
<li><strong>线程安全共享</strong>：线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。</li>
<li><strong>保护对象</strong>：被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程2-线程安全性]]></title>
      <url>/2016/12/02/concurrency2/</url>
      <content type="html"><![CDATA[<h1 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h1><p>在构建文件的并发程序时，必须正确地使用线程和锁，但这些终归只是一些机制。要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享的和可变的状态的访问。一个对象是否是线程安全的，取决于它是否被多个线程同事访问。当多个线程访问某个状态变量并且其中有一个线程执行写入操作时，必须采用同步机制来协同这些线程对变量的访问。Java中的主要同步机制是关键字synchronized，它提供了一种独占的枷锁方式，但「同步」这个术语还包括volatile类型的变量，显式锁以及原子变量。<br>如果当多个线程访问同一个可变的状态变量时没有使用合适的同步，那么程序就会初夏你错误。有三种方式可以修复这个问题：</p>
<ul>
<li>不在线程之间共享该状态变量        </li>
<li>将状态变量改为不可变的变量        </li>
<li>在访问状态变量时使用同步</li>
</ul>
<h2 id="什么是线程安全性"><a href="#什么是线程安全性" class="headerlink" title="什么是线程安全性"></a>什么是线程安全性</h2><p>当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。在线程安全类中封装了必要的同步机制，因此客户端无须进一步采取同步措施。<br>无状态对象一定是线程安全的。（没有共享数据）<br><a id="more"></a></p>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>像count++这种是属于非原子操作，它包含了三个独立的操作：读取count的值，将值+1，然后将计算结果写入count。所以不同线程在自增的时候，这个值在第一步拿到的可能是过期的数据。<br>在并发编程中，这种由于不恰当的执行时序出现不正确的结果是一种非常重要的情况，它有一个正式的名字：竞态条件。</p>
<h3 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h3><p>当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。最常见的竞态条件就是「先检查后执行」，通过一个可能失效的观测结果来决定下一步的动作。</p>
<h3 id="复合操作"><a href="#复合操作" class="headerlink" title="复合操作"></a>复合操作</h3><p>要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中。</p>
<p>我们将<code>先检查后执行</code>和<code>读取-修改-写入</code>等操作统称为「复合操作」。我们要以原子方式执行确保线程安全性，Java通过加锁机制来确保原子性。<br>原子操作是指，对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作（不可分割的操作）。</p>
<h2 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h2><p>要保持状态的一致性，就需要在某个原子性操作中更新所有相关状态变量。</p>
<h3 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h3><p>Java提供了一种内置的锁机制来支持原子性：同步代码快。以关键字synchronized来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的所就是方法调用的所在对象。静态的synchronized方法以Class对象作为锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span> (lock) &#123;</div><div class="line"> <span class="comment">//访问或修改由锁保护的共享状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个Java对象都可以用做一个实现同步的锁，这些锁被称为内置锁或监视器锁。线程在进入同步代码之前会自动获得锁，并且在退出同步代码块时自动释放锁，而无论是通过正常的控制路径退出，还是通过代码块中抛出异常退出。获得内置锁的唯一途径就是进入由这个锁保护的同步代码块或方法。<br>Java的内置锁是互斥锁，意思是最多只有一个线程能持有这种锁，当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或阻塞，直到线程B释放这个锁。如果B永远不释放这个锁，那么A也将永远地等下去。<br>由于每次只能又一个线程执行内置锁保护的代码块，因此，由这个锁保护的同步代码块会以原子方式执行，多个线程在执行该代码块时也不会相互干扰。并发环境中的原子性与事务应用程序的原子性有着相同的含义–<strong>一组语句作为一个不可分割的单元被执行</strong>。任何一个执行同步代码块的线程，都不可能看到有其他线程正在执行由同一个锁保护的同步代码块。</p>
<h3 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h3><p>当某线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞。然而，由于内置锁是可重入的，因此如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。synchronized同步块对同一条线程来说是可重入的，不会出现把自己锁死的问题。</p>
<blockquote>
<p>synchronized关键字在经过编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。<br>根据虚拟机规范的要求，在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止。</p>
</blockquote>
<h2 id="用锁来保护状态"><a href="#用锁来保护状态" class="headerlink" title="用锁来保护状态"></a>用锁来保护状态</h2><p>由于锁能使其保护的代码路径以串行形式来访问，因此可以通过锁来构造一些协议以实现对共享状态的独占访问。对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。并非所有数据都需要锁的保护，只有被多个线程同时访问的可变数据才需要通过锁来保护。虽然synchronized方法可以确保单个操作的原子性，但如果把多个操作合并为一个复合操作，还是需要额外的加锁机制。</p>
<h2 id="活跃性与性能"><a href="#活跃性与性能" class="headerlink" title="活跃性与性能"></a>活跃性与性能</h2><p>一般来讲，对整个方法进行同步，每次只有一个线程可以执行，可能会导致性能糟糕。因此我们通常在只需要同步的地方用同步代码块，只对代码块中的共享状态变量进行加锁保护。我们要找到简单性（对整个方法进行同步）与并发性（对尽可能短的代码进行同步）之间的平衡。</p>
<p>通常，在简单行与性能之间存在着相互制约因素。当实现某个同步策略时，已定不要盲目地为了性能而牺牲简单行（这可能会破坏安全性）。</p>
<p>当执行时间较长的计算或者可能无法快速完成的操作时（例如：网络I/O或控制台I/O），一定不要持有锁。</p>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程1-介绍]]></title>
      <url>/2016/12/01/concurrency1/</url>
      <content type="html"><![CDATA[<p>在看完了《深入理解Java虚拟机》之后，继续看《Java并发编程实战一书》。<br>相信在了解虚拟机之后，再来看并发相关知识，能理解得更透彻，书中也讲到，对Java内存模型理解得越深入，就对并发编程掌握得越好。顺道说一下，关于JDK里线程和并发相关类的使用，我主要是通过《Think in Java》学习的，这里就不再介绍基本使用方法了。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>线程也被称为轻量级进程（这一部分在《深入理解Java虚拟机》中提到过，<a href="http://sail-y.github.io/2016/11/25/JVM11/#线程的实现" target="_blank" rel="external">点击查看</a>）。在大多数现代操作系统中， 都是以线程为基本的调度单位，而不是进程。</p>
<h2 id="线程的优势"><a href="#线程的优势" class="headerlink" title="线程的优势"></a>线程的优势</h2><p>要想充分发挥多处理器系统的强大计算能力，线程可以有效的降低程序的开发和维护成本，同时提升复杂应用程序的性能。<br><a id="more"></a></p>
<h3 id="发挥多处理器的强大能力"><a href="#发挥多处理器的强大能力" class="headerlink" title="发挥多处理器的强大能力"></a>发挥多处理器的强大能力</h3><p>现在，多处理系统日益普及，个人PC基本上也都是多个处理器了。由于基本的调度单位是线程，因此如果程序中只有一个线程，那么最多只能在一个处理器上运行。在双处理器系统上，单线程的程序只能使用一半的CPU资源，而在拥有100个处理器的系统上将有99%的资源无法使用。多线程程序可以同时在多个处理器上执行，如果设计正确，多线程程序可以通过提高处理器资源的利用率来提升系统吞吐率。</p>
<h3 id="建模的简单性"><a href="#建模的简单性" class="headerlink" title="建模的简单性"></a>建模的简单性</h3><p>通过使用线程，可以将复杂并且异步的工作流进一步分解为一组简单并且同步的工作流，每个工作流在一个单独的线程中运行，并在特定的同步位置进行交互。例如Servlet，框架负责解决请求管理、线程创建、负载平衡等细节，在正确的时刻将请求分发给正确的应用组建。我们开发的时候的就像在开发单线程程序一样，可以简化组件的开发。</p>
<h3 id="异步事件的简化处理"><a href="#异步事件的简化处理" class="headerlink" title="异步事件的简化处理"></a>异步事件的简化处理</h3><p>服务器应用程序在接受来自多个远程客户端的请求时，如果为每个连接都分配其各自的线程并且使用同步I/O，那么就会降低这类程序的开发难度。如果某个应用程序请求数据花费时间较长或者阻塞了，在单线程应用程序在阻塞期间所有的请求都会停顿，为了避免这个问题，单线程服务器应用程序必须使用非阻塞I/O，这种I/O的复杂性太远远高于同步I/O，并且很容易出错。然而，如果每个请求都拥有自己的处理线程，那么在处理某个请求时发生的阻塞将不会影响其他请求的处理。</p>
<h3 id="响应更灵敏的用户界面"><a href="#响应更灵敏的用户界面" class="headerlink" title="响应更灵敏的用户界面"></a>响应更灵敏的用户界面</h3><p>将GUI应用的各种事件放入单独的线程中运行，时间线程能及时地处理界面事件，从而使用户界面具有更高的灵敏度。</p>
<h2 id="线程带来的风险"><a href="#线程带来的风险" class="headerlink" title="线程带来的风险"></a>线程带来的风险</h2><p>Java对线程的支持其实是一把双刃剑。虽然Java提供了相应的语言和库，以及一种明确的跨平台内存模型，这些工具简化了并发应用程序的开发，但同时也提高了对开发人员的技术要求。</p>
<h3 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h3><p>线程的安全性是非常复杂的，在没有充足同步的情况下，多个线程的操作执行顺序是不可预测的。由于多个线程要共享相同的内存地址空间，并且是并发运行，因此它们可能会访问或修改其他线程正在使用的变量，要使多线程程序的行为可以预测，必须对共享变量的访问操作进行协同，在Java中提供了各种同步机制来协同这种访问。</p>
<h3 id="活跃性问题"><a href="#活跃性问题" class="headerlink" title="活跃性问题"></a>活跃性问题</h3><p>当某个操作无法继续执行下去时，就会发生活跃性问题。在串行程序中，活跃性问题的形式之一就是无意中造成的无限循环，从而使循环之后的代码无法得到执行。线程也会带来一些其他活跃性问题，例如死锁，饥饿，以及活锁。</p>
<h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>活跃性意味着某件正确的事情始终会发生，但却不够好。线程带来性能问题就是线程调度带来的开销，还有线程使用共享数据必须使用同步机制，同步机制往往也会抑制编译器做某些优化等问题。</p>
]]></content>
      
        <categories>
            
            <category> 并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM12-线程安全与锁优化]]></title>
      <url>/2016/11/25/JVM12/</url>
      <content type="html"><![CDATA[<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象就是线程安全的。</p>
<h3 id="Java语言中的线程安全"><a href="#Java语言中的线程安全" class="headerlink" title="Java语言中的线程安全"></a>Java语言中的线程安全</h3><p>讨论线程安全，就限定于<strong>多个线程之间存在共享数据访问</strong>这个前提，因为如果一段代码根本不会与其他线程共享数据，那么从线程安全的角度来看，程序是串行执行还是多线程执行对它来说是完全没有区别的。我们将Java语言中各种操作共享的数据分为以下5类：不可变、绝对线程安全、相对线程安全、线程兼容和线程独立。<br><a id="more"></a></p>
<ol>
<li>不可变<br> 在Java语言中，不可变的对象一定是线程安全的。基本数据类型采用final关键字修饰，如果是对象则需要保证自己的行为不会影响状态，例如String的replace()等方法都是产生新的对象。</li>
<li>绝对线程安全<br> 绝对的线程安全就是前面的提到的定义，这个定义很严格，一个类要达到「不管运行时环境如何，调用者都不需要任何额外的同步措施」通常需要付出很大的，甚至有时候是不切实际的代价。在Java API中标注自己是线程安全的类，大多数都不是绝对的线程安全。</li>
<li>相对线程安全<br> 相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外保障措施。在Java语言中，大部分的线程安全类都属于这种类型，例如Vector、HashTable等。</li>
<li>线程兼容<br> 线程兼容是指对象本身并不是线程安全的，但是可以通过调用端正确地使用同步手段来保证对象在并发环境中可以安全的使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。</li>
<li>线程对立<br> 线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。一个线程对立的例子是Thread类的suspend()和resume()方法，如果并发进行的话，无论调用时是否进行了同步，目标线程都是存在死锁风险的，如果suspend()中断的线程就是即将要执行resume()的那个线程，那肯定就要产生死锁了。</li>
</ol>
<h3 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h3><ol>
<li><p>互斥同步<br> 互斥同步（Mutual Exclusion &amp; Synchronization）是常见的一种并发正确性保证手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只能被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区（Critial Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。因此，在这四个字里面，互斥是因，同步是果；互斥是方法，同步是目的。<br> 在Java中，最基本的互斥同步手段就是synchronized关键字，synchronized关键字在经过编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。<br> 根据虚拟机规范的要求，在执行monitorenter指令时，首先要尝试获取对象的锁，如果这个对象没有被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行monitorexit指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止。<br> 关于monitorenter和monitorexit，有两点是要特别注意的：</p>
<ul>
<li>synchronized同步块对同一条线程来说是可重入的，不会出现把自己锁死的问题</li>
<li><p>同步块在已进入的线程执行完之前，会阻塞后面其它线程的进入</p>
<p>因为Java的线程是映射到操作系统的原生线程之上的，如果要阻塞或者唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到核心态中，因此状态转换需要耗费很多的处理器时间，对于代码简单的同步块，状态转换消耗的时间有可能比用户代码执行的时间还长，所以synchronized是Java语言中一个重量级（Heavyweight）锁，有经验的程序员都会在确实必要的情况下才使用这种操作。<br>除了synchronized，还有java.util.concurrent包中的ReentrantLock来实现同步。</p>
</li>
</ul>
</li>
<li>非阻塞同步<br> 互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。互斥同步属于一种悲观的并发策略。随着硬件指令集（CAS指令）的发展，我们还可以采用基于冲突检测的乐观并发策略：先操作，没有其他线程竞争，就成功了；如果有其他线程争用，产生了冲突，就再采取补偿措施。<br> AtomicInteger的incrementAndGet方法就是无限循环自增直到成功。</li>
</ol>
<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h3 id="自旋锁与自适应自旋"><a href="#自旋锁与自适应自旋" class="headerlink" title="自旋锁与自适应自旋"></a>自旋锁与自适应自旋</h3><p>互斥同步，对性能影响最大的是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核状态完成，这些操作给系统的并发性能带来了很大的压力。同时，虚拟机开发团队也注意到很多应用上，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得。如果物理机上有一个以上的处理器，能让两个或两个以上的线程同时并行执行，我们就可以让后面请求锁的那个线程”稍等一下”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需要让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。</p>
<p>JDK1.4.2就已经引入了自旋锁，只不过默认是关闭的，在JDK1.6中就已经改为默认开启了。自旋不能代替阻塞，且先不说处理器数量的要求，自旋等待本身虽然避免了线程切换的开销，但是它是要占据处理器时间的，因此如果锁被占用的时间很短，自旋等待的效果就非常好；反之，如果锁被占用的时间很长，那么自旋的线程只会白白消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。因此自旋等待必须有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了，自旋次数的默认值是10，可以使用参数-XX:PreBlockSpin来更改。</p>
<p>在JDK1.6之后引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上自旋的时间以及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长的时间，比如100个循环。另外如果对于某一个锁，自旋很少成功获得过，那么在以后要获得这个锁时将可能忽略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确。</p>
<h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于<strong>逃逸分析</strong>的支持，如果判断在一段代码中，堆上所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁自然无需进行。</p>
<h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>原则上，我们在编写代码的时候，总是推荐将同步块的作用范围限制得尽量小—-只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数尽可能变小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁。</p>
<p>大部分情况下，上面的原则都是正确的，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。</p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3>]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM11-Java内存模型与线程]]></title>
      <url>/2016/11/25/JVM11/</url>
      <content type="html"><![CDATA[<p>「内存模型」可以理解为在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。</p>
<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java虚拟机规范中试图定义一种Java内存模型来屏蔽掉各种硬件和操作系统内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。在此之前，主流程序语言（如C/C++等）直接使用物理硬件和操作系统的内存模型，因此，会由于不同平台上内存模型的差异，有可能导致程序在一套平台上并发完全正常，而在另外一台平台上并发访问却经常出错，因此在某些场景就必须针对不同的平台来编写程序。</p>
<h3 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h3><p>Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量与Java变成中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会被共享，自然不存在竞争问题。</p>
<p>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的私有工作内存，线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。（这很好的诠释了volatile关键字的作用和原理）<br><a id="more"></a><br><img src="http://images2015.cnblogs.com/blog/801753/201510/801753-20151007173838596-1678278825.png" alt=""></p>
<h3 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h3><p>Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是<strong>原子的、不可再分的</strong></p>
<ul>
<li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态</li>
<li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li>
<li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li>
<li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li>
<li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li>
<li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li>
<li>store（存储）：作用于工作内存的变量，它把工作内存中的一个变量的值传送到主内存中，以便随后的write操作使用。</li>
<li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li>
</ul>
<p>如果要把变量从主内存复制到工作内存，那就要顺序执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地执行store和write操作。Java内存模型规定了在执行上述8种基本操作时必须满足如下规则：</p>
<ul>
<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起了回写但主内存不接受的情况出现。</li>
<li>不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li>
<li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中字节使用一个未被初始化（load或assign的变量），换句话说就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li>
<li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>
<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li>
</ul>
<p>这8种内存访问操作以及上述规则的限定，再加上下面讲的对volatile的一些特殊规定，就已经完全确定了Java程序中哪些内存访问操作在并发下是安全的。</p>
<h3 id="对于volatile型变量的特殊规则"><a href="#对于volatile型变量的特殊规则" class="headerlink" title="对于volatile型变量的特殊规则"></a>对于volatile型变量的特殊规则</h3><p>关键字volatile可以说是Java虚拟机提供的最轻量级的同步机制，我们需要正确的理解并使用它。</p>
<p>当一个变量定义为volatile之后，它将具备两种特性：</p>
<p>1.保证此变量对所有线程的可见性，这里的「可见性」是指当一条线程修改了这个变量的值，，新值对于其他线程来说是可以立即得知的。而普通变量做不到这一点，普通变量的值在线程间传递均需要通过主内存来完成，例如线程A修改一个普通变量的值，然后向主内存进行回写，另外一条线程B在线程A回写完成了之后再从主内存进行读取操作，新变量值才会对线程B可见。<br>Java里面的运算并非原子操作，导致volatile变量在并发下一样是不安全的，看一段例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/25 上午11:05.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * volatile变量自增预算测试</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> race = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        race++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADS_COUNT = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[THREADS_COUNT];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS_COUNT; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</div><div class="line">                        increase();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 等待所有累加线程都结束</span></div><div class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">1</span>) &#123;</div><div class="line">            Thread.yield();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(race);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结果每次可能都不一样，因为“race++”在虚拟机内部被分解成了很多指令，不同线程在自增的时候，这个值拿到的可能是过期的数据。</p>
<p>由于volatile变量值能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁来保证原子性。</p>
<ul>
<li>运算结果并不依赖变量的当前值，或者能确保只有单一的线程修改变量的值</li>
<li>变量不需要与其他的状态变量共同参与不变约束</li>
</ul>
<p>下面的场景就很适用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> shutdownRequested;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">	shutdownRequested  = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span>(!shutdownRequested) &#123;</div><div class="line">		<span class="comment">// do stuff</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.使用volatile变量的第二个语义是禁止指令重排序优化，普通变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，<strong>而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致</strong>。我们通过一个例子来看看为何指令重排序会干扰程序的并发执行。</p>
<blockquote>
<p>指令重排序优化是指为了使得处理内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行优化，处理器会再计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，因此如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Map condigOptions;</div><div class="line"><span class="keyword">char</span>[] configText;</div><div class="line"><span class="comment">// 此变量必须定义为volatile</span></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</div><div class="line"><span class="comment">// 假设以下代码在线程A中执行</span></div><div class="line"><span class="comment">// 模拟读取信息配置，当读取完成后将initialized设置为true以通知其他线程配置可用</span></div><div class="line">configOptions = <span class="keyword">new</span> HashMap();</div><div class="line">configText = readConfigFile(fileName);</div><div class="line">processConfigOptions(configText, configOptions);</div><div class="line">initialized = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// 假设以下代码在线程B中执行</span></div><div class="line"><span class="comment">// 等待initialized为true，代表线程A已经把配置信息初始化完成</span></div><div class="line"><span class="keyword">while</span> (!initialized) &#123;</div><div class="line">	sleep();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用线程A中初始化好的配置信息</span></div><div class="line">doSomethingWihtConfig();</div></pre></td></tr></table></figure>
<p>上面的代码如果有定义initialized变量时没有使用volatile修饰，就可能会由于指令重排序的优化，导致位于线程A中最后一句的代码“initialized = true;”被提前执行(重排序优化是机器级的优化操作，提前执行是说这句话对应的汇编代码被提前)，这样在线程B中的代码可能就会出错。</p>
<h3 id="对于long和double型变量的特殊规则"><a href="#对于long和double型变量的特殊规则" class="headerlink" title="对于long和double型变量的特殊规则"></a>对于long和double型变量的特殊规则</h3><p>因为double和long是64位数据，内存模型允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32为的操作来进行，即允许虚拟机实现选择选择可以不保证64位数据类型的load、store、read和write这4个操作的原子性。</p>
<p>如果有多个线程共享一个并未声明为volatile的long或double类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读取到一个既非原值，也不是其他线程修改的值代表了「半个变量」的数值。不过这很罕见，因为目前的商用虚拟机几乎都还是选择把64位数据的读写作为原子操作来对待，所以我们写代码一般也不需要对long和double变量专门声明为volatile。</p>
<h3 id="原子性、可见性与有序性"><a href="#原子性、可见性与有序性" class="headerlink" title="原子性、可见性与有序性"></a>原子性、可见性与有序性</h3><p>Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的。</p>
<ul>
<li>原子性<br>  由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读写是具备原子性的（例外就是long和double的非原子性协定，不过也无须太在意这几乎不会发生的例外情况。）<br>  如果还需要更大范围的原子性保证，Java内存模型还提供了lock和unlock操作，也就是synchronized关键字。</li>
<li>可见性<br>  可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程时操作变量的可见性，而普通变量则不能保证这一点。<br>  synchronized和final关键字也能实现可见性，synchronized的可见性是由「对一个变量执行unlock操作之前，必须先把此变量同步回主内存中」这条规则获得的。另外，final关键字也可以实现可见性，因为被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this传递出去，那在其他线程中就能看见final字段的值。</li>
<li>有序性<br>  Java内存模型的有序性可以总结为一句话，如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指「线程内表现为串行的语义」，后半句是指「指令重排序」现象和「工作内存与主内存同步延迟」现象。<br>  Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由”一个变量在同一时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则规定了持有同一个锁的两个同步块只能串行地进入。</li>
</ul>
<h3 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h3><p>如果Java内存模型中所有的有序性都仅仅靠volatile和synchronized来完成，那么好像有一些操作将会变得很繁琐，但是我们在编写Java并发代码的时候并没有感觉到这一点，这是因为Java语言中有一个「先行发生」的原则。这个原则非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则一揽子地解决并发环境下两个操作之间是否可能存在冲突的所有问题。</p>
<p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于B，其实就是说发生在操作B之前，操作A产生的影响能被B观察到，「影响」包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p>
<p>Java内存模型有有些天然的先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序行保障，虚拟机可以对它们随意地进行重排序。</p>
<ul>
<li>程序次序规则：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</li>
<li>管程锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，这里「后面」是指时间上的先后顺序。</li>
<li>volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里「后面」同样是指时间上的先后顺序。</li>
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。</li>
<li>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手短检测到线程已经终止执行。</li>
<li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生。</li>
<li>对象终结规则：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</li>
<li>传递性：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</li>
</ul>
<p>Java语言无须任何同步手段保障就能成立的先行发生规则就只有上面这些。下面演示如何用这些规则来判定操作间是否具备顺序性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>.value = value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是很普通的getter/setter方法，假设存在线程A和B，线程A先(时间上的先后)调用了“setValue(1)”，然后线程B调用了同一个对象的“getValue()”，那么线程B的返回值是什么？<br>我们根据规则来分析一下：由于两个方法分别由线程A和线程B调用，不在一个线程中，所以程序次序规则不适用；由于没有同步块，就没有lock和unlock操作，所以管程锁定规则不适用；由于value变量没有被volatile关键字修饰，所以volatile变量规则不适用；后面的线程启动、终止、中断规则和对象终结规则也和这里完全没有关系。因为没有一个使用的先行发生规则，所以最后一条传递性也无从谈起。<em>因此可以判定尽管线程A在操作时间上先于线程B，但是无法确定线程B中的“getValue()”方法的返回结果，换句话说，这里面的操作不是线程安全的</em></p>
<p>那如何修复这个问题？至少有两种比较简单的方案：</p>
<ol>
<li>setter/getter都定义成synchronized的，这样可以套用管程锁定规则</li>
<li>value定义为volatile变量，由于setter方法对value的修改不依赖于value的原值，满足volatile关键字的使用场景，这样可以套用volatile变量规则</li>
</ol>
<p>我们也得出一个结论：时间先后顺序与先行发生原则之间基本没有太大的关系，所以我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准。</p>
<h2 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h2><h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><p>Java的线程API基本都是Native方法，意味着这个方法没有使用或无法使用平台无关的手段来实现。实现线程有3种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级进程混合实现。</p>
<ol>
<li>使用内核线程实现<br> 内核线程就是直接由操作系统支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。不过程序一般不会直接去使用内核线程，而是使用内核线程的一种高级接口–轻量级进程。这种方式系统调用代价较高，并且因为消耗内核资源，所以轻量级进程数量有限。轻量级进程与内核线程之间是1：1的关系。</li>
<li>使用用户线程实现<br> 从广义上来讲，一个线程只要不是内核线程，就可以认为是用户线程。而狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。这种方式的操作可以是非常快速且低消耗的，劣势在于没有系统内核支持，实现起来非常的复杂。Java和Ruby都曾经使用过用户线程，最终又都放弃使用它。进程与用户线程之间是1：N的关系。</li>
<li><p>使用用户线程加轻量级进程混合实现<br> 线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式。在这种混合实现下，既存在用户线程，也存在轻量级进程。因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，大大降低了整个进城被完全阻塞的风险。用户线程与轻量级进程之间是N：M的关系。</p>
</li>
<li><p>Java线程的实现<br> 1.2之前是用户线程实现的，1.2开始替换为基于操作系统原生线程模型来实现。因此在目前的JDK版本中，操作系统支持怎样的线程模型，很大程度上决定了Java虚拟机的线程是怎样映射的。对Sun JDK来说，它的Windows版和linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为windows和Linux系统提供的线程模型就是一对一的。</p>
</li>
</ol>
<h3 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h3><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。</p>
<p>协同式调度，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知切换到另外一个线程上。好处是实现简单，干完自己的事情后进行线程切换，没有什么同步问题，坏处是一旦程序出问题，将会阻塞下去。</p>
<p>抢占式调度的多线程系统，每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定。这种实现线程调度的方式下，线程的执行时间是系统可控的，不会出现什么阻塞问题。</p>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>线程有5种状态</p>
<ul>
<li>新建：创建后尚未启动的线程处于这种状态</li>
<li>运行：Runable包括了操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为他分配执行时间。</li>
<li>无限期等待：处于这种状态的线程不宜被分配CPU执行时间，她们要等待被其他线程显式的唤醒。以下方法会让线程陷入无限期的等待状态：<ul>
<li>没有设置Timeout参数的Object.wait()方法</li>
<li>没有设置Timeout参数的Thread.join()方法</li>
<li>LockSupport.park()方法</li>
</ul>
</li>
<li>限期等待：处于这种状态的线程也不会被分配CPU执行时间，不过无须等待被其他线程显式地唤醒，在已定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：<ul>
<li>Thread.sleep()方法。</li>
<li>设置了Timeout参数的Object.wait()方法。</li>
<li>设置了Timeout参数的Thread.join()方法。</li>
<li>LockSupport.parkNanos()方法。</li>
<li>LockSupport.parkUntil()方法</li>
</ul>
</li>
<li>阻塞：线程被阻塞了，「阻塞状态」与「等待状态」的区别是：「阻塞状态」在等待着获取一个到一个排他锁，这个时间将在另外一个线程放弃这个锁的时候发生；而「等待状态」则是等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</li>
<li>结束：已终止线程的线程状态，线程已经结束执行。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Editor-tool]]></title>
      <url>/2016/11/20/Editor-tool/</url>
      <content type="html"><![CDATA[<p>##文章链接</p>
<ul>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">编辑器介绍</a></li>
</ul>
<hr>
<p>##好用的Markdown编辑器一览</p>
<ul>
<li><p><a href="http://dillinger.io/" target="_blank" rel="external">dillinger</a></p>
</li>
<li><p><a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a></p>
</li>
<li><p><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a></p>
</li>
<li><p><a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠编辑器</a></p>
</li>
<li><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown</a></p>
</li>
<li><p><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a></p>
</li>
</ul>
<p>##Chrome插件</p>
<ul>
<li><p><a href="http://marxi.co/" target="_blank" rel="external">Marxico</a></p>
</li>
<li><p><a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a></p>
</li>
<li><p><a href="https://www.farbox.com/" target="_blank" rel="external">FarBox</a></p>
</li>
<li><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown</a></p>
</li>
<li><p><a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠编辑器</a></p>
</li>
<li><p><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></p>
</li>
<li><p><a href="https://atom.io/" target="_blank" rel="external">Atom</a></p>
</li>
<li><p><a href="http://git.oschina.net/elerao/Smark" target="_blank" rel="external">Smark</a></p>
</li>
<li><p><a href="hhttp://www.mdcharm.com/" target="_blank" rel="external">MdCharm</a></p>
</li>
<li><p><a href="http://www.appinn.com/miu-markdown-editor/" target="_blank" rel="external">Miu</a></p>
</li>
<li><p><a href="http://25.io/mou/" target="_blank" rel="external">Mou</a></p>
</li>
<li><p><a href="http://typora.io/" target="_blank" rel="external">Typora</a></p>
</li>
<li><p><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a></p>
</li>
<li><p><a href="https://bywordapp.com/" target="_blank" rel="external">Byword</a></p>
</li>
<li><p><a href="https://ia.net/writer/ios" target="_blank" rel="external">iA Writer</a></p>
</li>
<li><p><a href="https://ulyssesapp.com/" target="_blank" rel="external">Ulysses</a></p>
</li>
<li><a href="https://realmacsoftware.com/typed/" target="_blank" rel="external">Typed</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native-打包apk]]></title>
      <url>/2016/11/20/React-Native-%E6%89%93%E5%8C%85apk/</url>
      <content type="html"><![CDATA[<p>##生成一个签名</p>
<ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E8%BA%AB%E4%BB%BD" target="_blank" rel="external">数字身份</a></p>
</li>
<li><p><a href="http://baike.baidu.com/link?url=HqFC2A03zv86lOJZc0TSyp6CtnQ8boPP15j6ggLnc32pjNod_ZIA7qIX7lgkvyeMNJJB5CfaKRR97KYKIBQokq" target="_blank" rel="external">keytool百科</a></p>
</li>
</ul>
<p>使用keytool命令生成一个私有密钥</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">10000</span></div></pre></td></tr></table></figure>
<p>这条命令会要求你输入密钥库（keystore）和对应密钥的密码，然后设置一些发行相关的信息。最后它会生成一个叫做my-release-key.keystore的密钥库文件。<br>在运行上面这条语句之后，密钥库里应该已经生成了一个单独的密钥，有效期为10000天。–alias参数后面的别名是你将来为应用签名时所需要用到的，所以记得记录这个别名。<br>参数详解：<br>-dname “CN=xx,OU=xx,O=xx,L=xx,ST=xx,C=xx” dn名为”CN=…”<br>-alias scent 别名为scent的一个证书<br>-keyalg<br>DSA RSA DSA或RSA算法(当使用-genkeypair参数)<br>DES DESede AES DES或DESede或AES算法(当使用-genseckey参数)<br>-keysize<br>512 ~ 1024 密钥的长度为512至1024之间(64的倍数)(当使用-genkeypair和-keyalg DSA参数)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 512 密钥的长度大于512 (当使用-genkeypair和-keyalg RSA参数) 56 密钥的长度为56 (当使用-genseckey和-keyalg DES 参数) 112 168 密钥长度为112或168(当使用-genseckey和-keyalg DESede 参数) 128 192 256 密钥长度为128或192或256 (当使用-genseckey和-keyalg AES 参数)</div></pre></td></tr></table></figure>
<p>-keypass 123456 这个证书的私钥密码为123456</p>
<p>-keystore prospectlib 证书库的名称为prospectlib</p>
<p>-storepass 123456 证书库的访问密码为123456</p>
<p>-validity 900 证书有效期为900天</p>
<p>-file scent.cer 从scent.cer文件导入证书，或者导出证书到</p>
<p>scent.cer文件</p>
<p>-v 显示详细信息</p>
<p>-rfc 以Base64的编码格式打印证书</p>
<p>-storetype JCEKS 密钥库的类型为JCEKS。常用的有JKS(默认),JCEKS(推荐),PKCS12,BKS,UBER。每个密钥库只可以是其中一种类型。 </p>
<p>在桌面上会生成my-release-key.keystore文件</p>
<p>把my-release-key.keystore文件放到你工程中的android/app文件夹下。</p>
<p>编辑~/.gradle/gradle.properties，添加如下的代码（注意把其中的**替换为相应密码）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</div><div class="line"></div><div class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</div><div class="line"></div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=*****</div><div class="line"></div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=*****</div></pre></td></tr></table></figure>
<p>##添加签名到应用的gradle配置文件</p>
<hr>
<p>编辑你工程目录下的android/app/build.gradle，添加如下的内容： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">android &#123;</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> defaultConfig &#123; ... &#125;</div><div class="line"></div><div class="line"> signingConfigs &#123;</div><div class="line"></div><div class="line"> release &#123;</div><div class="line"></div><div class="line"> storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line"></div><div class="line"> storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line"></div><div class="line"> keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line"></div><div class="line"> keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> buildTypes &#123;</div><div class="line"></div><div class="line"> release &#123;</div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"> signingConfig signingConfigs.release</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>##生成发行APK包</p>
<hr>
<p>切换到android目录 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd android</div><div class="line">gradlew assembleRelease</div></pre></td></tr></table></figure>
<p>好像这个文件夹下要先有一个未签名的app-release-unaligned.apk 不懂 我执行了两次好了</p>
<p>##测试应用的发行版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gradlew installRelease</div></pre></td></tr></table></figure>
<p>安装到模拟器中，不会自动打开app，自己手动打开，不用再开启js 服务了，因为你的代码全部打包到apk中了。</p>
<hr>
<p>##启用Proguard代码混淆来缩小APK文件的大小（可选）</p>
<hr>
<p>Proguard是一个Java字节码混淆压缩工具，它可以移除掉React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少APK的大小。</p>
<p>重要：启用Proguard之后，你必须再次全面地测试你的应用。Proguard有时候需要为你引入的每个原生库做一些额外的配置。参见app/proguard-rules.pro文件。</p>
<p>要启用Proguard，编辑android/app/build.gradle文件</p>
<p>前后比较 </p>
]]></content>
      
        <categories>
            
            <category> React Native </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[code_sign]]></title>
      <url>/2016/11/19/code-sign/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>I am BlankCat，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">代码动画ffmpeg（谷歌一下）</div><div class="line">http://www.asciiworld.com/</div><div class="line">http://www.bilibili.com/topic/70.html</div><div class="line"></div><div class="line">代码设计自己的个性签名</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 代码签名 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码签名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[发布hexo博文命令]]></title>
      <url>/2016/11/19/hexo-command/</url>
      <content type="html"><![CDATA[<p>I am BlankCat，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dubug命令</div><div class="line">hexo s --debug</div><div class="line"></div><div class="line">创建新文章(文章名字小写)</div><div class="line">hexo new post 文章名字</div><div class="line"></div><div class="line">发布文章</div><div class="line">hexo g</div><div class="line">hexo d</div><div class="line"></div><div class="line">hexo  clean</div><div class="line"></div><div class="line">dubug命令</div><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[adb]]></title>
      <url>/2016/11/19/adb/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>I am BlankCat ，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">原文地址：</div><div class="line"></div><div class="line">http://blog.csdn.net/gaojinshan/article/details/9382953</div><div class="line"></div><div class="line">有时候ADB不能用，</div><div class="line"></div><div class="line">并且会报以下的错误：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;adb devices</div><div class="line"></div><div class="line">adb server is out of date. killing...</div><div class="line"></div><div class="line">ADB server didn<span class="string">'t ACK</span></div><div class="line"></div><div class="line">* failed to start daemon *</div><div class="line"></div><div class="line">error: unknown host service</div><div class="line"></div><div class="line">用如下的命令，发现5037的端口被占用：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;adb nodaemon server</div><div class="line"></div><div class="line">cannot bind 'tcp:5037<span class="string">'</span></div><div class="line"></div><div class="line">用如下的命令，能查到什么进程占用了这个端口：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;netstat -ano | findstr "5037"</div><div class="line"></div><div class="line"> TCP 127.0.0.1:5037 0.0.0.0:0 LISTENING 21152</div><div class="line"></div><div class="line"> TCP 127.0.0.1:5037 127.0.0.1:62629 ESTABLISHED 21152</div><div class="line"></div><div class="line"> TCP 127.0.0.1:5037 127.0.0.1:63942 TIME_WAIT 0</div><div class="line"></div><div class="line"> TCP 127.0.0.1:5037 127.0.0.1:63943 TIME_WAIT 0</div><div class="line"></div><div class="line"> TCP 127.0.0.1:5037 127.0.0.1:63944 TIME_WAIT 0</div><div class="line"></div><div class="line"> TCP 127.0.0.1:62629 127.0.0.1:5037 ESTABLISHED 2980</div><div class="line"></div><div class="line">用如下命令，可以看到上述PID的进程，到底是什么了：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;tasklist | findstr "2980"</div><div class="line"></div><div class="line">QQ.exe 2980 Console 4 60,712 K</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;tasklist | findstr "21152"</div><div class="line"></div><div class="line">tadb.exe 21152 Console 4 2,136 K</div><div class="line"></div><div class="line">原来是腾讯这个无耻的家伙（tadb就是Tencent Adb）！</div><div class="line"></div><div class="line">用如下的命令，将tadb.exe（PID:21152）杀掉：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;taskkill /f /pid 21152</div><div class="line"></div><div class="line">然后，再试，就可以了：</div><div class="line"></div><div class="line">C:\Users\gaojs&gt;adb devices</div><div class="line"></div><div class="line">* daemon not running. starting it now on port 5037 *</div><div class="line"></div><div class="line">* daemon started successfully *</div><div class="line"></div><div class="line">List of devices attached</div><div class="line"></div><div class="line">4dfadcb86b00cf05 device</div><div class="line"></div><div class="line">=============================查询进程号命令=========================</div><div class="line"></div><div class="line">3.输入：</div><div class="line"></div><div class="line">tasklist | findstr 端口(获取步骤2里面的端口，实际就是拿到了pid)</div><div class="line"></div><div class="line">=============================杀死进程号命令=========================</div><div class="line"></div><div class="line">4.taskkill /pid 端口（步骤3里面的端口） /F</div><div class="line"></div><div class="line">杀死进程</div><div class="line"></div><div class="line">http://blog.csdn.net/diaoruiqing/article/details/7851001</div><div class="line"></div><div class="line">假如这个进程占用了你的端口号，那么用这个方法干掉它。</div><div class="line"></div><div class="line">用Ctrl+Alt+Delete调出windows任务管理器窗口，</div><div class="line"></div><div class="line">可以直接通过名称找到这个占用的进程，然后选择结束进程。</div><div class="line"></div><div class="line">也可以通过PID号找到这个进程。</div><div class="line"></div><div class="line">点击&lt;查看&gt;-&gt;&lt;选择列&gt;，勾选&lt;PID(进程标识符号)&gt;，找到并结束进程。</div><div class="line"></div><div class="line">另外一个方法就是继续使用命令：</div><div class="line"></div><div class="line">C:\&gt;taskkill /f /t /javaw.exe</div><div class="line"></div><div class="line">========================================================</div><div class="line"></div><div class="line">执行命令</div><div class="line"></div><div class="line">http://blog.csdn.net/u012842688/article/details/50916802</div><div class="line"></div><div class="line">adb链接不到设备</div><div class="line"></div><div class="line">adb devices</div><div class="line"></div><div class="line">adb kill-server</div><div class="line"></div><div class="line">adb start-server</div><div class="line"></div><div class="line">adb device</div><div class="line"></div><div class="line">固定命令（神模拟器）</div><div class="line"></div><div class="line">adb connect 127.0.0.1:62001</div><div class="line"></div><div class="line">adb device</div><div class="line"></div><div class="line">原文地址</div><div class="line"></div><div class="line">http://bbs.pediy.com/showthread.php?t=206396</div><div class="line"></div><div class="line">=====================================================</div><div class="line"></div><div class="line">根据应用进程id查看端口</div><div class="line"></div><div class="line">任务管理器里面查找进程 pid</div><div class="line"></div><div class="line">执行命令，找到对应的端口号</div><div class="line"></div><div class="line">netstat -ano</div><div class="line"></div><div class="line">======================================================</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo技术总结]]></title>
      <url>/2016/11/19/hexo/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>I am BlankCat，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">半个小时搭建一个个人博客</div><div class="line">hexo个人博客</div><div class="line">http://blog.csdn.net/v123411739/article/details/44964065</div><div class="line"></div><div class="line">搭建个人博客</div><div class="line">http://www.cnblogs.com/zhcncn/p/4097881.html</div><div class="line"></div><div class="line">搭建个人博客（重点）</div><div class="line">http://blog.csdn.net/jzooo/article/details/46781805</div><div class="line"></div><div class="line">个人博客搭建（知乎）</div><div class="line">https://www.zhihu.com/question/20962496</div><div class="line"></div><div class="line">hexo+github+多说</div><div class="line">http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/</div><div class="line"></div><div class="line"></div><div class="line">如何搭建一个个人博客（附文注册域名，维护站点）</div><div class="line">http://cnfeat.com/blog/2014/05/10/how-to-build<span class="_">-a</span>-blog/</div><div class="line"></div><div class="line">mycat分库分表</div><div class="line">http://blog.csdn.net/leipeng321123/article/details/50401376</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">搭建个人博客（****）</div><div class="line">http://blog.csdn.net/jzooo/article/details/46781805</div><div class="line"></div><div class="line">hexo上传失败解决</div><div class="line">http://www.cnblogs.com/xsilence/p/6001938.html</div><div class="line"></div><div class="line">博客主题</div><div class="line">http://blog.xinspace.space/2016/04/11/%E8%87%AA%E5%AE%9A%E4%B9%89Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E7%AB%A0%E3%80%81%E8%8D%89%E7%A8%BF%E5%92%8C%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%A8%A1%E6%9D%BF/</div><div class="line">炫酷主题</div><div class="line">https://github.com/iissnan/hexo-theme-next</div><div class="line"></div><div class="line">使用文档</div><div class="line">http://theme-next.iissnan.com/</div><div class="line"></div><div class="line">hexo+next主题</div><div class="line">http://www.jianshu.com/p/f66103553c45</div><div class="line"></div><div class="line">hexo+github 总结</div><div class="line">https://zhuanlan.zhihu.com/p/22632478</div><div class="line"></div><div class="line">搭建博客（******）</div><div class="line">http://www.jianshu.com/p/f66103553c45</div><div class="line">$ hexo s --debug</div><div class="line"></div><div class="line">优化</div><div class="line">http://www.jeyzhang.com/hexo-next-add-post-views.html<span class="comment">#</span></div><div class="line">http://michaelxiang.me/2015/11/30/hexo-next-optimize/</div><div class="line"></div><div class="line"></div><div class="line">发布博客</div><div class="line">git config --global user.name <span class="string">""</span></div><div class="line">git config --global user.email <span class="string">""</span></div><div class="line">hexo d -g</div><div class="line"></div><div class="line">发布文章</div><div class="line">hexo上传失败解决</div><div class="line">http://www.cnblogs.com/xsilence/p/6001938.html</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cmd 命令]]></title>
      <url>/2016/11/19/cmd/</url>
      <content type="html"><![CDATA[<p>I am BlankCat ，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">The nexus service is already running with status: RUNNING</div><div class="line">端口号被占用</div><div class="line"></div><div class="line">1查看所有端口</div><div class="line">netstat -ano</div><div class="line"></div><div class="line">2查看固定端口</div><div class="line">C:\&gt;netstat -aon|findstr <span class="string">"8081"</span></div><div class="line">  协议    本地地址                     外部地址               状态                   PID</div><div class="line">  TCP    127.0.0.1:9050              0.0.0.0:0              LISTENING               2016</div><div class="line"></div><div class="line"></div><div class="line">3.查看PID对应的进程</div><div class="line">C:\&gt;tasklist|findstr <span class="string">"2016"</span></div><div class="line"> 映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></div><div class="line"> ========================= ======== ================</div><div class="line">  tor.exe                     2016 Console                 0        16,064 K </div><div class="line"></div><div class="line"></div><div class="line">查看taskkill这个用法</div><div class="line">C:\Windows\System32\taskkill /?</div><div class="line">杀死进程</div><div class="line">C:\Windows\System32\taskkill /PID 11052</div><div class="line">强制杀死进程</div><div class="line">C:\Windows\System32\taskkill /F /PID 11052</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> Windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Big data]]></title>
      <url>/2016/11/19/Bigdata/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《刘瑜写给女儿的信：愿你慢慢长大 》<br>小布谷，愿你慢慢长大。<br>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。<br>愿你一生一世每天都可以睡到自然醒。 </p>
</blockquote>
<p>I am BlankCat ，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">集群分3种</div><div class="line">负载均衡：分发机制，也会用到主从概念，咱们访问wwww.baidu.com时候，百度会对应着一个服务器</div><div class="line">	  这个服务ip不是对应真正的请求服务，而是做了一层分发，这样用户请求多了，可以保证减轻服务的压力</div><div class="line">	  负载均衡机制都是通过算法计算，然后完成；</div><div class="line"></div><div class="line">高可用：针对服务概念，访问一个比较重要的服务，把服务做成高可用模式</div><div class="line">	把服务写成分解成多个，主服务和从服务（服务的总数必须是奇数个，方便投票机制），</div><div class="line">	服务与服务之间通过心跳机制去沟通，发消息，每秒钟发一次；</div><div class="line">	服务与服务之间通过投票机制产生主服务。把服务拓展成性能比较高的服务</div><div class="line">	这叫高可用服务。</div><div class="line">并行计算，针对任务，一个大任务分成几个小任务，最后做汇总，hadoop并行计算（百度一下）</div><div class="line">	  业务场景，统计（天气预报）全国的天气预报，需要每天每分钟做定时统计，这里设计业务很复杂的计算</div><div class="line">	  为了完成一个任务，会把大的任务分解成一个小的任务，把小任务的结果进行汇总，完成任务的并行计算。</div><div class="line"></div><div class="line">================================</div><div class="line">5个九，保一年内证宕机几分钟？</div><div class="line">5个 9的是可用性，服务的可用性，高可用性 (服务器的高可用性)</div><div class="line">什么是“5个9”(99.999%)的可靠性？（GG一下,你就知道）</div><div class="line"></div><div class="line"></div><div class="line">================================</div><div class="line"></div><div class="line"></div><div class="line">cluster</div><div class="line">LB: load balancing : 负载均衡，提高并发处理能力</div><div class="line">    health check: 健康检测</div><div class="line">HA:hight availability: 高可用集群，检测心跳，提升服务在线能力（服务可用性）</div><div class="line">			在线时间/（在线时间+故障处理时间）</div><div class="line">HP:hight performance : 高性能集群，并行计算集群，处理复杂计算，科学计算集群</div><div class="line">			分布式文件系统</div><div class="line">			将大任务切割成小任务，分别进行处理的机制</div><div class="line"></div><div class="line"></div><div class="line">================================</div><div class="line"></div><div class="line">数据库主从（读写分离）</div><div class="line">http://www.cnblogs.com/panxuejun/p/5887118.html</div><div class="line">主数据库master（在往<span class="built_in">log</span>日志里面写的时候会先锁住），插入数据库的记录会进入等待，</div><div class="line">从数据库slave，会开启两个线程（单进程多线程模式），一个io线程，一个sql线程，io读取主数据的binlog日志，</div><div class="line">sql线程执行sql，同步数据，完成数据库的同步；</div><div class="line"></div><div class="line"></div><div class="line">================================</div><div class="line">cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。</div><div class="line">它支持文件上传和下载，所以是综合传输工具，</div><div class="line">但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl</div><div class="line">官网 https://curl.haxx.se/</div><div class="line">curl 命令行下载工具使用方法小结 http://www.jb51.net/softjc/26483.html</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[net 网络知识]]></title>
      <url>/2016/11/19/net/</url>
      <content type="html"><![CDATA[<p>I am BlankCat，welcome to my blog；</p>
<h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">ipv4私网地址 百度一下</div><div class="line">IPV4 地址分类 A B C D E</div><div class="line">http://blog.csdn.net/ylqmf/article/details/4970213</div><div class="line">c类网段一般容纳254个主机；</div><div class="line"></div><div class="line"></div><div class="line">网络：设置</div><div class="line">WAN广域网</div><div class="line">LAN局域网</div><div class="line">WLAN无线局域网</div><div class="line"></div><div class="line">WAN口是对外的接口，和运营商、上级网络打交道。</div><div class="line">LAN和WLAN是对内的接口，内部的电脑、手机、PAD，都是接入到LAN或者WLAN。</div><div class="line">一般的无线路由器，包含了完整的LAN、WAN、WLAN功能</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ip地址讲解</div><div class="line">http://blog.csdn.net/yangluoning/article/details/8667067</div><div class="line"></div><div class="line">如何浏览器下载局域网电脑的东西</div><div class="line"></div><div class="line">输入wifi密码，手机是如何和路由器交换数据的</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">python监听端口下载东西</div><div class="line">python -m SimpleHTTPServer 80</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> net </category>
            
        </categories>
        
        
        <tags>
            
            <tag> net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM10-运行期优化]]></title>
      <url>/2016/11/17/JVM10/</url>
      <content type="html"><![CDATA[<p>Java程序最初是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为『热点代码』。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器。</p>
<h2 id="HotSpot虚拟机内的即时编译器"><a href="#HotSpot虚拟机内的即时编译器" class="headerlink" title="HotSpot虚拟机内的即时编译器"></a>HotSpot虚拟机内的即时编译器</h2><h3 id="解释器与编译器"><a href="#解释器与编译器" class="headerlink" title="解释器与编译器"></a>解释器与编译器</h3><p>HotSpot虚拟机是采用解释器与编译器并存的架构。解释器和编译器各有优势：当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立即执行。在程序运行后，随着时间的推移，编译器初见发挥作用，把越来越多的代码编译成本地代码之后，可以获取更高的执行效率。</p>
<h3 id="编译对象与触发条件"><a href="#编译对象与触发条件" class="headerlink" title="编译对象与触发条件"></a>编译对象与触发条件</h3><p>在运行过程中被即时编译器编译的『热点代码』有两类：</p>
<ul>
<li>被多次调用的方法</li>
<li>被多次执行的循环体<a id="more"></a>
前者很好理解，一个方法被调用得多了，方法体内代码执行的次数自然就多，他成为”热点代码”也是理所当然。而后者则是为了解决一个方法只被调用过一次或者少量的几次，但是方法体内部存在循环次数较多的循环体问题，这样循环体的代码也被重复执行多次，因此这些代码也应该认为是”热点代码”。</li>
</ul>
<p>判断一段代码是不是热点代码，是不是需要触发即时编译，这样的行为称为热点探测，目前主要有两种方式：</p>
<ul>
<li>基于采样的热点探测</li>
<li>基于计数器的热点探测</li>
</ul>
<p>HotSpot是使用的第二种，基于计数器的热点探测方法，因此它为每个方法准备了两类计数器：方法调用计数器和回边计数器。在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，超过这个阀值，就会触发JIT编译。</p>
<h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p>这个计数器就是统计方法被调用的次数，默认阀值在Client模式下是1500次，在Server模式下是10000次，这个阀值可以通过虚拟机参数-XX:CompileThreshold来设置。<br>当一个方法被调用时，会检查方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器和回边计数器值之和是否超过方法调用计数器的阈值。如果已经超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</p>
<p>如果不做任何设置，执行引擎并不会同步等待编译请求完成，而是直接进入解释器按照解释方法执行字节码，直到提交的请求被编译器编译完成。当编译工作完成之后，这个方法的调用入口地址就会被系统自动改写成新的，下一次调用该方法时就会使用已编译的版本。</p>
<p>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会少一半，这个过程称为方法的调用计数器热度的衰减，而这段时间就称为此方法统计的半衰周期。进行热度衰减的动作是在虚拟机进行垃圾回收时顺便进行的，可以使用虚拟机参数-XX:-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。另外，可以使用-XX:CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</p>
<h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p>它的作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为”回边”。显然，建立回边计数器统计的目的就是为了触发OSR编译。</p>
<p>关于回边计数器的阈值，虽然HotSpot也提供了一个类似于方法调用计数器阈值-XX:CompileThreshold的参数-XX:BackEdgeThreshold供用户设置，但是当前虚拟机实际上并未使用此参数，因此我们需要设置另外一个参数-XX:OnStackReplacePercentage来间接调整回边计数器的阈值，其计算公式如下：</p>
<ol>
<li><p>Client模式<br> 方法调用计数器阈值 × OSR比率 / 1000，其中OSR比率默认值933，如果都取默认值，Client模式下回边计数器的阈值应该是13995</p>
</li>
<li><p>Server模式<br> 方法调用计数器阈值 × (OSR比率 - 解释器监控比率) / 100，其中OSR比率默认140，解释器监控比率默认33，如果都取默认值，Server模式下回边计数器阈值应该是10700</p>
</li>
</ol>
<p>当解释器遇到一条回边指令时，会先查找将要执行的代码片段中是否有已经编译好的版本，如果有，它将会优先执行已编译好的代码，否则就把回边计时器的值加1，然后判断方法调用计数器与回边计数器值之和是否已经超过回边计数器的阈值。当超过阈值之后，将会提交一个OSR编译请求，并且把回边计数器的值降低一些，以便继续在解释器中执行循环，等待编译器输出编译结果。</p>
<p>与方法计数器不同，回边计数器没有热度衰减的过程，因此这个计数器统计的就是该方法循环执行的绝对次数。当计数器溢出的时候，它还会把方法计数器的值也调整到溢出状态，这样下次再进入该方法的时候就会执行标准编译过程。</p>
<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>在默认设置下，无论是方法调用产生的即时编译请求，还是OSR编译请求，虚拟机在代码编译器还未完成的时候，都仍然按照解释方式继续执行，而编译动作则在后台的编译线程中进行。用户可以通过-XX:-BackgroundCompilation来禁止后台编译，在禁止后台编译后，一旦达到JIT的编译条件，执行线程向虚拟机提交编译请求后将会一直等待，直到编译过程完成后再开始执行编译器输出的本地代码。</p>
<p>对于Client Compiler（C1编译器）来说，它是一个简单快速的三段式编译，主要关注点在于局部性的优化，而放弃了许多耗时间长的全局优化手段。</p>
<p>对于Sever Compiler（C2编译器）来说，它则是专门面向服务端的典型应用并为服务端的性能配置特别调整过的编译器，也是一个充分优化过的高级编译器，几乎能达到GNU C++编译器使用-O2参数时的优化强度，它会执行所有经典的优化动作，如无用代码消除、循环展开、常量传播、基本块重排序等，还会实施一些与Java语言特性密切相关的优化技术，如范围检查消除、空值检查消除等，另外，还有可能根据解释器或Client Compiler提供的性能监控信息，进行一些不稳定的激进优化，如守护内联、分支频率预测等，下一部分将讲解上述的一部分优化手段。</p>
<p>Server Compiler从即时编译的标准来看，无疑是比较缓慢的，但它的编译速度依然远远超过传统的静态优化编译器，而且它相对于Client Compiler编译输出的代码质量有所提高，可以减少本地代码的执行时间，从而抵消了额外的编译时间开销，所以也有很多非服务端的应用选择使用Server模式的虚拟机运行。</p>
<h3 id="优化技术概览"><a href="#优化技术概览" class="headerlink" title="优化技术概览"></a>优化技术概览</h3><p>在Sun官方的Wiki上，HotSpot虚拟机设计团队列出了一个相对比较全面、在即时编译器中采用的优化技术列表，其中有不少经典编译器的优化手段，也有许多针对Java语言（准确地说是运行在Java虚拟机上得所有语言）本身进行的优化技术，下面主要看几项最有代表性的优化技术：</p>
<ul>
<li>语言无关的经典优化技术之一：公共子表达式消除</li>
<li>语言无关的经典优化技术之一：数组范围检查消除</li>
<li>最重要的优化技术之一：方法内联</li>
<li>最前沿的优化技术之一：逃逸分析</li>
</ul>
<h4 id="公共子表达式消除"><a href="#公共子表达式消除" class="headerlink" title="公共子表达式消除"></a>公共子表达式消除</h4><p>公共子表达式消除的含义是：如果一个个表达式E已经计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E的这次出现就成了公共子表达式。对于这种表达式，没有必要花时间再对它进行计算，只需要直接用前面的计算结果代替E就可以了。如果这种优化仅限于程序的基本块内，便称为局部公共子表达式消除，如果这种优化的范围涵盖了多个基本块，那就称为全局公共子表达式消除。下面举例说明：</p>
<pre><code>int d = (c * b) * 12 + a + (a + b * c);
</code></pre><p>如果这段代码交给javac编译器则不会进行任何优化，但进入虚拟机即时编译器后，它将会进行如下优化：<strong>编译器检测到“c*b”与“b*c”是一样的表达式，而且在计算期间b与c的值是不会变的。</strong>因此这条表达式就可能被视为：</p>
<pre><code>int d = E * 12 + a + (a + E)
</code></pre><p>还有可能进行代数简化：</p>
<pre><code>int d = E * 13 + a * 2
</code></pre><p>表达式进行交换之后，再计算起来就可以节省一些时间了。</p>
<h4 id="数组边界检查消除"><a href="#数组边界检查消除" class="headerlink" title="数组边界检查消除"></a>数组边界检查消除</h4><p>我们知道Java语言是一门动态安全的语言，对数组的读写访问也不像C、C++那样在本质上是裸指针操作。如果有一个数组foo[]，在Java语言中访问数组元素foo[i]的时候系统将会自动进行上下界的范围检查，即检查i必须满足i&gt;=0&amp;&amp;i&lt;foo.length这个条件，否则将抛出一个运行时异常：java.lang.ArrayIndexOutOfBoundsException。这对软件开发者来说是一件很好的事情，即时程序员没有专门编写防御代码，也可以避免大部分的溢出攻击。但是对于虚拟机的执行子系统来说，每次数组元素的读写都带有一次隐含的判定条件，对于拥有大量数组访问的程序代码，这无疑也是一种性能负担。</p>
<p>无论如何，为了安全，数组边界检查肯定是必须做的，但数组边界检查则不一定。例如：数组下标是一个常量，如foo[3]，只要在编译期根据数据流分析来确定foo.length的值，并判断下表“3”没有越界，执行的时候就无须判断了。更加常见的情况是数组访问发生在循环之中，如果编译器只要通过数据流分析就可以判定循环变量的取值范围永远在区间[0,foo.length])内，那在整个循环中就可以把数组的上下界检查消除，这可以节省很多次的条件判断操作。</p>
<h4 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h4><p>它是编译器最重要的优化手段之一，除了消除方法调用的成本之外，它更重要的意义是为其他优化手段建立良好的基础。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(obj!=<span class="keyword">null</span>) &#123;</div><div class="line">		System.out.println(<span class="string">"do something"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInline</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Object = <span class="keyword">null</span>;</div><div class="line">	foo(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>采用方法内联后大致成这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInline</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Object = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span>(obj!=<span class="keyword">null</span>) &#123;</div><div class="line">		System.out.println(<span class="string">"do something"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为有了方法内联的基础，这段代码还能被继续优化，删除不可能被执行的dead code。<br>只有<a href="http://sail-y.github.io/2016/11/15/JVM9/#方法调用" target="_blank" rel="external">非虚方法</a>才能直接内联，虚方法需要运行时确定调用目标，所以虚拟机还有一套“类型继承关系分析”的技术来确定目前已加载的类中，某个接口是否有多余一种的实现，某个类是否存在子类、子类是否为抽象类等信息。</p>
<h4 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h4><p>逃逸分析是目前Java虚拟机中比较前沿的优化技术，他与类型继承关系分析一样，并不是直接优化代码的手段，而是为其他优化手段提供依据的分析技术。逃逸分析的基本行为就是分析对象动态作用域。</p>
<blockquote>
<p>当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，称为方法逃逸。甚至还有可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</p>
</blockquote>
<p>如果能证明一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高校的优化。如下：</p>
<ul>
<li>栈上分配：Java虚拟机中，对象在堆上分配，Java堆中的对象对于各个线程都是共享可见的。虚拟机的垃圾收集系统可以回收堆中不再使用的对象，但回收动作无论是筛选可回收对象还是回收和整理内存都要耗费时间。如果确定一个对象不会逃逸出方法之外，那么让这个对象在栈上分配将会是一个不错的主意，对象所占用的内存空间就可以随着栈帧出栈而销毁，这样垃圾收集系统的压力将会小很多。</li>
<li>同步消除：线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉。</li>
<li>标量替换：标量是指一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型(int、long等)都不能进一步分解，它们就可以称为标量。相对的，如果一个数据可以继续分解那它就称作聚合量，Java中的对象就是最典型的聚合量。如果把一个Java对象拆散，根据程序访问的情况，将其使用到的成员变量恢复原始类型来访问就叫做标量替换。如果逃逸分析证明一个对象不会被外部访问，并且这个对象可以被拆散的话，那程序真正执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替。将对象拆分后除了可以让对象的成员变量在栈上分配和读写之外，还可以为后续进一步的优化手段创建条件。</li>
</ul>
<p>关于逃逸分析的论文在1999年就已经发表，但直到Sun SDK1.6才实现了逃逸分析，而且直到现在这项优化尚未足够成熟，仍有很大的改进余地。不成熟的原因主要是不能保证逃逸分析的性能收益必定高于它的消耗。虽然在实际测试结果中，实施逃逸分析后的程序往往能运行出不错的成绩，但是在实际的应用程序，尤其是大型程序中反而发现实施逃逸分析可能出现效果不稳定的情况，或因分析过程耗时但却无法有效判别出非逃逸对象而导致性能有所下降。</p>
<p>如果有需要，并且确认对程序运行有益，可以使用参数-XX:+DoEscapeAnalysis来手动开启逃逸分析，开启之后可以通过参数-XX:+PrintEscapeAnalysis来查看分析结果。有了逃逸分析支持之后，就可以使用参数-XX:+EliminateAllocations来开启标量替换，使用参数-XX:+EliminatLocks来开启同步消除，使用参数-XX:+PrintEliminateAllocations查看标量的替换情况。</p>
<p>尽管目前逃逸分析技术仍不是十分成熟，但是在今后的虚拟机中，逃逸分析技术肯定会支撑起一系列实用有效的优化技术。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM9-虚拟机字节码执行引擎]]></title>
      <url>/2016/11/15/JVM9/</url>
      <content type="html"><![CDATA[<p>执行引擎是Java虚拟机最核心的组成部分之一，本章将主要从概念模型的角度来讲解虚拟机的方法调用和字节码执行。</p>
<h2 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h2><p>栈帧（Stack Frame）是用于支持虚拟机进行方法代用和方法执行的数据结构，它是虚拟机运行时数据区中的<a href="http://sail-y.github.io/2016/10/28/JVM2/#Java虚拟机栈" target="_blank" rel="external">虚拟机栈</a>的栈元素。栈帧存储了局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程。对于执行引擎来说，在活动线程中，只有位于栈顶的栈帧才是有效的，称为当前栈帧，与这个栈帧相关联的方法称为当前方法，执行引擎运行的所有字节码指令都只针对当前栈帧进行操作，在概念模型上，典型的栈帧结构图如下：<br><a id="more"></a><br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/jvm-9-1.jpeg" alt=""></p>
<h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量表是一组变量值存储空间，用于存放<strong>参数</strong>和<strong>方法内部</strong>定义的局部变量。局部变量表的容量以变量槽（Slot）为最小单位。虚拟机规范中没有明确指明一个Slot应占用的内存空间大小，只是向导性的说到每个Slot都应该能存放一个boolean、byte、char、short、int、float、reference和returnAddress。reference表示对一个对象实例的引用，returnAddress目前很少见了。一个Slot可以存放一个32位以内的数据，那么64位的long和double会被分配两个连续的Slot空间。<br>实例方法第0位索引的Slot默认是用于传递方法所属对象实例的引用（this），然后从1开始是方法参数，参数表分配完后再是方法体内部的变量。<br>前面提到过，类变量在<strong>准备阶段</strong>会赋予系统初始值，<strong>初始化阶段</strong>赋予程序员定义的初始值，所以就算没有设值也会有一个默认值，但局部变量则不一样，没有设值变进行使用的话，编译无法通过。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a;</div><div class="line">	System.out.println(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><p>操作数栈也常称为操作栈，它是一个后入先出栈。操作数栈的每一个元素可以是任意的Java数据类型，包括long和double。32位的数据类型所占的栈容量为1，64为数据类型所占的栈容量为2。<br>当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。举个例子，整数加法的字节码指令iadd在运行的时候操作数栈中最接近栈顶的两个元素已经存入了两个int类型的数值，当执行这个指令时，会将这两个int值出栈并相加，然后将加的结果入栈。</p>
<h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。我们知道Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用作为参数。这些符号引用会在类加载阶段或者第一次使用的时候就转化为直接引用，这种转化称为<a href="http://sail-y.github.io/2016/11/07/JVM8/#解析" target="_blank" rel="external">静态解析</a>。另外一部分将在每一次运行期间转化为直接引用，这部分称为动态连接。</p>
<h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><p>当一个方法开始执行后，只有两种方式退出方法，要么遇到方法返回的字节码指令，要么是在方法执行过程中遇到了异常。无论哪种退出方式，在方法退出后，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。</p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>所有方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载解析阶段，会将其中一部分符号引用转化为直接引用，这个前提是调用目标在程序代码写好、编译器进行编译时必须确定下来。这类方法的调用称为解析（Resolution）。</p>
<p>在Java语言符合“编译期可知，运行期不可变”的方法主要包括静态方法和私有方法。</p>
<p>调用方法的虚拟机字节码指令：</p>
<ul>
<li>invokestatic：调用静态方法</li>
<li>invokespecial：调用实例构造器<init>方法、私有方法和父类方法</init></li>
<li>invokevirtual：调用所有的虚方法</li>
<li>invokeinterface：调用接口方法，会在运行时再确定一个实现此接口的对象</li>
<li>invokedynamic：先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法，在此之前的4条调用指令，分派逻辑是固化在Java虚拟机内部的，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li>
</ul>
<p>能被invokestatic和invokespecial指令调用的方法，能在解析阶段把符号引用转化为直接引用，这些方法称为非虚方法，其他方法称为虚方法（final除外）。被final修饰的虽然是用invokevirtual调用的，但是它是一个非虚方法。</p>
<h3 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h3><p>分派调用可能是静态的也可能是动态的，又可分为单分派和多分派。</p>
<h4 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h4><p>先上一段代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/16 上午11:14.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 静态分派演示</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDispatch</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Human guy)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello, guy"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Woman guy)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello, lady"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Man guy)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello, gentleman"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Human man = <span class="keyword">new</span> Man();</div><div class="line">        Human woman = <span class="keyword">new</span> Woman();</div><div class="line">        StaticDispatch sd = <span class="keyword">new</span> StaticDispatch();</div><div class="line">        sd.sayHello(man);</div><div class="line">        sd.sayHello(woman);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello, guy</div><div class="line">hello, guy</div></pre></td></tr></table></figure>
<p>很简单，下面从虚拟机的角度来讲解一下。</p>
<pre><code>Human man = new Man();
</code></pre><p>上面的“Human”称为变量的静态类型（Static Type），后面的“Man”称为变量的实际类型（Actual Type）。静态类型在编译期是可知的，实际类型变化的结果在运行期才可确定。<strong>虚拟机（编译器）在重载时是通过参数的静态类型而不是实际类型作为判定依据的</strong>，所以选了sayHello(Human)作为调用目标，并把这个方法的符号引用写到main()方法里的两条invokevirtual指令的参数中。</p>
<p>所有依赖<strong>静态类型</strong>来定位方法执行版本的分派动作称为静态分派。</p>
<h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><p>动态分派和多态的重写有着密切的关联。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/16 下午3:25.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 方法动态分派演示</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDispatch</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"man say hello"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"woman say hello"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Human man = <span class="keyword">new</span> Man();</div><div class="line">        Human woman = <span class="keyword">new</span> Woman();</div><div class="line">        man.sayHello();</div><div class="line">        woman.sayHello();</div><div class="line">        man = <span class="keyword">new</span> Woman();</div><div class="line">        man.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">man say hello</div><div class="line">woman say hello</div><div class="line">woman say hello</div></pre></td></tr></table></figure>
<p>我们用javap -c 命令看看输出结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">     0: new           #2                  // class polymorphic/DynamicDispatch$Man</div><div class="line">     3: dup</div><div class="line">     4: invokespecial #3                  // Method polymorphic/DynamicDispatch$Man.&quot;&lt;init&gt;&quot;:()V</div><div class="line">     7: astore_1</div><div class="line">     8: new           #4                  // class polymorphic/DynamicDispatch$Woman</div><div class="line">    11: dup</div><div class="line">    12: invokespecial #5                  // Method polymorphic/DynamicDispatch$Woman.&quot;&lt;init&gt;&quot;:()V</div><div class="line">    15: astore_2</div><div class="line">    16: aload_1</div><div class="line">    17: invokevirtual #6                  // Method polymorphic/DynamicDispatch$Human.sayHello:()V</div><div class="line">    20: aload_2</div><div class="line">    21: invokevirtual #6                  // Method polymorphic/DynamicDispatch$Human.sayHello:()V</div><div class="line">    24: new           #4                  // class polymorphic/DynamicDispatch$Woman</div><div class="line">    27: dup</div><div class="line">    28: invokespecial #5                  // Method polymorphic/DynamicDispatch$Woman.&quot;&lt;init&gt;&quot;:()V</div><div class="line">    31: astore_1</div><div class="line">    32: aload_1</div><div class="line">    33: invokevirtual #6                  // Method polymorphic/DynamicDispatch$Human.sayHello:()V</div><div class="line">    36: return</div></pre></td></tr></table></figure>
<p>0~15行的字节码是准备动作，作用是建立man和woman的内存空间、调用Man和Woman类型的实例构造器，将这两个实例的引用存放在第1、2个局部变量Slot之中，这个动作对应了这两句代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Human man = <span class="keyword">new</span> Man();</div><div class="line">Human woman = <span class="keyword">new</span> Woman();</div></pre></td></tr></table></figure>
<p>然后16~21行是关键。16: aload_1和20: aload_2两句分别将两个对象压入栈顶，17和21的invokevirtual就是调用方法指令，后面的是参数（方法的符号引用）。那么多态如何确定执行的目标方法，下面说一下invokevirtual指令的运行时解析过程：</p>
<ol>
<li>找到操作数栈的第一个元素所指向的对象的实际类型，记作C。</li>
<li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError异常。</li>
<li>否则，按照继承关系从下往上一次对C的各个父类进行第2步的搜索和验证过程。</li>
<li>如果始终没有找到合适的方法，则抛出java.lang.AbstracMethodError异常。</li>
</ol>
<p>由于invokevirtual指令执行的第一步就是在运行期确定接收者的实际类型，所以两次调用中的invokevirtual指令把常量池中的类方法符号引用解析到了不同的直接引用上，这个过程就是Java语言中方法重写的本质。我们把这种在运行期根据实际类型确定方法执行版本的过程称为动态分派。</p>
<h3 id="单分派与多分派"><a href="#单分派与多分派" class="headerlink" title="单分派与多分派"></a>单分派与多分派</h3><p>方法的接收者与方法的参数统称为方法的宗量。根据分派基于多少种宗量，可以将分派划分为单分派和多分派两种。单分派是根据一个宗量对目标方法进行选择，多分派则是根据多于一个宗量对目标方法进行选择。<br>看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/16 下午5:07.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 单分派、多分派演示</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatch</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">QQ</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">_360</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(QQ arg)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"father choose qq"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(_360 arg)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"father choose 360"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(QQ arg)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"son choose qq"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(_360 arg)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"son choose 360"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Father father = <span class="keyword">new</span> Father();</div><div class="line">        Father son = <span class="keyword">new</span> Son();</div><div class="line">        father.hardChoice(<span class="keyword">new</span> _360());</div><div class="line">        son.hardChoice(<span class="keyword">new</span> QQ());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">father choose 360</div><div class="line">son choose qq</div></pre></td></tr></table></figure>
<p>编译阶段，也就是静态分派的过程，先确定静态类型是Father还是Son，再确定参数是QQ还是360，因为是根据两个宗量进行选择，所以Java语言的静态分派是多分派类型。</p>
<p>运行阶段，也就是动态分派的过程，在执行“son.hardChoice(new QQ());”对应的invokevirtual指令时，由于编译期已决定目标方法的签名必须为hardChoice(QQ),所以只需要确定方法接收者的实际类型是Father还是Son。因为只有一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM8-类加载机制]]></title>
      <url>/2016/11/07/JVM8/</url>
      <content type="html"><![CDATA[<h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>
<h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类被夹在到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用、卸载7个阶段。其中验证、准备、解析3个部分统称为连接，这个阶段的发生顺序如下图所示：<br><a id="more"></a><br><img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150928194629980-1976916805.png" alt=""></p>
<p>图中加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。</p>
<p>虚拟机规定了5种主动引用必然会触发<strong>初始化</strong>（加载、验证、准备在此之前开始）</p>
<ul>
<li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时。这4条指令的Java代码场景是：使用new关键字实例化对象，读取或设置一个类的静态字段（被final修饰，已在编译期放入常量池的除外），调用一个类的静态方法。</li>
<li>使用java.lang.reflect反射调用的时候，如果类还没有初始化，则需要先初始化</li>
<li>父类未初始化，则先初始化一个类的父类</li>
<li>虚拟机启动的时候会先初始化执行的主类（包含main的类）</li>
<li>当使用JDK1.7的动态语言支持时，如果一个java.lang.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>
</ul>
<p>除了这些主动引用，其他引用类都不会触发初始化，称为被动引用。例如通过子类引用父类的静态字段，不会触发子类初始化。</p>
<h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>下面分别介绍一下加载、验证、准备、解析和初始化这5个阶段所执行的具体动作。</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>“加载”是“类加载”过程的一个阶段，在加载阶段，虚拟机需要完成3件事情：</p>
<ul>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<ol>
<li>文件格式验证<br> 第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，验证通过后，才会存入方法区。例如<ul>
<li>是否以魔数0xCAFEBABE开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量中是否有不被支持的常量类型</li>
</ul>
</li>
<li>元数据验证<br> 第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范，例如<ul>
<li>是否有父类</li>
<li>是否继承了不允许继承的类(被final修饰的类)</li>
<li>如果这个类不是抽象类，是否实现了父类或接口中要求实现的方法</li>
</ul>
</li>
<li>字节码验证<br> 第三阶段目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。例如：在操作栈上放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。</li>
<li>符号引用验证<br> 最后一个阶段的校验发生再虚拟机将符号引用转换为直接引用的时候，这个转化动作将在连接的第三个阶段-解析阶段发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验，例如符号引用中通过字符串描述的全限定名是否能找到对应的类，在指定类中是否存在符合方法的字段描述以及简单名称所描述的方法和字段等等。</li>
</ol>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中分配。这个时候进行内存分配仅包括类变量（static），而不包括实例变量。注意初始值是指分配零值</p>
<pre><code>public static int value = 123;
</code></pre><p>变量value在准备阶段过后的初始值是0而不是123，因为这时候尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。<br><strong>加了final的常量除外，这个放在方法区常量池中的数据将会在准备阶段被赋值</strong></clinit></p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。<a href="http://sail-y.github.io/2016/11/04/JVM7/#ref" target="_blank" rel="external">符号引用</a>就是那些我们用javap命令看到的Methodref，Fieldref一类的。<br>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。<br>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。初始化阶段就是执行类构造器<clinit>()方法的过程。<clinit>()方法就是由编译器收集类中所有的类变量的赋值动作和静态语句（static{}块）。</clinit></clinit></p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类加载阶段。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其再Java虚拟机中的唯一性。意思就是比较两个类相等的前提是这两个类由同一个类加载器加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/15 下午3:37.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  相等是指类的.class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括使用instanceof关键字做对象所属关系判定等情况。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</div><div class="line">        ClassLoader myLoader = <span class="keyword">new</span> ClassLoader() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String fileName = name.substring(name.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>) + <span class="string">".class"</span>;</div><div class="line">                    InputStream is = getClass().getResourceAsStream(fileName);</div><div class="line">                    <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line"></div><div class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</div><div class="line">                    is.read(b);</div><div class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Object obj = myLoader.loadClass(<span class="string">"clazzloader.ClassLoaderTest"</span>).newInstance();</div><div class="line">        System.out.println(obj.getClass());</div><div class="line">        System.out.println(obj <span class="keyword">instanceof</span> ClassLoader);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class clazzloader.ClassLoaderTest</div><div class="line">false</div></pre></td></tr></table></figure>
<h3 id="双亲委派模型（重要）"><a href="#双亲委派模型（重要）" class="headerlink" title="双亲委派模型（重要）"></a>双亲委派模型（重要）</h3><p>从Java虚拟机的角度来将，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用C++语言实现，是虚拟机自身的一部分；另一种就是其他的类加载器，这些类加载器由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。从开发人员角度来看，还可以划分得更细致一些：</p>
<ul>
<li>启动类加载器<br>前面介绍过，它负责加载的是JAVA_HOME/lib下的类库，系统类加载器无法被Java程序直接应用。</li>
<li>扩展类加载器<br>这个类加载器由sun.misc.Launcher$ExtClassLoader实现，它负责用于加载JAVA_HOME/lib/ext目录中的，或者被java.ext.dirs系统变量指定所指定的路径中所有类库，开发者可以直接使用扩展类加载器。</li>
<li>应用程序类加载器<br>这个类加载器由sun.misc.Launcher$AppClassLoader实现。这个类加载器是ClassLoader.getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150928224102605-1436171001.png" alt=""></p>
<p>这个图展示的类加载器之间的这种层次关系，称为双亲委派模型。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不会以继承的关系来实现，而是都使用组合关系来复用父加载器代码。</p>
<p>双亲委派模型的工作过程是:<strong>如果一个类加载器收到了类加载请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</strong><br>这样做能保证一个类始终是被同一个类加载器加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/15 下午4:17.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 我们可以打印一下各种加载器看看是否复合图上描述</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Loader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 应用程序类加载器</span></div><div class="line">        System.out.println(ClassLoader.getSystemClassLoader());</div><div class="line">        <span class="comment">// 扩展类加载器</span></div><div class="line">        System.out.println(ClassLoader.getSystemClassLoader().getParent());</div><div class="line">        <span class="comment">// 启动类加载器</span></div><div class="line">        System.out.println(ClassLoader.getSystemClassLoader().getParent().getParent());</div><div class="line">        <span class="comment">// 应用程序类加载器加载的路径</span></div><div class="line">        System.out.println(System.getProperty(<span class="string">"java.class.path"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sun.misc.Launcher$AppClassLoader@330bedb4</div><div class="line">sun.misc.Launcher$ExtClassLoader@5cad8086</div><div class="line">null</div><div class="line">/Users/xiaomai/code/IdeaProjects/jvm/out/production/jvm:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar</div></pre></td></tr></table></figure>
<p>这里说到一个实践，就是有时候我们想覆盖第三方jar包中的某个类，除了替换jar包中的class文件的方式，还可以直接在项目中编写一个一样包名的类。上面打印在前面的<code>/Users/xiaomai/code/IdeaProjects/jvm/out/production/jvm</code>（相当于web项目里WEB-INF下的class文件夹）目录下的class会优先于第三方jar包中的class加载。但是却没有办法写一个同样包名的类来覆盖lib和ext下面的库的类。<br>上面的null，表示ClassLoader就是Bootstrap ClassLoader。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM7-类文件结构]]></title>
      <url>/2016/11/04/JVM7/</url>
      <content type="html"><![CDATA[<h2 id="Class类文件结构"><a href="#Class类文件结构" class="headerlink" title="Class类文件结构"></a>Class类文件结构</h2><p>本章说一下Java编译后的class文件结构。</p>
<h3 id="魔数与Class文件的版本"><a href="#魔数与Class文件的版本" class="headerlink" title="魔数与Class文件的版本"></a>魔数与Class文件的版本</h3><p><img src="http://7xs4nh.com1.z0.glb.clouddn.com/jvm7.png" alt=""><br>我这里用sublime打开一个class文件，看到前面4个字节是十六进制0xCAFEBABE,这个是Class文件的魔数.</p>
<blockquote>
<p>很多文件存储标准中都使用魔数进行身份识别，因为扩展名可以更改，魔数就是确定这个文件是否为一个能被虚拟机接受的Class文件。</p>
</blockquote>
<p>然后看0000 0034，转换成十进制是52，这个表示Java编译的版本号，相信大家在工作中也遇见过<code>Unsupported major.minor version 52.0</code>之类的错误，指的就是这个版本号，52对应的是JDK8。<br><a id="more"></a></p>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>再后面的就是常量池，常量池可以理解为Class文件之中的资源仓库，我们前面提到过，Java运行时内存区域里有一块方法区，方法区里面有一个运行时常量池，Class文件的这部分数据，会在运行时被加载到方法区的运行时常量池中。<br>常量池中主要存放两大类常量：<strong>字面量</strong>和<strong>符号引用</strong>。『字面量』比较接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值等。而『符号引用』则属于编译原理方面的概念，包括了下面三类常量：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>先放一段代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> m + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们用<code>javap</code>命令来看一下编译后的class文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">~ javap -verbose TestClass</div><div class="line">Compiled from &quot;TestClass.java&quot;</div><div class="line">public class clazz.TestClass</div><div class="line">  minor version: 0</div><div class="line">  major version: 52</div><div class="line">  flags: ACC\_PUBLIC, ACC\_SUPER</div><div class="line">Constant pool:</div><div class="line">   #1 = Methodref          #4.#18         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">   #2 = Fieldref           #3.#19         // clazz/TestClass.m:I</div><div class="line">   #3 = Class              #20            // clazz/TestClass</div><div class="line">   #4 = Class              #21            // java/lang/Object</div><div class="line">   #5 = Utf8               m</div><div class="line">   #6 = Utf8               I</div><div class="line">   #7 = Utf8               &lt;init&gt;</div><div class="line">   #8 = Utf8               ()V</div><div class="line">   #9 = Utf8               Code</div><div class="line">  #10 = Utf8               LineNumberTable</div><div class="line">  #11 = Utf8               LocalVariableTable</div><div class="line">  #12 = Utf8               this</div><div class="line">  #13 = Utf8               Lclazz/TestClass;</div><div class="line">  #14 = Utf8               inc</div><div class="line">  #15 = Utf8               ()I</div><div class="line">  #16 = Utf8               SourceFile</div><div class="line">  #17 = Utf8               TestClass.java</div><div class="line">  #18 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</div><div class="line">  #19 = NameAndType        #5:#6          // m:I</div><div class="line">  #20 = Utf8               clazz/TestClass</div><div class="line">  #21 = Utf8               java/lang/Object</div><div class="line">&#123;</div><div class="line">  public clazz.TestClass();</div><div class="line">    descriptor: ()V</div><div class="line">    flags: ACC\_PUBLIC</div><div class="line">    Code:</div><div class="line">      stack=1, locals=1, args\_size=1</div><div class="line">         0: aload\_0</div><div class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">         4: return</div><div class="line">      LineNumberTable:</div><div class="line">        line 11: 0</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">            0       5     0  this   Lclazz/TestClass;</div><div class="line"></div><div class="line">  public int inc();</div><div class="line">    descriptor: ()I</div><div class="line">    flags: ACC\_PUBLIC</div><div class="line">    Code:</div><div class="line">      stack=2, locals=1, args\_size=1</div><div class="line">         0: aload\_0</div><div class="line">         1: getfield      #2                  // Field m:I</div><div class="line">         4: iconst\_1</div><div class="line">         5: iadd</div><div class="line">         6: ireturn</div><div class="line">      LineNumberTable:</div><div class="line">        line 15: 0</div><div class="line">      LocalVariableTable:</div><div class="line">        Start  Length  Slot  Name   Signature</div><div class="line">            0       7     0  this   Lclazz/TestClass;</div><div class="line">&#125;</div><div class="line">SourceFile: &quot;TestClass.java&quot;</div></pre></td></tr></table></figure>
<p><a name="ref"></a><br>看看常量池里的内容：</p>
<p><code>Utf8</code>就是UTF-8编码的字符串，<code>Class</code>、<code>Methodref</code>和<code>Fieldref</code>则是符号引用。符号引用后面的编号最终也指向了字符串表示他们的值。</p>
<h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><p>常量池结束后，紧接着2个字节代表访问标志(access_flag)。包括这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final。上面的flags中的值是flags: ACC_PUBLIC, ACC_SUPER表示这个类是public的。</p>
<!--### 类索引、父类引用与接口索引集合
Class文件中由这三项数据来确定这个类的集成关系。3个2字节无符号数表示，本例中索引指向#3和#4
### 字段表集合
字段表（field\_info）用于描述借口或者类中声明的变量。
-->
<h3 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h3><p>这里说一下方法和字段的描述符。<br>基本类型是取首字母的大写基本上。例如byte就是B,有3个特殊的，long是J，boolean是Z，V是void。<br>L表示对象（例如Ljava/lang/String）。对数组而言，每一维度将使用一个前置的“[”字符来描述。            </p>
<blockquote>
<p>如定义一个为“java.lang.String[][]”类型的二维数组，将被记录为“[[Ljava/lang/String”。</p>
</blockquote>
<p>描述方法的时候，是先参数列表，后返回值。参数列表在小括号“()”内。例如<code>()V</code>表示0个参数，返回值为void，<code>int test(int[] i, char c)</code>的描述符为<code>([IC)I</code>。</p>
<h2 id="字节码指令集"><a href="#字节码指令集" class="headerlink" title="字节码指令集"></a>字节码指令集</h2><p>aload_0、iconst_1之类的都是字节码指令，下面将字节码操作按用途分为9类，按照分类介绍一下。</p>
<h3 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h3><p>加载和存储指令用于将数据在栈帧中的局部变量表和<a href="http://sail-y.github.io/2016/10/28/JVM2/#Java虚拟机栈" target="_blank" rel="external">操作数栈</a>之间来回传输：</p>
<ul>
<li>将一个局部变量加载到操作栈：iload、iload_<n>、lload、lload_<n>、fload、fload_<n>、dload、dload_<n>、aload、aload_<n></n></n></n></n></n></li>
<li>将一个数字从操作数栈存储到局部变量表：istore、istore_<n>、lstore、lstore_<n>、fstore、fstore_<n>、dstore、dstore_<n>、astore、astore_<n></n></n></n></n></n></li>
<li>将一个常量加载到操作栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_<i>、lconst_<l>、fconst_<f>、dconst_<d></d></f></l></i></li>
<li>扩充局部变量表的访问索引的指令：wide。</li>
</ul>
<p>存储数据的操作数栈和局部变量表主要就是由加载和存储指令进行操作，除此之外，还有少量指令，如访问对象的字段或数组元素的指令也会向操作数栈传输数据。上面有尖括号的表示一组指令（例如iload_<n>，就代表了iload_0、iload<br>_1、iload_2、iload_3），iload_0也等价于iload 0。</n></p>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><p>运算或算术指令用于堆两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。大体上算术指令可以分为两种：对整型数据进行运算的指令与堆浮点型数据进行运算的指令，无论是哪种算术指令，都使用Java虚拟机的数据类型，由于没有直接支持byte、short、char和boolean类型的算术指令，对于这类数据的运算，应使用操作int类型的指令代替。</p>
<ul>
<li>加法指令：iadd、ladd、fadd、dadd</li>
<li>减法指令：isub、lsub、fsub、dsub</li>
<li>乘法指令：imul、lmul、fmul、dmul</li>
<li>除法指令：idiv、ldiv、fdiv、ddiv</li>
<li>求余指令：irem、lrem、frem、drem</li>
<li>取反指令：inge、lneg、fneg、dneg</li>
<li>位移指令：ishl、ishr、iushr、lshl、lshr、lushr</li>
<li>按位或指令：ior、lor</li>
<li>按位与指令：iand、land</li>
<li>按位异或指令：ixor、lxor</li>
<li>局部变量自增指令：iinc</li>
<li>比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp</li>
</ul>
<h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><p>类型转换指令可以将两种不同的数值类型进行相互转换，这些转换操作一般用于实现用户代码中的显式类型转换操作，或者用于处理字节指令集中数据类型相关指令无法与数据类型一一对应的问题。<br>以下是宽化类型转换，Java虚拟机直接支持，无需指令：</p>
<ul>
<li>int类型到long、float或者double类型</li>
<li>long类型到float、double类型</li>
<li>float类型到double类型</li>
</ul>
<p>窄化类型指令包括：i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l、和d2f。窄化类型转换可能导致不同的正负号、不同的数量级以及精度丢失的情况。</p>
<h3 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h3><ul>
<li>创建类实例的指令：new</li>
<li>创建数组的指令：newarray、anewarray、multianewarray</li>
<li>访问类字段和实例字段的指令：getfield、putfield、getstatic、putstatic</li>
<li>把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、daload、aaload</li>
<li>将一个操作数栈的值存储到数组元素中的指令：bastore、castore、sastore、iastore、fastore、dastore、aastore</li>
<li>取数组长度的指令：arraylength</li>
<li>检查类实例类型的指令：instanceof、checkcast</li>
</ul>
<h3 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h3><ul>
<li>将操作数的组合暂定一个或两个元素出栈：pop、pop2</li>
<li>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、dup_x2、dup_x2、dup2_x2</li>
<li>将栈最顶端的两个数值互换：swap</li>
</ul>
<h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><ul>
<li>条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq、和if_acmpne</li>
<li>复合条件分支：tableswitch、lookupswitch</li>
<li>无条件分支：goto、goto_w、jsr、jsr_w、ret</li>
</ul>
<h3 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h3><ul>
<li>invokevirtual调用对象的实例方法</li>
<li>invokeinterface调用接口方法</li>
<li>invokespecial调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法</li>
<li>invokestatic调用类方法</li>
<li>invokedynamic指令用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法</li>
</ul>
<h3 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h3><p>throw语句由athrow指令实现，而catch语句不是由字节码来实现的，采用异常表来实现。</p>
<h3 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h3><p>同步一段指令集序列在Java语言中是由synchronized语句块来表示的，在Java虚拟机的指令集中由monitorenter和monitorexit两条指令来支持。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM6-虚拟机性能监控与故障处理工具]]></title>
      <url>/2016/11/02/JVM6/</url>
      <content type="html"><![CDATA[<p>给一个系统定位问题的时候，知识、经验是关键基础，数据是依据，工具是运用知识处理数据的手段。这里说的数据包括：运行日志、异常堆栈、GC日志、线程快照(threaddump/javacore文件)、堆转储快照(heapdump/hprof文件)等。经常使用适当的虚拟机监控和分析的工具可以加快我们分析数据、定位问题的速度。</p>
<h2 id="JDK的命令行工具"><a href="#JDK的命令行工具" class="headerlink" title="JDK的命令行工具"></a>JDK的命令行工具</h2><p>JDK的安装目录bin下提供了很多工具，这些工具其实是jdk/lib/tools.jar的包装而已。</p>
<h3 id="jps：虚拟机进城状况工具"><a href="#jps：虚拟机进城状况工具" class="headerlink" title="jps：虚拟机进城状况工具"></a>jps：虚拟机进城状况工具</h3><p>jps(JVM Process Status Tool):可以列出正在运行的虚拟机进城，并显示虚拟机执行主类以及这些进城的本地虚拟机唯一ID(Local Virtual Machine IIdentifier, LVMID)，这个LVMID跟系统里的PID是一致的。<br><a id="more"></a><br>jps命令格式：</p>
<pre><code>jsp [ options ] [ hostid ]
</code></pre><p>jps执行样例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~ jps <span class="_">-l</span></div><div class="line">772 </div><div class="line">15944 sun.tools.jps.Jps</div><div class="line">15547 org.jetbrains.jps.cmdline.Launcher</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-q</td>
<td style="text-align:left">只输出LVMID，省略主类的名称</td>
</tr>
<tr>
<td style="text-align:center">-m</td>
<td style="text-align:left">输出虚拟机进程启动时传递给主类main()函数的参数</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td style="text-align:left">输出主类的全名，如果进城执行的是Jar包，输出Jar包路径</td>
</tr>
<tr>
<td style="text-align:center">-v</td>
<td style="text-align:left">输出虚拟机进城启动时JVM参数</td>
</tr>
</tbody>
</table>
<h3 id="jstat：虚拟机统计信息监视工具"><a href="#jstat：虚拟机统计信息监视工具" class="headerlink" title="jstat：虚拟机统计信息监视工具"></a>jstat：虚拟机统计信息监视工具</h3><p>jstat(JVM Statistics Monitoring Tool)是用于监视虚拟机各种运行状态的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾手机、JIT编译等运行数据。</p>
<p>jstat命令格式为：</p>
<pre><code>jstat [ option vmid [ interval [ s | ms ] [ count ] ] ]
</code></pre><p>对本机来说<code>vmid</code>就是<code>LVMID</code>。interval和count表示间隔和次数，省略表示只查询1次。</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-class</td>
<td style="text-align:left">监视类装载、卸载数量、总空间以及类装载所耗费的时间</td>
</tr>
<tr>
<td style="text-align:center">-gc</td>
<td style="text-align:left">监视Java堆状况，包括Eden区、两个Survivor区、、老年代、永久带等的容量、已用空间、GC时间合计等信息</td>
</tr>
<tr>
<td style="text-align:center">-gccapacity</td>
<td style="text-align:left">监视内容基本与-gc相同，但输出主要关注Java堆各个区域使用到的最大、最小空间</td>
</tr>
<tr>
<td style="text-align:center">-gccause</td>
<td style="text-align:left">与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>
</tr>
<tr>
<td style="text-align:center">-gcnew</td>
<td style="text-align:left">监视新生代GC状况</td>
</tr>
<tr>
<td style="text-align:center">-gcnewcapacity</td>
<td style="text-align:left">监视内容基本与-gcnew相同，但输出主要关注使用到的最大、最小空间</td>
</tr>
<tr>
<td style="text-align:center">-gcold</td>
<td style="text-align:left">监视老年代GC状况</td>
</tr>
<tr>
<td style="text-align:center">-gcoldcapacity</td>
<td style="text-align:left">监视内容基本与-gcold相同，但输出主要关注使用到的最大、最小空间</td>
</tr>
<tr>
<td style="text-align:center">-gcpermcapacity</td>
<td style="text-align:left">输出永久代使用到的最大、最小空间</td>
</tr>
<tr>
<td style="text-align:center">-compiler</td>
<td style="text-align:left">输出JIT编译器编译过的方法、耗时等信息</td>
</tr>
<tr>
<td style="text-align:center">-printcompilation</td>
<td style="text-align:left">输出已经被JIT编译的方法</td>
</tr>
</tbody>
</table>
<p>jstat执行样例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~ jstat -gcutil 15547 1000 3</div><div class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </div><div class="line"> 74.83   0.00   2.40   0.09  98.65  95.48      2    0.013     0    0.000    0.013</div><div class="line"> 74.83   0.00   2.40   0.09  98.65  95.48      2    0.013     0    0.000    0.013</div><div class="line"> 74.83   0.00   2.40   0.09  98.65  95.48      2    0.013     0    0.000    0.013</div></pre></td></tr></table></figure>
<p>这里就是每隔1000毫秒，一共执行3次，查询LVMID为15547的gcutil信息。<br>显示空间占用总空间的百分比，S0和S1就是2个Survivor区，E是Eden，O是Old老年代，M表示MetaSpace(JDK8中的元数据区)。YGC(Young GC)和FGC(Full GC)显示的是GC的次数。FGCT和GCT是时间，</p>
<h3 id="jinfo：Java配置信息工具"><a href="#jinfo：Java配置信息工具" class="headerlink" title="jinfo：Java配置信息工具"></a>jinfo：Java配置信息工具</h3><p>jinfo(Configuration Info for Java)的作用是实时地查看和调整虚拟机各项参数。使用jps命令的-v可以查看虚拟机启动时显式指定的参数列表，但如果想知道未被显式指定的参数的系统默认值，可以使用jinfo的<code>-flag</code>选项进行查询，jinfo还可以使用<code>-sysprops</code>选项把虚拟机进程的<code>System.getProperties()</code>的内容打印出来，它还有在运行期修改虚拟机参数的能力。<br>jinfo命令格式：</p>
<pre><code>jinfo [ option ] pid
</code></pre><p>执行样例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ jinfo -flag CMSInitiatingOccupancyFraction 15547 </div><div class="line">-XX:CMSInitiatingOccupancyFraction=-1</div></pre></td></tr></table></figure>
<blockquote>
<p>注意jinfo对windows只提供了-flag选项</p>
</blockquote>
<h3 id="jmap：Java内存映射工具"><a href="#jmap：Java内存映射工具" class="headerlink" title="jmap：Java内存映射工具"></a>jmap：Java内存映射工具</h3><p>jmap(Memory Map for Java)命令用于声称堆转储快照（一般称为heapdump或dump文件）。不用命令要想获取Java堆转储快照，可以使用“-XX:+HeapDumpOnOutOfMemoryError”参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，Linux命令下可以通过kill -3发送进程退出信号也能拿到dump文件。</p>
<p>jmap的作用并不仅仅是为了获取dump文件，它还可以查询finalize执行队列、Java堆和永久代的详细信息，如空间使用率、当前使用的是哪种收集器等。和jinfo一样，jmap有不少功能在Windows平台下也是受限制的，除了生成dump文件的-dump选项和用于查看每个类的实例、空间占用统计的-histo选项在所有操作系统都提供之外，其余选项都只能在Linux和Solaris系统下使用。</p>
<p>jmap命令格式：</p>
<pre><code>jmap [ option ] vmid
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-dump</td>
<td style="text-align:left">生成Java堆转储快照。格式为-dump:[live, ]format=b,file=<filename>，其中live自参数说明是否只dump出存活的对象</filename></td>
</tr>
<tr>
<td style="text-align:center">-finalizerinfo</td>
<td style="text-align:left">显示在F-Queue中等待Finalizer线程执行finalize方法的对象。只在Linux和Solaris系统下有效</td>
</tr>
<tr>
<td style="text-align:center">-heap</td>
<td style="text-align:left">显示Java堆详细信息，如使用哪种收集器、参数配置、分代状况等。只在Linux和Solaris系统下有效</td>
</tr>
<tr>
<td style="text-align:center">-histo</td>
<td style="text-align:left">显示堆中对象统计信息，包括类、实例数量、合计容量</td>
</tr>
<tr>
<td style="text-align:center">-permstat</td>
<td style="text-align:left">以ClassLoader为统计口径显示永久代内存状态。只在Linux和Solaris系统下有效</td>
</tr>
<tr>
<td style="text-align:center">-F</td>
<td style="text-align:left">当虚拟机进行对-dump选项没有响应时，可使用这个选项强制生成dump快照。只在Linux和Solaris系统下有效</td>
</tr>
</tbody>
</table>
<p>jmap生成dump文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~ jmap -dump:format=b,file=idea.bin 15547</div><div class="line">Dumping heap to /Users/xiaomai/idea.bin ...</div><div class="line">Heap dump file created</div></pre></td></tr></table></figure>
<h3 id="jhat：虚拟机堆转储快照分析工具"><a href="#jhat：虚拟机堆转储快照分析工具" class="headerlink" title="jhat：虚拟机堆转储快照分析工具"></a>jhat：虚拟机堆转储快照分析工具</h3><p>jhat(JVM Heap Analysis Tool)是与jmap搭配使用的。实际工作中很少用到，比较简陋。分析一下刚才生成的dump文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">~ jhat idea.bin</div><div class="line">Reading from idea.bin...</div><div class="line">Dump file created Wed Nov 02 16:55:47 CST 2016</div><div class="line">Snapshot <span class="built_in">read</span>, resolving...</div><div class="line">Resolving 63292 objects...</div><div class="line">Chasing references, expect 12 dots............</div><div class="line">Eliminating duplicate references............</div><div class="line">Snapshot resolved.</div><div class="line">Started HTTP server on port 7000</div><div class="line">Server is ready.</div></pre></td></tr></table></figure>
<p><img src="http://7xs4nh.com1.z0.glb.clouddn.com/8E34846A-29FF-4342-A1DE-81817C327574.png" alt=""></p>
<h3 id="jstack：Java堆栈跟踪工具"><a href="#jstack：Java堆栈跟踪工具" class="headerlink" title="jstack：Java堆栈跟踪工具"></a>jstack：Java堆栈跟踪工具</h3><p>jstack(Sstack Trace for Java)命令用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)。『线程快照』就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程死锁、死循环、请求外部资源导致的长时间等待。</p>
<pre><code>jstack [ option ] vmid
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-F</td>
<td style="text-align:left">当正常输出的请求不被响应时，强制输出线程堆栈</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td style="text-align:left">除堆栈外，显示关于锁的附加信息</td>
</tr>
<tr>
<td style="text-align:center">-m</td>
<td style="text-align:left">如果调用到本地方法的时候，可以显示C/C++的堆栈</td>
</tr>
</tbody>
</table>
<p>下面展示部分输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">~ jstack <span class="_">-l</span> 15547</div><div class="line">2016-11-02 17:36:52</div><div class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.31-b07 mixed mode):</div><div class="line"></div><div class="line"><span class="string">"Attach Listener"</span> <span class="comment">#13 daemon prio=9 os_prio=31 tid=0x00007f9492316000 nid=0x3f0b waiting on condition [0x0000000000000000]</span></div><div class="line">   java.lang.Thread.State: RUNNABLE</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line"></div><div class="line"><span class="string">"NettythreadDeathWatcher-2-1"</span> <span class="comment">#12 daemon prio=1 os_prio=31 tid=0x00007f9491346800 nid=0x5103 waiting on condition [0x00007000061e2000]</span></div><div class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</div><div class="line">	at java.lang.Thread.sleep(Native Method)</div><div class="line">	at io.netty.util.ThreadDeathWatcher<span class="variable">$Watcher</span>.run(ThreadDeathWatcher.java:147)</div><div class="line">	at io.netty.util.concurrent.DefaultThreadFactory<span class="variable">$DefaultRunnableDecorator</span>.run(DefaultThreadFactory.java:145)</div><div class="line">	at java.lang.Thread.run(Thread.java:745)</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div></pre></td></tr></table></figure>
<h2 id="JDK可视化工具"><a href="#JDK可视化工具" class="headerlink" title="JDK可视化工具"></a>JDK可视化工具</h2><p>jdk/bin下还有两个可视化工具。</p>
<h3 id="JConsole：Java监视与管理平台"><a href="#JConsole：Java监视与管理平台" class="headerlink" title="JConsole：Java监视与管理平台"></a>JConsole：Java监视与管理平台</h3><h3 id="VisualVM：多合一故障处理工具"><a href="#VisualVM：多合一故障处理工具" class="headerlink" title="VisualVM：多合一故障处理工具"></a>VisualVM：多合一故障处理工具</h3><p>是到目前为止随JDK发布的功能最为强大的运行监视和故障处理工具，除了最基本的运行监视、 故障处理外，还有性能分析的功能，且十分强大。Visual VM还有一个很大的优点，它对应用程序的实际性能影响很小，使得它可以直接应用在生产环境中。VisualVM需要安装一些插件，才能强大的使用，否则就跟没有安装软件的操作系统一样。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM5-内存分配与回收策略]]></title>
      <url>/2016/11/01/JVM5/</url>
      <content type="html"><![CDATA[<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>之前讲了垃圾回收器体系以及运作原理，现在来看看对象内存分配那点事儿。对象的内存分配，往大方向讲就是在堆上分配，对象主要分配在新生代的Eden区上，也可能直接分配在老年代中，并不固定，取决于使用的哪一种垃圾收集器以及虚拟机参数设置。</p>
<h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够的空间进行分配时，虚拟机会发一起一次Minor GC。<br><a id="more"></a><br>不同的垃圾收集器组合对于对象的分配是有影响的，我们这里都是测试在<code>Serial+SerialOld</code>的收集器组合下测试的代码。<br>下面的代码，<code>-Xms20M -Xmx20M -Xmn10M</code>三个参数限制了Java堆大小为20M，不可扩展，分给新生代10M，剩下10M分给老年代，<code>-XX:SurvivorRatio=8</code>定义了Eden区与一个Survivor区的空间比例是8:1,<code>-XX:+UseSerialGC</code>参数指定Serial垃圾收集器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/1 下午3:34.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  VM 参数: -verbose:gc -XX:+PrintGCDetails -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX:UseSerialGC</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdenGC</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] allocation1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] allocation2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] allocation3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="comment">// 发生一次MinorGC</span></div><div class="line">        <span class="keyword">byte</span>[] allocation4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GC输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[GC (Allocation Failure) [DefNew: 7643K-&gt;517K(9216K), 0.0078067 secs] 7643K-&gt;6661K(19456K), 0.0078482 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4750K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)</div><div class="line">  eden space 8192K,  51% used [0x00000007bec00000, 0x00000007bf0223b8, 0x00000007bf400000)</div><div class="line">  from space 1024K,  50% used [0x00000007bf500000, 0x00000007bf581668, 0x00000007bf600000)</div><div class="line">  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000)</div><div class="line"> tenured generation   total 10240K, used 6144K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000)</div><div class="line">   the space 10240K,  60% used [0x00000007bf600000, 0x00000007bfc00030, 0x00000007bfc00200, 0x00000007c0000000)</div><div class="line"> Metaspace       used 3062K, capacity 4494K, committed 4864K, reserved 1056768K</div><div class="line">  class space    used 333K, capacity 386K, committed 512K, reserved 1048576K</div></pre></td></tr></table></figure>
<p>我们可以看到<code>eden space</code>是8M，前面3个对象都分配到了eden区，在分配<code>allocation4</code>的时候，eden区已经不够了，于是发生了一次Minor GC，但是3个对象都是存活的，并且无法放进Survivor(from space)区，所以通过分配担保机制转移到了老年代去。然后4M的<code>allocation4</code>分配进了Eden区。</p>
<h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>虚拟机提供了一个-XX:PretenureSizeThreshold参数，大于这个设置值的对象直接在老年代分配。这样做的目的是避免在Eden区以及两个Survivor区之间发生大量的复制（新生代采用复制算法）。</p>
<pre><code>-XX:PretenureSizeThreshold只在Serial和ParNew两款收集器有效。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/1 下午3:34.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  VM 参数: -verbose:gc -XX:+PrintGCDetails -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdenGC</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] allocation1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] allocation2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] allocation3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="comment">// 发生一次MinorGC</span></div><div class="line">        <span class="keyword">byte</span>[] allocation4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 1655K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)</div><div class="line">  eden space 8192K,  20% used [0x00000007bec00000, 0x00000007bed9de40, 0x00000007bf400000)</div><div class="line">  from space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000)</div><div class="line">  to   space 1024K,   0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000)</div><div class="line"> tenured generation   total 10240K, used 4096K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000)</div><div class="line">   the space 10240K,  40% used [0x00000007bf600000, 0x00000007bfa00010, 0x00000007bfa00200, 0x00000007c0000000)</div><div class="line"> Metaspace       used 2994K, capacity 4494K, committed 4864K, reserved 1056768K</div><div class="line">  class space    used 324K, capacity 386K, committed 512K, reserved 1048576K</div></pre></td></tr></table></figure>
<p>看到对象超过了3M，直接进入了tenured generation(老年代)。</p>
<h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>对象在Eden区每gc留下来一次(大小可复制到Survivor区中)，年龄+1，默认是15岁后移到老年代。这个阀值可以通过-XX:MaxTenuringThreshold设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/11/2 下午13:58.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 1岁后直接进入老年代</div><div class="line"> *</div><div class="line"> * VM参数：-verbose:gc -XX:+PrintGCDetails -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX:+UseSerialGC -XX:MaxTenuringThreshold=1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenuringThresholdTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] allocation1 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB / <span class="number">4</span>];</div><div class="line">        <span class="keyword">byte</span>[] allocation2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</div><div class="line">        <span class="comment">// Eden区放不下了，发起第一次GC，allocation1年龄+1，allocation2因为无法放入Survivor区通过分配担保机制提前进入老年代，allocation3进入新生代Eden区</span></div><div class="line">        <span class="keyword">byte</span>[] allocation3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</div><div class="line">        allocation3 = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 发起第二次GC，allocation3被回收，allocation1年龄过大进入老年代，allocation4进入Eden区</span></div><div class="line">        <span class="keyword">byte</span>[] allocation4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[GC (Allocation Failure) [DefNew: 5843K-&gt;783K(9216K), 0.0062294 secs] 5843K-&gt;4879K(19456K), 0.0062786 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </div><div class="line">[GC (Allocation Failure) [DefNew: 4961K-&gt;0K(9216K), 0.0018562 secs] 9057K-&gt;4867K(19456K), 0.0018840 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4178K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)</div><div class="line">  eden space 8192K,  51% used [0x00000007bec00000, 0x00000007bf014930, 0x00000007bf400000)</div><div class="line">  from space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400228, 0x00000007bf500000)</div><div class="line">  to   space 1024K,   0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000)</div><div class="line"> tenured generation   total 10240K, used 4866K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000)</div><div class="line">   the space 10240K,  47% used [0x00000007bf600000, 0x00000007bfac0ae8, 0x00000007bfac0c00, 0x00000007c0000000)</div><div class="line"> Metaspace       used 3103K, capacity 4494K, committed 4864K, reserved 1056768K</div><div class="line">  class space    used 338K, capacity 386K, committed 512K, reserved 1048576K</div></pre></td></tr></table></figure>
<p>为了适应不同程序的内存状况，Survivor空间中相同年龄的所有对象大小总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到“-XX:MaxTenuringThreshold”设置要求的年龄。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM4-垃圾收集器]]></title>
      <url>/2016/10/31/JVM4/</url>
      <content type="html"><![CDATA[<h2 id="哪些内存需要回收？"><a href="#哪些内存需要回收？" class="headerlink" title="哪些内存需要回收？"></a>哪些内存需要回收？</h2><p>程序计数器、虚拟机栈、本地方法栈3个区域随线程而生，随线程而灭，方法或者线程结束的时候内存自然就跟着回收了，所以不需要考虑过多回收的问题。而<strong>Java堆</strong>和<strong>方法区</strong>就不一样了，这部分内存的<em>分配</em>和<em>回收</em>都是动态的。</p>
<h3 id="Java堆内存回收"><a href="#Java堆内存回收" class="headerlink" title="Java堆内存回收"></a>Java堆内存回收</h3><p>因为堆就是放对象的地方，要回收内存，首先要知道哪些对象是不可能再被任何途径使用的</p>
<h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>这个算法的实现是：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器+1，当引用失效时，计数器-1。Object-C就是使用的这种方式，Java没有选用引用计数算法来管理内存，因为它很难解决对象之间相互循环引用的问题。例子如下</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午3:48.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 虚拟机参数：-verbose:gc</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收过</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bigSize = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC();</div><div class="line">        ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC();</div><div class="line"></div><div class="line">        objA.instance = objB;</div><div class="line">        objB.instance = objA;</div><div class="line"></div><div class="line">        objA = <span class="keyword">null</span>;</div><div class="line">        objB = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[GC (System.gc())  7440K-&gt;632K(125952K), 0.0012069 secs]</div><div class="line">[Full GC (System.gc())  632K-&gt;520K(125952K), 0.0058047 secs]</div></pre></td></tr></table></figure>
<p>看到<code>632K-&gt;520K</code>，意味着两个对象相互引用也被回收了，侧面说明虚拟机不是通过引用计数法来判断对象是否存活的。</p>
<h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><p>这个算法的基本思路是通过一系列的称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<code>GC Roots</code>没有任何引用链相连(从GC Roots到这个对象不可达)时，则证明此对象是不可用的。下图中object5、object6、object7虽然相互关联，但是到GC Roots是不可达的，所以他们会被回收。<br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/jvm3-1.jpeg" alt=""></p>
<p>在Java语言中，可用作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈(栈帧中的本地变量)中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI（即一般说的本地方法）引用的对象</li>
</ul>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>JDK1.2之前，Java中引用的定义很传统：如果引用类型的数据中存储的数值代表的是另一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过于狭隘，一个对象只有被引用或者没被引用两种状态。我们希望描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用4种，这4种引用强度依次减弱。</p>
<ul>
<li>强引用在代码中普遍存在，类似<code>Object obj = new Object()</code>这类的引用，只要引用还在，垃圾收集器就不会回收</li>
<li>软引用是用来描述一些还有用但并非必需的对象。在系统将要发生内存溢出异常之前，将会把这些列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference来实现软引用。</li>
<li>弱引用也是用来描述非必需对象，被弱引用关联的对象只能生存到下一次GC之前。无论当前内存是够足够，都会回收掉被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用。</li>
<li>虚引用的存在不会对一个对象的生存时间构成影响，它的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现。</li>
</ul>
<h4 id="对象自我拯救"><a href="#对象自我拯救" class="headerlink" title="对象自我拯救"></a>对象自我拯救</h4><p>用可达性分析算法，对象也需要标记2次后才会被回收，第一次是发现没有与GC Roots相连的引用链接会标记一次，然后看他覆盖finalize()方法或者finalize()被调用过没有，如果finalize()不需要执行，就直接被回收了，如果需要执行，稍后GC会进行第二轮标记，对象有可能被移出回收队列(例如在finalize()中重新给自己赋值)。上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午4:54.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  此代码演示两点：</div><div class="line"> *     1. 对象可以在GC时自我拯救</div><div class="line"> *     2. 这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeEscapeGC</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeEscapeGC SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"yes, i am still alive :)"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">super</span>.finalize();</div><div class="line">        System.out.println(<span class="string">"finalize method executed!"</span>);</div><div class="line">        FinalizeEscapeGC.SAVE_HOOK = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SAVE_HOOK = <span class="keyword">new</span> FinalizeEscapeGC();</div><div class="line"></div><div class="line">        <span class="comment">// 对象第一次成功拯救自己</span></div><div class="line">        SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        <span class="comment">// 因为finalize方法的优先级很低，所以暂停了0.5秒等待它执行</span></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="keyword">null</span>) &#123;</div><div class="line">            SAVE_HOOK.isAlive();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"no, i am dead :( "</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 下面代码一样，但是这次失败了，因为finalize只执行一次</span></div><div class="line">        SAVE_HOOK = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        <span class="comment">// 因为finalize方法的优先级很低，所以暂停了0.5秒等待它执行</span></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (SAVE_HOOK != <span class="keyword">null</span>) &#123;</div><div class="line">            SAVE_HOOK.isAlive();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"no, i am dead :( "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">finalize method executed!</div><div class="line">yes, i am still alive :)</div><div class="line">no, i am dead :(</div></pre></td></tr></table></figure>
<h3 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h3><p>Java虚拟机规范中说过可以不要求虚拟机在方法区实现垃圾收集，而且在方法区中进行垃圾收集性价比一般比较低。HotSpot VM永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。<br>判断一个倡廉是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面3个条件才能算是“无用的类”：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>
<li>加载该类的ClassLoader已经被回收。</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<p>在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载功能，以保证方法区不会溢出。</p>
<h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><p>下面介绍几种垃圾回收算法的思想及发展过程。</p>
<h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>最基础的收集算法是标记-清除(Mark-Sweep)算法，，如同它的名字一样，算法分为<code>标记</code>和<code>清除</code>两个阶段：首先标记处所有需要回收的对象，在标记完成后统一回收所有被标记的对象。（<a href="#对象自我拯救">标记过程</a>已经介绍过了）。这种算法主要有两个不足：</p>
<ul>
<li>一个是效率问题，标记和清除两个过程的效率都不高</li>
<li>另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行中需要分配较大对象时<a href="http://sail-y.github.io/2016/10/28/JVM2/#对象创建" target="_blank" rel="external">对象的创建</a>，无法找到足够的连续内存而不得不提前出发另一次垃圾收集动作。标记-清除算法的执行过程如图：<br><img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150924224524194-1099144937.png" alt="">。</li>
</ul>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>复制算法是为了解决效率问题而出现的，<strong>它将可用的内存分为两块，每次只用其中一块，当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已经使用过的内存空间一次性清理掉</strong>。这样每次只需要对整个半区进行内存回收，内存分配时也不需要考虑内存碎片等复杂情况，只需要移动指针，按照顺序分配即可。复制算法的执行过程如图：<br><img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150924224944365-2132315257.png" alt=""></p>
<p>只是这个算法代价太高，内存缩小为原来的一半，现在商用虚拟机都采用这种算法来回收“新生代”，IBM研究表明新生代98%的对象“朝生夕死”，所以不需要按1:1来划分内存空间，而是将内存分为一块较大的<strong>Eden</strong>空间和两块较小的<strong>Survivor</strong>空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。我们没有办法保证每次回收都只有不多余10%的对象存活，所以如果Survivor空间不够用的时候，这些对象将直接通过分配担保机制进入老年代。</p>
<h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>复制手机算法在对象存活率较高时就要进行较多的复制操作，效率会变低，如果对象存活率太高，还需要额外的空间进行分配担保，所以老年代一般不能直接用这种算法。<br>标记-整理算法是先标记对象，让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。如图：<img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150924225908490-419097314.png" alt=""></p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>概括一下Java内存的布局：<img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150924230142897-1555721768.png" alt=""><br>当前的商业虚拟机垃圾收集都采用“分代收集”算法，把Java堆分为新生代和老年代。在新生代中，垃圾收集时都有大批对象死去，只有少量存活，只需复制少量存活的对象成本低。老年代对象存活率高、没有额外的空间进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾收集器是内存回收的具体实现，JDK1.7之后的HotSpot虚拟机包含的收集器如下图所示：<br><img src="http://images2015.cnblogs.com/blog/801753/201509/801753-20150925111718131-1534856948.png" alt=""></p>
<p>上图展示了7种不作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。</p>
<h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>Serial收集器是一个单线程的收集器，在进行垃圾收集的时候，会暂停其他所有的工作线程，直到它收集结束。新生代采用<em>复制</em>算法，老年代采取<em>标记-整理</em>算法。虽然它会暂停用户的工作线程似乎显得很不能接受，<strong>不过它仍然是Client模式下虚拟机的默认新生代收集器</strong>，因为它简单而高效，收集几十兆内存停顿时间可以控制在几十毫秒，这是可以接受的。</p>
<h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p><strong>ParNew收集器是Serial收集器的多线程版本，它是运行在Server模式下虚拟机中首选的新生代收集器</strong>。有个重要的原因是，除了Serial收集器，目前只有它能与CMS收集器配合工作。(CMS是HotSpot在JDK1.5推出的第一款真正意义上的<strong>老年代</strong>并发收集器，第一次实现了垃圾收集线程基本上与用户线程同时工作–意思就是几乎不会暂停用户的工作线程)。ParNew收集器默认开启的收集线程数与CPU数量相同，与Serial相比，CPU数量越多，它的效果才越好。在CPU数量非常多的情况下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</p>
<h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>Parallel Scavenge收集器是一个使用复制算法的新生代收集器。它的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的<strong>吞吐量</strong>。吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)，假如虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。高吞吐量可以高效率的运用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。<br>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数。Parallel Scavenge收集器还有个参数-XX:+UseAdaptiveSizePolicy值得关注，这个参数打开后虚拟机会根据当前系统的运行情况动态调整新生代大小、Eden与Survivor区的比例、晋升老年代对象年龄，以提供最合适的停顿时间或者最大的吞吐量，这种调节方式成为<em>GC自适应调节策略</em>。如果我们不太了解手工优化，交给虚拟机区去优化是个不错的选择。</p>
<h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>Serial Old是Serial收集器的老年代版本，它是单线程收集器，使用<strong>标记-整理</strong>算法。这个收集器主要也是在Client模式下的虚拟机使用。</p>
<h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和<strong>标记-整理</strong>算法。由于Parallel Scavenge无法与CMS配合工作，Serial Old在服务端应用上又不给力，JDK1.6后Parallel Old的发布才有了Parallel Scavenge+Parallel Old的应用组合，适合注重吞吐量以及CPU资源敏感的场合。</p>
<h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>CMS收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器是基于<strong>标记-清除</strong>算法实现的。CMS非常优秀但是有3个缺点：</p>
<ul>
<li>占用CPU资源</li>
<li>并发收集会产生浮动垃圾(收集的同时产生的新垃圾)</li>
<li>内存空间碎片问题</li>
</ul>
<h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>G1是一款面向服务端应用的垃圾收集器，是当今收集器技术发展的最前沿成果之一，随JDK1.7 HotSpot发布。G1的目标是替换掉CMS收集器，特点如下：</p>
<ul>
<li>并行(多线程)+并发(与用户线程同时工作)</li>
<li>分代收集</li>
<li>空间整合(不会产生空间碎片)</li>
<li>可预测的停顿</li>
</ul>
<p>在G1收集器之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1收集器不再是这样，使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region的集合。</p>
<p>G1收集器跟踪各个Region里面的垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也是Garbage-First名称的由来）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM3-内存溢出异常实战]]></title>
      <url>/2016/10/31/JVM3/</url>
      <content type="html"><![CDATA[<p>在Java虚拟机规范的描述中，除了程序计数器，其他几个运行时区域都有发生OutOfMemoryError异常的可能。本文有两个目的：</p>
<ol>
<li>通过代码验证Java虚拟机规范中描述的各个运行时区域存储的内容。</li>
<li>希望我们在工作中遇到问题的时候能迅速判断是哪个区域的内存溢出，知道什么样的代码会导致这些区域溢出，以及出现这些异常后该如何处理。</li>
</ol>
<p>这个图展示了如何在Idea中设置VM参数。<br><a id="more"></a><br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/jvm2-2-1.png" alt=""></p>
<h3 id="Java堆异常"><a href="#Java堆异常" class="headerlink" title="Java堆异常"></a>Java堆异常</h3><p>Java堆用于储存对象实例，只要不断地创建对象且对象不被回收，那么在对象数量到达最大堆的容量限制后就会产生OOM。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午1:34.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  设置堆大小为20m，不可扩展(堆的最小值-Xms参数和最大值-Xmx参数设置为一样可避免堆自动扩展)</div><div class="line"> *  VM参数：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            list.add(<span class="keyword">new</span> OOMObject());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java.lang.OutOfMemoryError: Java heap space</div><div class="line">Dumping heap to java_pid56046.hprof ...</div><div class="line">Heap dump file created [27956110 bytes in 0.186 secs]</div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</div></pre></td></tr></table></figure>
<p>这个问题很常见，根据错误提示可以定位到代码，分清楚是内存泄露还是内存溢出。如果是内存泄露，找出GC无法回收的对象代码位置。如果不存在泄露，就是说内存中的对象确实都还必须存活着，应当检查一下虚拟机的堆参数(-Xms和-Xmx)，代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p>
<h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><p>由于HotSpot虚拟机中并不区分虚拟机栈和本地方法栈，因此对于HotSpot来说<code>-Xoss</code>(设置本地方法栈大小)是无效的，栈容量只由<code>-Xss</code>参数设置。关于虚拟机栈和本地方法栈，在虚拟机规范中描述了两种异常：</p>
<ul>
<li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</li>
<li>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午2:06.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> *  不断地递归调用导致栈深度增加</div><div class="line"> *  VM参数：-Xss128k</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        stackLength++;</div><div class="line">        stackLength();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        JavaVMStackSOF javaVMStackSOF = <span class="keyword">new</span> JavaVMStackSOF();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            javaVMStackSOF.stackLength();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            System.out.println(<span class="string">"stack length:"</span> + javaVMStackSOF.stackLength);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stack length:29460</div><div class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</div><div class="line">	at oom.JavaVMStackSOF.stackLength(JavaVMStackSOF.java:19)</div></pre></td></tr></table></figure>
<p>在单线程下，无论是栈帧太大，还是虚拟机栈容量太小，当内存无法分配的时候，虚拟机抛出的都是<em>StackOverFlow</em>异常。<br>可以通过不断创建线程的方式产生内存溢出异常，不过这个异常与栈容量大小没有什么关系，因为不断创建线程，每个线程分配的容量越大，那么总共可产生线程数量就越小，就越容易出现OOM。这个只能通过减少最大堆内存(留给栈分配的内存变大)和减少栈容量来换取更多的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午2:18.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * 不断创建线程导致内存溢出</div><div class="line"> * VM参数：-Xss2M</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackOOM</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeakByThread</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            Thread thread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        count++;</div><div class="line">                        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            thread.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 不要在Windows下运行这段代码，可能会假死</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        JavaVMStackOOM javaVMStackOOM = <span class="keyword">new</span> JavaVMStackOOM();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            javaVMStackOOM.stackLeakByThread();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            System.out.println(<span class="string">"thread count: "</span> + javaVMStackOOM.count);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">thread count: 2028</div><div class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread</div><div class="line">	at java.lang.Thread.start0(Native Method)</div></pre></td></tr></table></figure>
<h3 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h3><p>前面提到过，运行时常量池也是方法区的一部分，并且在JDK8 HotSpot中去掉了永久代。<code>String.intern()</code>是一个Native方法，它的作用是：如果常量池中有一个String对象的字符串就返回池中的这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中去，并且返回此String对象的引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by YangFan on 2016/10/31 下午3:01.</div><div class="line"> * &lt;p/&gt;</div><div class="line"> * </div><div class="line"> * VM参数-XX:PermSize=10M -XX:MaxPermSize=10M</div><div class="line"> *</div><div class="line"> * 对于JDK 1.6 HotSpot而言，方法区=永久代，这里看到OutOfMemoryError的区域是“PermGen space”，即永久代，那其实也就是方法区溢出了</div><div class="line"> *</div><div class="line"> * JDK7这个例子会一直循环，因为JDK 7里String.intern生成的String不再是在perm gen分配,而是在Java Heap中分配</div><div class="line"> * JDK8移除了永久代（Permanent Generation ），替换成了元空间（Metaspace）内存分配模型</div><div class="line"> * 设置虚拟机参数-XX:MaxMetaspaceSize=1m，可出现OutOfMemoryError: Metaspace 溢出</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">            list.add(String.valueOf(i++).intern());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3><p>这个地方的溢出，特征是发现OOM后Dump文件很小，而程序中间接或直接使用了NIO，那就考虑检查一下是不是这个原因。</p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM2-Java内存区域]]></title>
      <url>/2016/10/28/JVM2/</url>
      <content type="html"><![CDATA[<p>#Java内存区域</p>
<p>下面从概念上介绍Java虚拟机内存的各个区域，讲解这些区域的作用、服务对象以及其中可能产生的问题，这是翻越虚拟机内存管理这堵围墙的第一步。</p>
<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p>Java虚拟机在执行Java程序的过程中会把她所管理的内存划分为若干个不同的数据区域，包含以下几个运行时数据区域。<br><a id="more"></a><br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/WechatIMG1.jpeg" alt=""></p>
<p>注意看图上分为<strong>线程共享数据区域</strong>和<strong>线程私有数据区域</strong>。</p>
<h3 id="线程私有数据区"><a href="#线程私有数据区" class="headerlink" title="线程私有数据区"></a>线程私有数据区</h3><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器(Program Counter Register)是比较小的一块内存空间,在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。    </p>
<p>一个处理器一时间只会执行一条线程的指令，因此线程切换后为了能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为<code>线程私有</code>的内存。</p>
<h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈(Java Virtual Machine Stacks)也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是<code>Java方法</code>执行的内存模型：<em>每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈入栈到出栈的过程。</em><br>在这个区域中，如果我们写一个回调的死循环可能会抛出StackOverFlow异常，或者是在区域大小动态扩展的时候申请不到足够的内存，也会抛出OutOfMemoryError异常。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>与虚拟机栈类似，不过是为Native方法服务的。虚拟机规范中没有强制的规定，HotSpot VM直接把本地方法栈和虚拟机栈合二为一了。</p>
<h3 id="线程共享数据区"><a href="#线程共享数据区" class="headerlink" title="线程共享数据区"></a>线程共享数据区</h3><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>对于大多数应用来说，Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块，<strong>此内存区域的唯一目的就是存放对象实例</strong>。由于现代GC基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；再细致一点还有Eden空间、From Survivor空间、To Survivor空间等。这个区域如果满了，会抛出<em>OutOfMemoryError</em>异常。</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p><strong>方法区(Method Area)用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。在Hotspot VM中，这个区域被称为“永久代”(Permanent Generation)，其他虚拟机则不存在永久代。并且使用永久代来实现方法区，容易遇到内存溢出问题(-XX:MaxPermSize)，所以JDK8的HotSpot VM去掉“永久代”，以“元数据区”（Metaspace）替代之。在JDK7的HotSpot中，原本放在永久代的字符串常量池也被移除。这个区域如果满了，会抛出<em>OutOfMemoryError</em>异常。</p>
<h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>运行时常量池（Runtime Constant Pool）是方法区的一部分，图上面没有。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放<strong>编译器生成的各种字面量和符号引用</strong>，这部分内容将在类加载后进入方法区的运行时常量池中存放。那么运行时常量池相对Class文件常量池另外一个重要特征是动态性，并非Class文件中常量池的内容才能进入方法区运行时常量池，例如String的<code>intern()</code>方法就能将新的常量放入池中。常量池如果满了，会抛出<em>OutOfMemoryError</em>异常。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。<br>JDK1.4加入的NIO，引入了基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配<strong>堆外内存</strong>，然后通过一个存储在Java堆中的<code>DirectByteBuffer</code>对象作为这块内存的引用进行操作。这个<strong>堆外内存</strong>虽不会受堆大小的限制，但是受本机总内存（RAM+SWAP）大小以及处理器寻址空间的限制，所以可能会出现OutOfMemoryError异常。</p>
<h1 id="对象探秘"><a href="#对象探秘" class="headerlink" title="对象探秘"></a>对象探秘</h1><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>在语言层面上，创建对象只是一个new关键字而已，而在虚拟机中创建一个对象的过程呢？</p>
<ol>
<li>当虚拟机遇到一条new指令，先检查指令参数能否在<strong>常量池</strong>中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过，如果没有，就先执行相应的类加载过程。</li>
<li>在类加载检查通过后，虚拟机为新生类分配内存(对象所需内存大小在类加载完成后已经确定)，为对象分配空间就是把一块确定大小的内存从Java堆中划分出来。<ul>
<li>如果Java堆内存是规整的，使用<strong>指针碰撞</strong>方式。意思是所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式。</li>
<li>如果Java堆内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是<strong>空闲列表法</strong>来为对象分配内存。意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。如果垃圾收集器选择的是CMS这种基于标记-清除算法的，虚拟机采用这种分配方式。<br>  除了可用空间外，还有个问题是在虚拟机中创建并发创建对象也不是线程安全的，有两个方案解决这个问题：<ul>
<li>对分配内存空间的动作进行同步处理</li>
<li>使用本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)，即每个线程在Java堆中预先分配一小块内存。哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完并分配新的TLAB时，才需要同步锁定。虚拟机是否使用TLAB,可以通过-XX:+/-UseTLAB参数来设定。</li>
</ul>
</li>
</ul>
</li>
<li>内存分配完成，虚拟机需要将分配到的内存空间都初始化为零值。这一步保证了对象的实例字段不被赋值就可以使用对应字段的零值。</li>
<li>虚拟机进行必要设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的GC分代年龄信息。这些信息放在对象的对象头中。</li>
<li>从虚拟机角度来看一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚开始—-<code>&lt;init&gt;</code>方法没有执行，所有的字段都还为零。接下来执行<code>&lt;init&gt;</code>方法，按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</li>
</ol>
<h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在Hotspot虚拟机中，对象在内存中存储的布局可用分为3块区域：对象头，实例数据，和对齐填充。</p>
<ol>
<li>对象头包含2部分数据，第一部分用于存储对象自身的运行时数据(如哈希吗、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等)。第二部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例，不过这跟<a href="#对象的访问定位">对象访问定位</a>的实现方式有关系，下面介绍。</li>
<li>实例数据就是对象真正存储的有效信息，包括从父类继承下来的。</li>
<li>对齐填充起占位符的作用，因为HotSpot VM的自动内存管理系统要求对象的起始地址必须的8字节的整倍数。</li>
</ol>
<h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>建立对象是为了使用对象，我们的Java程序需要通过栈上的reference数据来操作堆上的具体对象，目前主流的访问方式有使用句柄和直接指针两种。</p>
<ol>
<li>如果使用句柄访问，Java堆中会划分一块内存来做句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。如图所示<img src="http://7xs4nh.com1.z0.glb.clouddn.com/WechatIMG2.jpeg?imageMogr2/rotate/270" alt=""></li>
<li>如果使用直接指针访问，那么Java堆的对象布局中就包含了类型指针，而reference中存储的直接就是对象地址。(<em>这种方式类型指针就在对象数据中</em>)。HotSpot就是使用的这种方式，如图所示<img src="http://7xs4nh.com1.z0.glb.clouddn.com/jvm2.2.1.jpeg?imageMogr2/rotate/270" alt=""></li>
</ol>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM1-Java介绍]]></title>
      <url>/2016/10/28/JVM1/</url>
      <content type="html"><![CDATA[<p>今天开写JVM系列的学习笔记，书籍为周志明的《深入理解Java虚拟机》</p>
<h2 id="走进Java"><a href="#走进Java" class="headerlink" title="走进Java"></a>走进Java</h2><h3 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h3><p>Sun官方所定义的技术体系包括以下几个组成部分。</p>
<ul>
<li>Java程序设计语言</li>
<li>各种硬件平台上的Java虚拟机</li>
<li>Class文件格式</li>
<li>Java API类库</li>
<li>来自商业机构和开源社区的第三方Java类库        </li>
</ul>
<p>我们把Java程序设计语言、Java虚拟机、Java API类库这三部分统称为<code>JDK</code>，JDK是用于支持Java程序开发的最小环境。Java API类库中的Java SE API子集和Java虚拟机这两部分统称为<code>JRE</code>，JRE是支持Java程序运行的标准环境。下图展示了Java技术体系所包含的内容，以及JDK和JRE所覆盖的范围。</p>
<a id="more"></a>
<p><img src="http://7xs4nh.com1.z0.glb.clouddn.com/801753-20150921165309834-1573432020.png" alt=""></p>
<h3 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h3><p>1999年HotSpot虚拟机作为JDK1.2附加程序发布，成为JDK1.3及之后版本的Sun JDK默认虚拟机。<br>2002年5月8日，JDK1.4发布，新特性包括，正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器等。<br>2004年2月13日，JDK1.5发布，JDK1.5在Java语法易用性上做出了非常大的改进。例如，自动装箱、泛型、动态注解、枚举、可变长参数、循环遍历(foreach循环)等语法特性，在虚拟机和API层面上，这个版本改进了<strong>Java的内存模型</strong>(Java Memory Model, JMM)，提供了java.util.concurent并发包等。<br>2006年12月11日，JDk1.6发布，JDK1.6的改进包括：提供动态语言支持，提供编译API和微型HTTP服务器API等。这个版本对Java虚拟机内部做了大量改进，包括<strong>锁与同步、垃圾收集、类加载</strong>等方面的算法。<br>2011年7月，JDK7发布，由于Sun公司被Oracle收购等各种原因，原计划在JDK7发布的Lambda，Jigsaw和Coin延迟，JDK7的主要改进包括：提供新的G1收集器，加强对非Jaa语言的调用支持，升级类加载架构等。<br>2014年3月19日，JDK8发布，JDK8改进比较多，最大的改进是Lambda表达式（以及因之带来的函数式接口，很多原有类都做了变更，但能够与以往版本兼容，堪称奇功！），还有Stream API流式处理，joda-time等等一些新特性。但有一些本来计划发布的大变更，比如模块化等推迟到了JDK9中。        </p>
<h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>在JDK1.3之后，HotSpot VM成了Sun JDK和OpenJDK中所带的默认虚拟机。HotSpot VM的热点代码探测能力可以通过执行计数器找出最具有编译价值的代码，然后通知JIT编译器以方法单位进行编译。如果<strong>一个方法被频繁调用</strong>，或方法中<strong>有效循环次数很多</strong>，将会分别触发标准编译和OSR(栈上替换)编译动作。通过编译器与解释器恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无须等待本地代码输出才能执行程序，即时编译的时间压力也相对减小，这样有助于引入更多的代码优化技术没输出质量更高的本地代码。<br>我们可以在命令行里执行<code>java -version</code>看看本机上的虚拟机。<br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/QQ20161028-0.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java获取URL上的参数]]></title>
      <url>/2016/07/21/Java%E8%8E%B7%E5%8F%96URL%E4%B8%8A%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>最近遇到一个需求需要在获取URL字符串上的kv键值对，我们都知道Java Web在请求是直接用request来获取值的。如果是字符串呢，就需要正则表达式来自己截取了。<br>自己写代码是比较麻烦的，下面推荐用Guava工具包，2行代码就可以解决这个需求了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private String getPara(String url, String name) &#123;</div><div class="line">    String params = url.substring(url.indexOf(&quot;?&quot;) + 1, url.length());</div><div class="line">    Map&lt;String, String&gt; split = Splitter.on(&quot;&amp;&quot;).withKeyValueSeparator(&quot;=&quot;).split(params);</div><div class="line">    return split.get(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先截取到?后面的字符串，然后再用<code>Splitter.on(&quot;&amp;&quot;).withKeyValueSeparator(&quot;=&quot;).split(params);</code>就轻松的解决了~</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring cloud @EnableOAuth2Client]]></title>
      <url>/2016/07/15/Spring-cloudt-EnableOAuth2Client/</url>
      <content type="html"><![CDATA[<p>Spring Cloud oauth2 开启客户端功能，并启用LoadBalanced</p>
<p>如果不添加以下配置，只添加<code>@EnableOAuth2Client</code>注解，spring cloud默认是在web环境下使用的<code>AuthorizationCodeResourceDetails</code>。</p>
<p>具体代码在<code>OAuth2RestOperationsConfiguration</code>类中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Configuration</div><div class="line">@ConditionalOnBean(OAuth2ClientConfiguration.class)</div><div class="line">@ConditionalOnWebApplication</div><div class="line">protected static class SessionScopedConfiguration &#123;</div><div class="line"></div><div class="line">	@Bean</div><div class="line">	@ConfigurationProperties(&quot;security.oauth2.client&quot;)</div><div class="line">	@Primary</div><div class="line">	public AuthorizationCodeResourceDetails oauth2RemoteResource() &#123;</div><div class="line">		AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();</div><div class="line">		return details;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Bean</div><div class="line">	public FilterRegistrationBean oauth2ClientFilterRegistration(</div><div class="line">			OAuth2ClientContextFilter filter, SecurityProperties security) &#123;</div><div class="line">		FilterRegistrationBean registration = new FilterRegistrationBean();</div><div class="line">		registration.setFilter(filter);</div><div class="line">		registration.setOrder(security.getFilterOrder() - 10);</div><div class="line">		return registration;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Configuration</div><div class="line">	protected static class ClientContextConfiguration &#123;</div><div class="line"></div><div class="line">		@Resource</div><div class="line">		@Qualifier(&quot;accessTokenRequest&quot;)</div><div class="line">		protected AccessTokenRequest accessTokenRequest;</div><div class="line"></div><div class="line">		@Bean</div><div class="line">		@Scope(value = &quot;session&quot;, proxyMode = ScopedProxyMode.INTERFACES)</div><div class="line">		public DefaultOAuth2ClientContext oauth2ClientContext() &#123;</div><div class="line">			return new DefaultOAuth2ClientContext(this.accessTokenRequest);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个东西我也没找到在哪里可以配置，就自己在Application手动加入以下配置来使用吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">@Primary</div><div class="line">@LoadBalanced</div><div class="line">public OAuth2RestTemplate xmRestTemplate(ClientCredentialsResourceDetails xmOauth2RemoteResource) &#123;</div><div class="line">    return new OAuth2RestTemplate(xmOauth2RemoteResource);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Bean</div><div class="line">@ConfigurationProperties(&quot;security.oauth2.client&quot;)</div><div class="line">public ClientCredentialsResourceDetails xmOauth2RemoteResource() &#123;</div><div class="line">    return new ClientCredentialsResourceDetails();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring cloud OAuth2RestTemplate loadBalanced]]></title>
      <url>/2016/04/21/spring-cloud-OAuth2RestTemplate-loadBalanced/</url>
      <content type="html"><![CDATA[<p>在项目中访问另一个微服务的时候我们可以这样用RestTemplate来调用其他服务:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">private RestTemplate restTemplate;</div><div class="line">RestResponse response = restTemplate.postForObject(&quot;http://user-service/user/getUser&quot;, para, User.class);</div></pre></td></tr></table></figure>
<p>在spring cloud环境下，这个注入的restTemplate是具备了客户端负载均衡功能的，也会用到eureka服务发现功能，<code>user-service</code>就是服务的名称。<br>我的项目启用了oauth2认证。spring cloud也提供了一个<code>OAuth2RestTemplate</code>来很方便的调用其他服务。但是在我测试的时候一直报错<code>UnknownHost</code>，我猜测他肯定是没有用到loadBalanced和eureka的服务发现功能。我翻遍了官方文档也没有找到相关的说明。</p>
<p>Google搜了大半天后，看了作者在git也讨论过这个类loadBalanced功能之类的，还翻到一个没有什么用 @LoadBalanced<a href="https://github.com/spring-cloud/spring-cloud-security/issues/51" target="_blank" rel="external">注解</a>，翻了半天源码后终于在<code>OAuth2LoadBalancerClientAutoConfiguration</code>这样一个类中发现了一点蛛丝马迹。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Configuration</div><div class="line">@ConditionalOnClass(&#123; LoadBalancerInterceptor.class, OAuth2RestTemplate.class &#125;)</div><div class="line">@ConditionalOnBean(LoadBalancerInterceptor.class)</div><div class="line">@AutoConfigureAfter(OAuth2AutoConfiguration.class)</div><div class="line">public class OAuth2LoadBalancerClientAutoConfiguration &#123;</div><div class="line"></div><div class="line">	@Configuration</div><div class="line">	@ConditionalOnProperty(value = &quot;security.oauth2.resource.loadBalanced&quot;, matchIfMissing = false)</div><div class="line">	protected static class UserInfoLoadBalancerConfig &#123;</div><div class="line">		@Bean</div><div class="line">		public UserInfoRestTemplateCustomizer loadBalancedUserInfoRestTemplateCustomizer(</div><div class="line">				final LoadBalancerInterceptor loadBalancerInterceptor) &#123;</div><div class="line">			return new UserInfoRestTemplateCustomizer() &#123;</div><div class="line">				@Override</div><div class="line">				public void customize(OAuth2RestTemplate restTemplate) &#123;</div><div class="line">					List&lt;ClientHttpRequestInterceptor&gt; interceptors = new ArrayList&lt;&gt;(</div><div class="line">							restTemplate.getInterceptors());</div><div class="line">					interceptors.add(loadBalancerInterceptor);</div><div class="line">					restTemplate.setInterceptors(interceptors);</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，只要配置了<code>security.oauth2.resource.loadBalanced</code>为<code>true</code>，我们的<code>OAuth2RestTemplate</code>就具有<code>LoadBalancer</code>功能了。我们先在<code>application.yml</code>中加上这样的配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">security:</div><div class="line">  oauth2:</div><div class="line">    resource:</div><div class="line">      loadBalanced: true</div></pre></td></tr></table></figure>
<p>然后注入这个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">private OAuth2RestTemplate restTemplate;</div></pre></td></tr></table></figure>
<p>结果还是不行，一样的错误，难道这个类没有用吗，于是我在我的代码和<code>customize</code>方法初始化执行的时候打了2个断点，发现注入对象的根本就不是这个地方初始化使用的那个对象。又倒腾了好一会才找到，必须得注入一个bean名字为<code>userInfoRestTemplate</code>的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;userInfoRestTemplate&quot;)</div><div class="line">private OAuth2RestTemplate restTemplate;</div></pre></td></tr></table></figure>
<p>终于可以正常使用了，不知道为什么这个配置并没有在文档中提到，估计以后会补上这个文档的。现在spring cloud的文档有些地方跟最新的代码也表现得不太一致，特别是spring security这一块，做的时候一定要多多注意。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring-cloud OAuth2.0配置]]></title>
      <url>/2016/03/31/Spring-cloud-OAuth2-0%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>在spring cloud项目环境中配置oauth2.0认证。<br><img src="http://callistaenterprise.se/assets/blogg/build-microservices-part-3/system-landscape.png" alt="">    </p>
<p><a href="http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/" target="_blank" rel="external">http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/</a><br>可以先看看这篇文章。</p>
<p>我花了不少时间才把这个调通，spring cloud的版本和文档也存在不一致的地方。<br>以下所有的操作都基于Brixton.RC1搭建，须保持所有相关项目都引用此parent。否则会出现各种莫名其妙的错误。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Brixton.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><a href="https://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3" target="_blank" rel="external">https://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3</a></p>
<p>这篇文章显示了不同版本之间的区别。<br>目前官网最新提供的<code>Angel SR6</code>和<code>Brixton RC1</code>，它们引用的Spring Boot版本不一样。这2个版本在Spring Security这一块改动比较大。<br>Spring Boot1.3 移除了官方文档中提到的<code>@EnableOAuth2Resource</code>注解。<br><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud.html#_token_relay" target="_blank" rel="external">http://cloud.spring.io/spring-cloud-static/spring-cloud.html#_token_relay</a><br>反正感觉官网提供这个文档写得不太对。            </p>
<p>下面展示我最终正常运行的一个配置。<br><code>Zuul Proxy</code>和<code>AuthServer</code>，我把它们放在了同一个应用里。<br>在pom中加入oauth2的依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后是<code>Application</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="comment">//必须添加@EnableResourceServer，Zuul才会进行Token Relay。</span></div><div class="line"><span class="comment">//(查看各种源码后才发现。文档描述的@EnableOAuth2Sso根本没有什么卵用。只有</span></div><div class="line"><span class="comment">//@EnableResourceServer才会加载OAuth2AuthenticationProcessingFilter)</span></div><div class="line"><span class="meta">@EnableResourceServer</span></div><div class="line"><span class="meta">@EnableAuthorizationServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//为什么不用自动配置。因为/oauth/check_token默认是denyAll.</span></div><div class="line">    <span class="comment">//必须手动设置oauthServer.checkTokenAccess("isAuthenticated()");</span></div><div class="line">    <span class="comment">//才访问能验证Access Token。</span></div><div class="line">    <span class="meta">@Configuration</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuthSecurityConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Autowired</span></div><div class="line">        <span class="keyword">private</span> AuthenticationManager authenticationManager;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            endpoints.authenticationManager(authenticationManager);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            oauthServer.checkTokenAccess(<span class="string">"isAuthenticated()"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            clients.inMemory()</div><div class="line">                    .withClient(<span class="string">"clientId"</span>)</div><div class="line">                    .secret(<span class="string">"secretId"</span>)</div><div class="line">                    .authorizedGrantTypes(<span class="string">"authorization_code"</span>, <span class="string">"client_credentials"</span>)</div><div class="line">                    .scopes(<span class="string">"app"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Configuration</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">            http.anonymous().disable()</div><div class="line">                    .sessionManagement()</div><div class="line">                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</div><div class="line">                    .and()</div><div class="line">                    .exceptionHandling()</div><div class="line"><span class="comment">//                    .accessDeniedHandler(accessDeniedHandler()) // handle access denied in general (for example comming from @PreAuthorization</span></div><div class="line"><span class="comment">//                    .authenticationEntryPoint(entryPointBean()) // handle authentication exceptions for unauthorized calls.</span></div><div class="line">                    .and()</div><div class="line">                    .authorizeRequests()</div><div class="line"><span class="comment">//                    .antMatchers("/hystrix.stream/**", "/info", "/error").permitAll()</span></div><div class="line">                    .anyRequest().authenticated().and().csrf().disable();</div><div class="line">        &#125;</div><div class="line">		  </div><div class="line"><span class="comment">//        @Bean</span></div><div class="line"><span class="comment">//        @Autowired</span></div><div class="line"><span class="comment">//        AccessDeniedHandler accessDeniedHandler() &#123;</span></div><div class="line"><span class="comment">//            return new AccessDeniedExceptionHandler();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//        @Bean</span></div><div class="line"><span class="comment">//        @Autowired</span></div><div class="line"><span class="comment">//        AuthenticationEntryPoint entryPointBean() &#123;</span></div><div class="line"><span class="comment">//            return new UnauthorizedEntryPoint();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">		<span class="comment">// 不需要权限控制的路径</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            web.ignoring().antMatchers(<span class="string">"/hystrix.stream/**"</span>, <span class="string">"/info"</span>, <span class="string">"/error"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在API里同样加入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在application.yml中加入以下配置:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  oauth2:</span></div><div class="line"><span class="attr">    resource:</span></div><div class="line"><span class="attr">      token-info-uri:</span> http://localhost:<span class="number">10000</span>/oauth/check_token</div><div class="line"><span class="attr">    client:</span></div><div class="line"><span class="attr">          client-id:</span> clientId</div><div class="line"><span class="attr">          client-secret:</span> secretId</div><div class="line"><span class="attr">          user-authorization-uri:</span> http://localhost:<span class="number">10000</span>/oauth/authorize</div><div class="line"><span class="attr">          access-token-uri:</span> http://localhost:<span class="number">10000</span>/oauth/token</div><div class="line"><span class="attr">          grant-type:</span> client_credentials</div></pre></td></tr></table></figure>
<p><code>Application.java</code>中加上<code>@EnableResourceServer</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableResourceServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Configuration</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">    	<span class="comment">//不需要权限控制的URL</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            web.ignoring().antMatchers(<span class="string">"/info"</span>, <span class="string">"/error"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置完了，启动应用。<br>获取access_token。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl <span class="_">-s</span> clientId:secretId@localhost:10000/oauth/token  \</div><div class="line"> <span class="_">-d</span> grant_type=client_credentials \</div><div class="line"> <span class="_">-d</span> scope=app</div><div class="line"> </div><div class="line"> &#123;</div><div class="line">  <span class="string">"access_token"</span>: <span class="string">"8265eee1-1309-4481-a734-24a2a4f19299"</span>,</div><div class="line">  <span class="string">"token_type"</span>: <span class="string">"bearer"</span>,</div><div class="line">  <span class="string">"expires_in"</span>: 43189,</div><div class="line">  <span class="string">"scope"</span>: <span class="string">"app"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问API的时候在Http Header中带上，Authorization: Bearer$access_token。即可…</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring cloud项目实践(三)]]></title>
      <url>/2016/03/22/Spring-cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5-%E4%B8%89/</url>
      <content type="html"><![CDATA[<h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><p>配置jenkins构建项目，自动build出docker镜像，发布到docker私库中，或者从目标服务器中启动容器。</p>
<h2 id="Maven的Docker插件"><a href="#Maven的Docker插件" class="headerlink" title="Maven的Docker插件"></a>Maven的Docker插件</h2><p><a href="http://www.cnblogs.com/skyblog/p/5163691.html" target="_blank" rel="external">http://www.cnblogs.com/skyblog/p/5163691.html</a> 有讲到如何用Dockerfile构建，下面是采用Maven插件的方式构建，插件的文档在<a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="external">这里</a><br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;docker.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--绑定build命令到mvn package中--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--绑定push命令到mvn deploy中--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>push-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--&lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Dockerfile文件在src/main/docker/Dockerfile<br>内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FROM java:8</div><div class="line">VOLUME /tmp</div><div class="line">ADD pin-user-0.1.0.jar app.jar</div><div class="line">RUN bash -c &apos;touch /app.jar&apos;</div><div class="line">EXPOSE 9000</div><div class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</div></pre></td></tr></table></figure>
<p><a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="external">https://spring.io/guides/gs/spring-boot-docker/</a><br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-22%20%E4%B8%8A%E5%8D%889.08.51.png" alt="说明"></p>
<p>特别解释一下<code>ENTRYPOINT</code>指令,<code>docker run</code>命令中的参数都会传递给<code>ENTRYPOINT</code>指令。<br>执行<code>docker run -d pin-user --config.host=localhost</code>启动容器。<br>会把–config.host加在<code>ENTRYPOINT</code>后面,相当于执行了<code>java -Djava.security.egd=file:/dev/./urandom -jar /app.jar --config.host=localhost</code>。有了这个参数后我们就能很方便的控制环境和配置文件了。</p>
<h2 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h2><p>jenkins中新建一个项目，配置好git后，执行目标服务器的一个shell脚本来启动容器。<br><img src="http://7xs4nh.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-22%20%E4%B8%8A%E5%8D%889.24.33.png" alt="配置界面"></p>
<p>然后开始构建项目，因为在<code>pom.xml</code>配置中绑定了<code>docker:build</code>到<code>package</code>命令中，所以会自动执行<code>docker:build</code>，这里遇到了一个docker命令的权限问题，jenkins抛出一个错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: Permission denied</div></pre></td></tr></table></figure></p>
<p>在jenkins所在的服务器上执行以下命令查看jenkins用户组    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id jenkins</div></pre></td></tr></table></figure>
<p>将jenkins用户加入到docker组中。        </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -a -G docker jenkins</div></pre></td></tr></table></figure>
<p>再构建，权限问题没有了，但是我又得到另外一个错误</p>
<blockquote>
<p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.3.258:build (default) on project pin-user: Exception caught: Error getting container 1e509efd653d0a3a942bf5ef34601305b7301d64378381614b55d3f5f88c7166 from driver devicemapper: open /dev/mapper/docker-202:33-5767218-1e509efd653d0a3a942bf5ef34601305b7301d64378381614b55d3f5f88c7166: no such file or directory</p>
</blockquote>
<p>说是因为docker在centos下的存储驱动原因，我这里试试把devicemapper换成btrfs。在centos下只能选择这2种方式。</p>
<p>需要把docker使用的分区的文件系统换掉。这一步会镜像会被全部清除掉，记得备份镜像，因为我是测试环境，所以镜像全部丢了也无所谓。教程如下。</p>
<p><a href="https://wiki.centos.org/PhilipJensen/CentOS6ConvertToBTRFS#head-c0851e0e7c9205aa8ca5616b85179b96981b24a7" target="_blank" rel="external">https://wiki.centos.org/PhilipJensen/CentOS6ConvertToBTRFS#head-c0851e0e7c9205aa8ca5616b85179b96981b24a7</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">umount /dev/xvdc1</div></pre></td></tr></table></figure>
<p>提示divice busy。下面命令把相关进程kill掉再umount</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fuser -m -v -i -k /dev/xvdc1</div></pre></td></tr></table></figure>
<p>再执行这个命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">btrfs-convert /dev/xvdc1</div></pre></td></tr></table></figure>
<p>完事后再挂载回去 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount /dev/xvdc1 /mnt2</div></pre></td></tr></table></figure>
<p>还是提示busy，reboot重启下，再mount。<br>然后在<code>/etc/sysconfig/docker</code>加上<code>--storage-driver btrfs</code>参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">other_args=&quot;--graph=/mnt2/apps/docker --storage-driver btrfs --insecure-registry=10.168.248.36:5000&quot;</div></pre></td></tr></table></figure>
<p>重启docker，再执行<code>docker info</code>就看到docker的存储驱动已经变了</p>
<p><img src="http://7xs4nh.com1.z0.glb.clouddn.com/2F11C9E9-193C-445E-86BA-CA76BB259CCA.png" alt=""></p>
<p>启动docker容器的时候报错了，把<code>/var/lib/docker/linkgraph.db</code>删了<br>因为我在<code>/etc/sysconfig/docker</code>修改了docker的目录。<br>所以我这里是目录是<code>/mnt2/apps/docker/linkgraph.db</code>。<br>service restart docker<br>重启下docker即可。<br>现在再用jenkins构建和发布就没有错误了。</p>
<h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mnt/web/scripts/docker_run.sh 10.168.248.36:5000/pin-user 9000 <span class="string">"--config.profile=dev --config.host=10.168.248.36"</span></div></pre></td></tr></table></figure>
<p>下面我解释一下这个启动docker容器的脚本。<br>脚本后面跟了3个参数，一个是镜像名称，一个是端口号，一个是启动容器加在<code>ENTRYPOINT</code>的项目配置。<br>先找出之前镜像对应的containerId，把它删除掉，然后再用新的镜像启动容器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#defined </span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_40/</div><div class="line"></div><div class="line">IMAGE=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line">OPTIONS=<span class="string">""</span></div><div class="line">PORT=<span class="string">"<span class="variable">$2</span>"</span></div><div class="line"><span class="comment">#param validate</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-lt</span> 2 ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"you must use like this : ./deploy_run.sh &lt;image&gt; &lt;port&gt; [options]"</span>  </div><div class="line">  <span class="built_in">exit</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$3</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">   OPTIONS=<span class="string">"<span class="variable">$3</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#拿到容器ID后kill掉并删除。</span></div><div class="line"><span class="function"><span class="title">delete_container</span></span>()&#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"the container id is <span class="variable">$1</span>"</span></div><div class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"delete container:"</span> <span class="variable">$1</span></div><div class="line">        docker stop <span class="variable">$1</span></div><div class="line">        docker rm <span class="_">-f</span> <span class="variable">$1</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; Get old image <span class="variable">$IMAGE</span> container id"</span></div><div class="line">CID=$(docker ps | grep <span class="string">"<span class="variable">$&#123;IMAGE&#125;</span>"</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</div><div class="line"><span class="comment">#因为jenkins每次的build的时候，如果镜像的tag没有指定，那么新的镜像build成功后，之前的镜像名称就会变成none。</span></div><div class="line"><span class="comment">#所以我们找出为名字为none的就是之前的镜像。</span></div><div class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$CID</span>"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"get old image id"</span></div><div class="line">        OLD_IMAGE_IDS=$(docker images --no-trunc| grep none | awk <span class="string">'&#123;print $3&#125;'</span>)</div><div class="line">        <span class="built_in">echo</span> <span class="variable">$OLD_IMAGE_IDS</span></div><div class="line">        <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$OLD_IMAGE_IDS</span>"</span> ]; <span class="keyword">then</span></div><div class="line">          <span class="keyword">if</span> [ -n <span class="variable">$&#123;OLD_IMAGE_IDS[1]&#125;</span> ]; <span class="keyword">then</span></div><div class="line">                <span class="keyword">for</span> OLD_IMAGE_ID <span class="keyword">in</span> <span class="variable">$OLD_IMAGE_IDS</span></div><div class="line">                <span class="keyword">do</span></div><div class="line">                    CID=$(docker ps | grep <span class="string">"<span class="variable">$&#123;OLD_IMAGE_ID:0:12&#125;</span>"</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</div><div class="line">                    delete_container <span class="variable">$CID</span></div><div class="line">                <span class="keyword">done</span></div><div class="line">          <span class="keyword">else</span></div><div class="line">                delete_container <span class="variable">$OLD_IMAGE_IDS</span></div><div class="line">          <span class="keyword">fi</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line"><span class="keyword">else</span></div><div class="line">        delete_container <span class="variable">$CID</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment">#启动容器</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"docker run -d -v /mnt:/mnt -p <span class="variable">$&#123;PORT&#125;</span>:<span class="variable">$&#123;PORT&#125;</span> <span class="variable">$IMAGE</span> <span class="variable">$OPTIONS</span>"</span></div><div class="line">docker run <span class="_">-d</span> -v /mnt:/mnt -p <span class="variable">$&#123;PORT&#125;</span>:<span class="variable">$&#123;PORT&#125;</span> <span class="variable">$IMAGE</span> <span class="variable">$OPTIONS</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"clean docker images"</span></div><div class="line"><span class="comment">#再次清理名称为none的docker镜像。</span></div><div class="line">docker images --no-trunc| grep none | awk <span class="string">'&#123;print $3&#125;'</span> | xargs -r docker rmi <span class="_">-f</span></div><div class="line"><span class="comment">#清理所有已经退出的容器</span></div><div class="line"><span class="comment">#docker rm `docker ps -a | grep Exited | awk '&#123;print $1&#125;'`</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"finished"</span></div></pre></td></tr></table></figure></p>
<p>可能最好的方式还是每次用不同的tag来build镜像，不过我这里就偷懒了，等到发布到生产环境的时候再指定吧。<br>注意到<code>&quot;--config.profile=dev --config.host=10.168.248.36&quot;</code>这个参数配合<code>ENTRYPOINT</code>就可以针对生产环境和测试环境加载不同的配置文件了。<br>项目中的配置文件:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> user</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      uri:</span> http://$&#123;config.host:<span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span>&#125;:<span class="number">8888</span></div><div class="line"><span class="attr">      profile:</span> $&#123;config.profile:dev&#125;</div><div class="line"><span class="attr">      name:</span> user</div><div class="line"></div><div class="line"><span class="attr">encrypt:</span></div><div class="line"><span class="attr">  failOnError:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>到此我们的一个基本的spring-cloud项目实践就完成了，其他特性和功能自行选择后再添加就可以了。<br>我接下来要继续加入的模块就是使用API网关构建微服务。概念如下</p>
<p><a href="http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway/" target="_blank" rel="external">http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway/</a></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring cloud项目实践(二)]]></title>
      <url>/2016/03/21/Spring-cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="配置中心和服务注册中心"><a href="#配置中心和服务注册中心" class="headerlink" title="配置中心和服务注册中心"></a>配置中心和服务注册中心</h1><p>我们先把配置中心和服务注册中心跑起来，这个先照着之前的教程做，很简单没什么变动。<br>就是git仓库需要密码的话加入下面的配置就好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8888</div><div class="line"></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: configserver</div><div class="line">  client:</div><div class="line">    registerWithEureka: true</div><div class="line">    fetchRegistry: true</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://$&#123;config.host:192.168.99.100&#125;:8761/eureka/</div><div class="line"></div><div class="line">spring:</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: yourgiturl</div><div class="line">          password: ****</div><div class="line">          username: ****</div></pre></td></tr></table></figure>
<p>这里的<code>${config.host:192.168.99.100}</code>表示没有读到config.host就用192.168.99.100这个值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar cloud-simple-service-1.0.0.jar --config.host=localhost</div></pre></td></tr></table></figure>
<p>这个用法就很灵活了，后面配合Dockerfile可以根据不同的环境来启动不同的配置。<br><a id="more"></a></p>
<h1 id="微服务应用"><a href="#微服务应用" class="headerlink" title="微服务应用"></a>微服务应用</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p><a href="http://www.cnblogs.com/skyblog/p/5129603.html" target="_blank" rel="external">http://www.cnblogs.com/skyblog/p/5129603.html</a><br>这篇文章讲了如何配置一个使用myabtis的项目，我们照着他的做就可以了。</p>
<h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><p>我这里说一下配置mongodb遇到的问题。<br>首先在<strong>pom.xml</strong>中加入mongodb的依赖。因为我是用的<em>mongodb3</em>，spring-boot-starter-data-mongodb依赖的驱动是2.0版本的，需要修改一下，加入3.0驱动的依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!--mongo驱动版本过低--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</div><div class="line">    &lt;exclusions&gt;</div><div class="line">        &lt;exclusion&gt;</div><div class="line">            &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</div><div class="line">        &lt;/exclusion&gt;</div><div class="line">    &lt;/exclusions&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.2.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">```     </div><div class="line"></div><div class="line">不过还是认证会出错，解决方案参考下面的文章。	</div><div class="line">[http://zjumty.iteye.com/blog/2198432](http://zjumty.iteye.com/blog/2198432)</div><div class="line"></div><div class="line">照着这个文章做完依然还是有错误，所以我这里还有一些额外的改动，一共自建了3个类。</div><div class="line">首先在`Application.java`里新加上`MongoAutoConfiguration.class`，`MongoDataAutoConfiguration.class`</div></pre></td></tr></table></figure>
<p>@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line">自定义的3个类如下		</div><div class="line">`MongoProperties.java`		</div><div class="line">```java</div><div class="line">@ConfigurationProperties(prefix = &quot;spring.data.mongodb&quot;)</div><div class="line">public class MongoProperties &#123;</div><div class="line"></div><div class="line">    private static final int DEFAULT_PORT = 27017;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Mongo server host.</div><div class="line">     */</div><div class="line">    private String host;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Mongo server port.</div><div class="line">     */</div><div class="line">    private Integer port = null;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Mongo database URI. When set, host and port are ignored.</div><div class="line">     */</div><div class="line">    private String uri = &quot;mongodb://localhost/test&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Database name.</div><div class="line">     */</div><div class="line">    private String database;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Authentication database name.</div><div class="line">     */</div><div class="line">    private String authenticationDatabase;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * GridFS database name.</div><div class="line">     */</div><div class="line">    private String gridFsDatabase;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Login user of the mongo server.</div><div class="line">     */</div><div class="line">    private String username;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Login password of the mongo server.</div><div class="line">     */</div><div class="line">    private char[] password;</div><div class="line"></div><div class="line">    public String getHost() &#123;</div><div class="line">        return this.host;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setHost(String host) &#123;</div><div class="line">        this.host = host;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDatabase() &#123;</div><div class="line">        return this.database;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDatabase(String database) &#123;</div><div class="line">        this.database = database;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getAuthenticationDatabase() &#123;</div><div class="line">        return this.authenticationDatabase;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAuthenticationDatabase(String authenticationDatabase) &#123;</div><div class="line">        this.authenticationDatabase = authenticationDatabase;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUsername() &#123;</div><div class="line">        return this.username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUsername(String username) &#123;</div><div class="line">        this.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public char[] getPassword() &#123;</div><div class="line">        return this.password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPassword(char[] password) &#123;</div><div class="line">        this.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void clearPassword() &#123;</div><div class="line">        if (this.password == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; this.password.length; i++) &#123;</div><div class="line">            this.password[i] = 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getUri() &#123;</div><div class="line">        return this.uri;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUri(String uri) &#123;</div><div class="line">        this.uri = uri;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Integer getPort() &#123;</div><div class="line">        return this.port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPort(Integer port) &#123;</div><div class="line">        this.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getGridFsDatabase() &#123;</div><div class="line">        return this.gridFsDatabase;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setGridFsDatabase(String gridFsDatabase) &#123;</div><div class="line">        this.gridFsDatabase = gridFsDatabase;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getMongoClientDatabase() &#123;</div><div class="line">        if (this.database != null) &#123;</div><div class="line">            return this.database;</div><div class="line">        &#125;</div><div class="line">        return new MongoClientURI(this.uri).getDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MongoClient createMongoClient(MongoClientOptions options)</div><div class="line">            throws UnknownHostException &#123;</div><div class="line">        try &#123;</div><div class="line">            if (hasCustomAddress() || hasCustomCredentials()) &#123;</div><div class="line">                if (options == null) &#123;</div><div class="line">                    options = MongoClientOptions.builder().build();</div><div class="line">                &#125;</div><div class="line">                List&lt;MongoCredential&gt; credentials = null;</div><div class="line">                if (hasCustomCredentials()) &#123;</div><div class="line">                    String database = this.authenticationDatabase == null</div><div class="line">                            ? getMongoClientDatabase() : this.authenticationDatabase;</div><div class="line">                    credentials = Arrays.asList(MongoCredential.createScramSha1Credential(</div><div class="line">                            this.username, database, this.password));</div><div class="line">                &#125;</div><div class="line">                String host = this.host == null ? &quot;localhost&quot; : this.host;</div><div class="line">                int port = this.port == null ? DEFAULT_PORT : this.port;</div><div class="line">                return new MongoClient(Arrays.asList(new ServerAddress(host, port)),</div><div class="line">                        credentials, options);</div><div class="line">            &#125;</div><div class="line">            // The options and credentials are in the URI</div><div class="line">            return new MongoClient(new MongoClientURI(this.uri, builder(options)));</div><div class="line">        &#125; finally &#123;</div><div class="line">            clearPassword();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean hasCustomAddress() &#123;</div><div class="line">        return this.host != null || this.port != null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean hasCustomCredentials() &#123;</div><div class="line">        return this.username != null &amp;&amp; this.password != null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private MongoClientOptions.Builder builder(MongoClientOptions options) &#123;</div><div class="line">        MongoClientOptions.Builder builder = MongoClientOptions.builder();</div><div class="line">        if (options != null) &#123;</div><div class="line">            builder.alwaysUseMBeans(options.isAlwaysUseMBeans());</div><div class="line">            builder.connectionsPerHost(options.getConnectionsPerHost());</div><div class="line">            builder.connectTimeout(options.getConnectTimeout());</div><div class="line">            builder.cursorFinalizerEnabled(options.isCursorFinalizerEnabled());</div><div class="line">            builder.dbDecoderFactory(options.getDbDecoderFactory());</div><div class="line">            builder.dbEncoderFactory(options.getDbEncoderFactory());</div><div class="line">            builder.description(options.getDescription());</div><div class="line">            builder.maxWaitTime(options.getMaxWaitTime());</div><div class="line">            builder.readPreference(options.getReadPreference());</div><div class="line">            builder.socketFactory(options.getSocketFactory());</div><div class="line">            builder.socketKeepAlive(options.isSocketKeepAlive());</div><div class="line">            builder.socketTimeout(options.getSocketTimeout());</div><div class="line">            builder.threadsAllowedToBlockForConnectionMultiplier(</div><div class="line">                    options.getThreadsAllowedToBlockForConnectionMultiplier());</div><div class="line">            builder.writeConcern(options.getWriteConcern());</div><div class="line">        &#125;</div><div class="line">        return builder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里跟上面的文章是一样的，就是<code>MongoCredential.createScramSha1Credential</code>这一句不一样而已。而且<code>MongoCredential.createScramSha1Credential</code>这个方法是在3.0的驱动里面才有的。</p>
<p>然后是<code>MongoConfiguration.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableConfigurationProperties(MongoProperties.class)</div><div class="line">public class MongoConfiguration &#123;</div><div class="line">    @Autowired</div><div class="line">    private MongoProperties properties;</div><div class="line"></div><div class="line">    @Autowired(required = false)</div><div class="line">    private MongoClientOptions options;</div><div class="line"></div><div class="line">    private Mongo mongo;</div><div class="line"></div><div class="line">    @PreDestroy</div><div class="line">    public void close() &#123;</div><div class="line">        if (this.mongo != null) &#123;</div><div class="line">            this.mongo.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public Mongo mongo() throws UnknownHostException &#123;</div><div class="line">        this.mongo = this.properties.createMongoClient(this.options);</div><div class="line">        return this.mongo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就引用我们刚才自建的MongoProperties，这样spring在链接mngodb的时候就不会认证出错了。不过我还遇到了了另外一个问题，MongoDataAutoConfiguration引用的MongoProperties也得换成我们自己的，而且升级成3.0的驱动以后，MongoDataAutoConfiguration里面的代码还得修改一下才能正常运行。下面是我修改以后的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@ConditionalOnClass(&#123;Mongo.class, MongoTemplate.class&#125;)</div><div class="line">@EnableConfigurationProperties(MongoProperties.class)</div><div class="line">@AutoConfigureAfter(MongoConfiguration.class)</div><div class="line">public class MongoDataConfiguration &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private MongoProperties properties;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private Environment environment;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private ResourceLoader resourceLoader;</div><div class="line"></div><div class="line"></div><div class="line">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class="line">    @Bean</div><div class="line">    @ConditionalOnMissingBean</div><div class="line">    public MongoDbFactory mongoDbFactory(Mongo mongo) throws Exception &#123;</div><div class="line">        String database = this.properties.getMongoClientDatabase();</div><div class="line">//        String authDatabase = this.properties.getAuthenticationDatabase();</div><div class="line">//        if (StringUtils.hasLength(authDatabase)) &#123;</div><div class="line">//            String username = this.properties.getUsername();</div><div class="line">//            String password = new String(this.properties.getPassword());</div><div class="line">//            UserCredentials credentials = new UserCredentials(username, password);</div><div class="line">//            return new SimpleMongoDbFactory(mongo, database, credentials, authDatabase);</div><div class="line">//        &#125;</div><div class="line">        return new SimpleMongoDbFactory(mongo, database);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @ConditionalOnMissingBean</div><div class="line">    public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory,</div><div class="line">                                       MongoConverter converter) throws UnknownHostException &#123;</div><div class="line">        return new MongoTemplate(mongoDbFactory, converter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @ConditionalOnMissingBean(MongoConverter.class)</div><div class="line">    public MappingMongoConverter mappingMongoConverter(MongoDbFactory factory,</div><div class="line">                                                       MongoMappingContext context, BeanFactory beanFactory) &#123;</div><div class="line">        DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);</div><div class="line">        MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver,</div><div class="line">                context);</div><div class="line">        try &#123;</div><div class="line">            mappingConverter</div><div class="line">                    .setCustomConversions(beanFactory.getBean(CustomConversions.class));</div><div class="line">        &#125; catch (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">            // Ignore</div><div class="line">        &#125;</div><div class="line">        return mappingConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @ConditionalOnMissingBean</div><div class="line">    public MongoMappingContext mongoMappingContext(BeanFactory beanFactory)</div><div class="line">            throws ClassNotFoundException &#123;</div><div class="line">        MongoMappingContext context = new MongoMappingContext();</div><div class="line">        context.setInitialEntitySet(getInitialEntitySet(beanFactory));</div><div class="line">        return context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Set&lt;Class&lt;?&gt;&gt; getInitialEntitySet(BeanFactory beanFactory)</div><div class="line">            throws ClassNotFoundException &#123;</div><div class="line">        Set&lt;Class&lt;?&gt;&gt; entitySet = new HashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line">        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(</div><div class="line">                false);</div><div class="line">        scanner.setEnvironment(this.environment);</div><div class="line">        scanner.setResourceLoader(this.resourceLoader);</div><div class="line">        scanner.addIncludeFilter(new AnnotationTypeFilter(Document.class));</div><div class="line">        scanner.addIncludeFilter(new AnnotationTypeFilter(Persistent.class));</div><div class="line">        for (String basePackage : getMappingBasePackages(beanFactory)) &#123;</div><div class="line">            if (StringUtils.hasText(basePackage)) &#123;</div><div class="line">                for (BeanDefinition candidate : scanner</div><div class="line">                        .findCandidateComponents(basePackage)) &#123;</div><div class="line">                    entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),</div><div class="line">                            MongoDataConfiguration.class.getClassLoader()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return entitySet;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static Collection&lt;String&gt; getMappingBasePackages(BeanFactory beanFactory) &#123;</div><div class="line">        try &#123;</div><div class="line">            return AutoConfigurationPackages.get(beanFactory);</div><div class="line">        &#125; catch (IllegalStateException ex) &#123;</div><div class="line">            // no auto-configuration package registered yet</div><div class="line">            return Collections.emptyList();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    @ConditionalOnMissingBean</div><div class="line">    public GridFsTemplate gridFsTemplate(MongoDbFactory mongoDbFactory,</div><div class="line">                                         MongoTemplate mongoTemplate) &#123;</div><div class="line">        return new GridFsTemplate(</div><div class="line">                new GridFsMongoDbFactory(mongoDbFactory, this.properties),</div><div class="line">                mongoTemplate.getConverter());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * &#123;@link MongoDbFactory&#125; decorator to respect</div><div class="line">     * &#123;@link MongoProperties#getGridFsDatabase()&#125; if set.</div><div class="line">     */</div><div class="line">    private static class GridFsMongoDbFactory implements MongoDbFactory &#123;</div><div class="line"></div><div class="line">        private final MongoDbFactory mongoDbFactory;</div><div class="line"></div><div class="line">        private final MongoProperties properties;</div><div class="line"></div><div class="line">        public GridFsMongoDbFactory(MongoDbFactory mongoDbFactory,</div><div class="line">                                    MongoProperties properties) &#123;</div><div class="line">            Assert.notNull(mongoDbFactory, &quot;MongoDbFactory must not be null&quot;);</div><div class="line">            Assert.notNull(properties, &quot;Properties must not be null&quot;);</div><div class="line">            this.mongoDbFactory = mongoDbFactory;</div><div class="line">            this.properties = properties;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public DB getDb() throws DataAccessException &#123;</div><div class="line">            String gridFsDatabase = this.properties.getGridFsDatabase();</div><div class="line">            if (StringUtils.hasText(gridFsDatabase)) &#123;</div><div class="line">                return this.mongoDbFactory.getDb(gridFsDatabase);</div><div class="line">            &#125;</div><div class="line">            return this.mongoDbFactory.getDb();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public DB getDb(String dbName) throws DataAccessException &#123;</div><div class="line">            return this.mongoDbFactory.getDb(dbName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public PersistenceExceptionTranslator getExceptionTranslator() &#123;</div><div class="line">            return this.mongoDbFactory.getExceptionTranslator();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public MongoTemplate syslogMongoTemplate(Mongo mongo) &#123;</div><div class="line">        return new MongoTemplate(mongo, &quot;syslog&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我注释掉了一些代码，然后授权就正常了，估计3.0以后认证方式改了，这些API已经完全被弃用了，使用的话会直接抛异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserCredentials credentials = new UserCredentials(username, password);</div><div class="line">return new SimpleMongoDbFactory(mongo, database, credentials, authDatabase);</div></pre></td></tr></table></figure>
<p>点进去看看源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Create an instance of SimpleMongoDbFactory given the Mongo instance, database name, and username/password</div><div class="line"> * </div><div class="line"> * @param mongo Mongo instance, must not be &#123;@literal null&#125;.</div><div class="line"> * @param databaseName Database name, must not be &#123;@literal null&#125; or empty.</div><div class="line"> * @param credentials username and password.</div><div class="line"> * @param authenticationDatabaseName the database name to use for authentication</div><div class="line"> * @deprecated since 1.7. The credentials used should be provided by &#123;@link MongoClient#getCredentialsList()&#125;.</div><div class="line"> */</div><div class="line">@Deprecated</div><div class="line">public SimpleMongoDbFactory(Mongo mongo, String databaseName, UserCredentials credentials,</div><div class="line">        String authenticationDatabaseName) &#123;</div><div class="line">    this(mongo, databaseName, credentials, false, authenticationDatabaseName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就是针对不同DB不同MongoTemplate的配置了，以后使用的话只需要在相应的类里注入就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">public MongoTemplate syslogMongoTemplate(Mongo mongo) &#123;</div><div class="line">    return new MongoTemplate(mongo, &quot;syslog&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">private MongoTemplate syslogMongoTemplate;</div></pre></td></tr></table></figure>
<h3 id="Mongodb配置信息"><a href="#Mongodb配置信息" class="headerlink" title="Mongodb配置信息"></a>Mongodb配置信息</h3><p>可以看到在<code>MongoProperties</code>中有一个注解是<code>@ConfigurationProperties(prefix = &quot;spring.data.mongodb&quot;)</code>。spring-boot会默认读取这些配置，由于我们使用了配置中心。所以它也能从配置中心的配置文件中读取到，不需要配置在本地。(我把示例demo中的properties换成了yml的配置方式)        </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysqldb:</div><div class="line">    datasource:</div><div class="line">        url: jdbc\:mysql\://localhost\:3306/test?useUnicode\=true&amp;characterEncoding\=utf-8</div><div class="line">        username: csst</div><div class="line">        password: csst</div><div class="line"></div><div class="line">spring:</div><div class="line">    data:</div><div class="line">      mongodb:</div><div class="line">        host: 10.168.248.36</div><div class="line">        port: 27017</div><div class="line">        username: test</div><div class="line">        password: test</div><div class="line">        authenticationDatabase: admin</div></pre></td></tr></table></figure>
<p>就这样加在之前配置文件中就好。如果在调试的过程中发现配置没有读取到，可以用下面的方式来查看配置中心是否配置正确并且已经开启服务。<br><code>http://10.168.248.36:8888/user-dev.yml</code><br><code>http://10.168.248.36:8888/user-dev.properties</code><br>在配置中心的后面加上配置文件的名字可以直接在浏览器中查看。在调试配置中心的时候也可以采取这样的操作，这样你能看到你的git地址和授权错误信息等。</p>
<p>spring-data-mongo提供了一个<code>MongoRepository</code>实现增删改查和复杂查询，在spring-boot中如何指定它使用哪个db呢？如果不配置他默认是使用的test。我测试了一下，加入下面的配置类就可以了。可以扫描一个包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableMongoRepositories(basePackageClasses = ApiLogRepository.class)</div><div class="line">@AutoConfigureAfter(MongoDataAutoConfiguration.class)</div><div class="line">public class SysLogDB extends AbstractMongoConfiguration &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private Mongo mongo;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected String getDatabaseName() &#123;</div><div class="line">        return &quot;syslog&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Mongo mongo() throws Exception &#123;</div><div class="line">        return mongo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里服务应用项目的mybatis和mongodb都配置好了，可以进行业务代码开发了。没有一个xml配置文件的感觉是不是很爽？下一篇文章讲解如何通过jenkins进行持续集成开发。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring cloud项目实践(一)]]></title>
      <url>/2016/03/21/Spring-cloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="基本概念和重要组件"><a href="#基本概念和重要组件" class="headerlink" title="基本概念和重要组件"></a>基本概念和重要组件</h1><p>最近看了一篇<a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=400645575&amp;idx=1&amp;sn=da55d75db55117046c520de88dde1123&amp;scene=1&amp;srcid=0315vVImLcHZpO2tTRVKg1w8&amp;key=710a5d99946419d9ff6bc76720229c7216fbcf348001d543434dfad7944207441ed01f44e57b0d87a834f8e8b6f673b7&amp;ascene=0" target="_blank" rel="external">文章</a>，了解到微服务架构的组成部分和概念，以前有看过一点dubbo，文章里介绍到Netflix这么一个公司：</p>
<blockquote>
<p>Netflix是一家成功实践微服务架构的互联网公司，几年前，Netflix就把它的几乎整个微服务框架栈开源贡献给了社区，这些框架和组件包括</p>
</blockquote>
<ul>
<li>Eureka:　服务注册发现框架</li>
<li>Zuul:　服务网关</li>
<li>Karyon:　服务端框架</li>
<li>Ribbon:　客户端框架</li>
<li>Hystrix:    服务容错组件</li>
<li>Archaius: 服务配置组件</li>
<li>Servo: Metrics组件</li>
<li>Blitz4j: 日志组件</li>
</ul>
<blockquote>
<p>Netflix的开源框架组件已经在Netflix的大规模分布式微服务环境中经过多年的生产实战验证，正逐步被社区接受为构造微服务框架的标准组件。Pivotal去年推出的Spring Cloud开源产品，主要是基于对Netflix开源组件的进一步封装，方便Spring开发人员构建微服务基础框架。对于一些打算构建微服务框架体系的公司来说，充分利用或参考借鉴Netflix的开源微服务组件(或Spring Cloud)，在此基础上进行必要的企业定制，无疑是通向微服务架构的捷径。</p>
</blockquote>
<p>Spring Cloud是微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。</p>
<p>觉得挺不错的，就找找资料尝试实战一下。<br>在此记录和回顾一下过程中遇到的问题和实际项目中需要解决的一些问题。<br><a id="more"></a><br>接下来我看了2个文章<br>第一个是<br><a href="http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html" target="_blank" rel="external">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a><br>中文版的：<a href="http://www.chinacloud.cn/show.aspx?id=20968&amp;cid=12" target="_blank" rel="external">http://www.chinacloud.cn/show.aspx?id=20968&amp;cid=12</a><br>第二个是<br><a href="http://www.cnblogs.com/skyblog/category/774535.html" target="_blank" rel="external">http://www.cnblogs.com/skyblog/category/774535.html</a>    </p>
<p>在继续往下看之前，可以先把上面2个文章看了。第一个是老外写的，用一个实例的demo演示了spring-cloud构建微服务架构的项目。</p>
<p>第二个文章则很好的介绍了spring-cloud各个子项目的作用。也用了一个demo演示了spring-cloud构建的微服务架构的项目。建议也看看动手试试，我这里就不再赘述了。后面的文章都是在基于看过这2篇文章后的基础上写的，很多东西没有再进行二次解释。这里贴一下spring-cloud的子项目。        </p>
<blockquote>
<p>目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，spring cloud子项目包括：</p>
</blockquote>
<ul>
<li>Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。</li>
<li>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</li>
<li>Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。</li>
<li>Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。</li>
<li>Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</li>
<li>Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。</li>
<li>Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</li>
<li>Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。</li>
<li>Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。</li>
<li>Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。</li>
<li>Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。</li>
<li>Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</li>
<li>Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。</li>
<li>Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</li>
<li>Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</li>
</ul>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>在了解了微服务的概念，以及spring-cloud各个子项目之间的关系后。<br>接下来我们就自己动手构建一个项目，做一个能跑起来的项目实际上需要3个模块：        </p>
<ol>
<li>Spring Cloud Config</li>
<li>Spring Cloud Eureka</li>
<li>自己的项目</li>
</ol>
<p>在配置好这几个项目后，我会用jenkins自动build项目，然后发布到docker中再启动容器。其中还可以针对生产和测试环境采用不同的配置。我的服务器环境是centos6.5。</p>
<p>我的服务应用目前做了以下2个配置。<br>1.mongodb<br>2.mybatis</p>
<p>下篇文章详细讲解。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jenkins配合docker持续集成]]></title>
      <url>/2015/12/15/jenkins%E9%85%8D%E5%90%88docker%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>我这里用docker来做持续集成的思路和<a href="http://sail-y.github.io/2015/12/14/jenkins%E5%92%8Ctomcat%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/" target="_blank" rel="external">jenkins和tomcat的持续集成</a>是一样的。都是用jenkins拉取git的代码然后打war包，只不过重启tomcat步骤换成了docker的重启。<br>直接展示一下docker的脚本吧。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#defined </div><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_40/</div><div class="line">REGISTRY_URL=localhost:5000</div><div class="line">WEB_DIR=&quot;$WEB_DIR/webapps&quot;</div><div class="line">PORT=&quot;8080&quot;</div><div class="line">IMAGE=&quot;$1&quot;</div><div class="line">PROJECT=&quot;$2&quot;</div><div class="line"></div><div class="line">#param validate</div><div class="line">if [ $# -lt 2 ]; then</div><div class="line">  echo &quot;you must use like this : ./deploy_docker.sh &lt;image&gt; &lt;project&gt; [war dir] [port]&quot;  </div><div class="line">  exit</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$3&quot; != &quot;&quot; ]; then</div><div class="line">   WEB_DIR=&quot;$3&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$4&quot; != &quot;&quot; ]; then</div><div class="line">   PORT=&quot;$4&quot;</div><div class="line">fi</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#publish project</div><div class="line">echo &quot;delete old $PROJECT.war&quot;</div><div class="line">rm -rf &quot;$WEB_DIR&quot;/webapps/$PROJECT</div><div class="line">echo &quot;copy new $PROJECT.war&quot;</div><div class="line">cp $WEB_DIR/$PROJECT.war &quot;$WEB_DIR&quot;/webapps/$PROJECT.war</div><div class="line">#bak project</div><div class="line">BAK_DIR=$WEB_DIR/bak/$PROJECT/`date +%Y%m%d`</div><div class="line">mkdir -p &quot;$BAK_DIR&quot;</div><div class="line">cp &quot;$WEB_DIR&quot;/$PROJECT.war &quot;$BAK_DIR&quot;/&quot;$PROJECT&quot;_`date +%H%M%S`.war</div><div class="line">#remove tmp</div><div class="line">rm -rf $WEB_DIR/$PROJECT.war</div><div class="line"></div><div class="line">echo &quot;build image:&quot; $IMAGE</div><div class="line">docker build -t $REGISTRY_URL/$IMAGE $WEB_DIR</div><div class="line">echo &quot;push image:&quot; $IMAGE</div><div class="line">docker push $REGISTRY_URL/$IMAGE</div><div class="line"></div><div class="line">echo &apos;&gt;&gt;&gt; Get old container id&apos;</div><div class="line">CID=`docker ps | grep &quot;dev&quot; | awk &apos;&#123;print $1&#125;&apos;`</div><div class="line"></div><div class="line">if [ -n &quot;$CID&quot; ]; then</div><div class="line">        echo &quot;delete container:&quot; $CID</div><div class="line">        docker stop $CID</div><div class="line">        docker rm -f $CID</div><div class="line">fi</div><div class="line">echo &quot;delete local image:&quot; $IMAGE</div><div class="line">docker rmi -f $REGISTRY_URL/$IMAGE</div><div class="line">docker run -d -p $PORT:8080 -v /mnt:/mnt --name dev $REGISTRY_URL/$IMAGE</div><div class="line"></div><div class="line">echo &quot;finished&quot;</div></pre></td></tr></table></figure>
<p>上面是步骤是这样：        </p>
<ol>
<li>jenkins将war包上传到$WEB_DIR目录下，然后执行脚本。        </li>
<li>这个目录下有一个webapps目录，用来存放正在运行的项目war包，是从$WEB_DIR拷贝过去的。        </li>
<li>然后build docker的镜像，并push到私库中。<code>docker build -t $REGISTRY_URL/$IMAGE $WEB_DIR</code>这里最后一个参数是Dockerfile的路径，我在这个目录下还写了一个docker的配置。        </li>
<li>停止之前正在运行的Container。        </li>
<li>删除本地的镜像。        </li>
<li>启动镜像：<code>-v /mnt:/mnt</code>是要映射宿主机的的目录(保存错误日志到宿主机)。<code>--name dev</code>是容器的名字，这个自行修改。<code>docker ps | grep &quot;dev&quot; | awk &#39;{print $1}&#39;</code>这里的<code>dev</code>也需要更换。因为删除了本地的镜像，所以会去私库重新里面下载。</li>
</ol>
<blockquote>
<p>这个脚本有一点问题，local的image有时候删除不掉，不影响运行，但是随着编译的次数，存储空间会越用越多（因为我最终没有采用docker，所以没去深究了）。</p>
</blockquote>
<p>还有Dockerfile如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FROM tomcat:8.0.30-jre8</div><div class="line">ADD webapps /usr/local/tomcat/webapps</div></pre></td></tr></table></figure>
<p>基于官方的tomcat8构建，并且把webapps下的文件拷贝到容器中的tomcat webapps下，这个webapps必须是Dockerfile同级目录下的，也就是<code>$WEB_DIR</code>这个目录下。</p>
<p>还有另外一种方式操作起来更加简单，就是映射宿主机的路径直接写成<code>-v $WEB_DIR/webapps:/usr/local/tomcat/webapps</code>，这样还省去了build时拷贝项目的过程。</p>
<p>但是我觉得都不是很方便，查看日志不太方便，而且docker编译和启动也比较耗时，相比直接kill掉tomcat重启要慢一些。目前没有找到一个更好的实践方式，需要慢慢探索一下，为了不影响开发，我又换回了之前直接kill tomcat的方式。</p>
]]></content>
      
        <categories>
            
            <category> CI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jenkins和tomcat的持续集成]]></title>
      <url>/2015/12/14/jenkins%E5%92%8Ctomcat%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>今天来说一下如何用jenkins做持续集成。<br>jenkins我这里就不介绍了，重点介绍一下如何用jenkins对tomcat进行持续集成。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>流程是这样的：        </p>
<ol>
<li>jenkins从git(or svn)拉取代码，进行构建。        </li>
<li>将打出来的war包用jenkins的插件(Publish over SSH)传到你要部署的服务器。        </li>
<li>执行一个shell脚本，将正在运行的tomcat进程kill掉，把war包拷到tomcat目录的webapps下。然后在运行${TOMCAT_DIR}/bin/startup.sh。<a id="more"></a>
</li>
</ol>
<p><img src="http://7xiqxx.com1.z0.glb.clouddn.com/123123.jpg" alt="如图"></p>
<p>是不是很简单？这样我们在发布应用的时候就再也不需要每次先在本地打包，再手动去删除之前的项目，然后通过ftp工具上传到服务器上，最后再重启tomcat。如果一天要进行几十次类似的操作，其实还是非常耗时的。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="配置jenkins拉取git代码"><a href="#配置jenkins拉取git代码" class="headerlink" title="配置jenkins拉取git代码"></a>配置jenkins拉取git代码</h2><p><img src="http://7xiqxx.com1.z0.glb.clouddn.com/3807ACD4-7799-45F9-89BF-D67BCC4BD2D3.png" alt="jenkins配置"><br>首先配置在jenkins中配置好，然后再去gitlab里面配上hook触发点。<br><img src="http://7xiqxx.com1.z0.glb.clouddn.com/B2859F18-E479-401F-AB0C-8C852F7CA54C.png" alt="gitlab配置"><br>我这里是配置的当gitlab中merge的时候触发构建操作。        </p>
<h2 id="用Maven打包应用"><a href="#用Maven打包应用" class="headerlink" title="用Maven打包应用"></a>用Maven打包应用</h2><p>这个很简单：<br><img src="http://7xiqxx.com1.z0.glb.clouddn.com/4B6A6B6C-9D16-4B2B-BC50-46EAA3563AB8.png" alt="打包"></p>
<h2 id="上传包到服务器并执行脚本"><a href="#上传包到服务器并执行脚本" class="headerlink" title="上传包到服务器并执行脚本"></a>上传包到服务器并执行脚本</h2><p>这里需要在jenkins里安装Publish over SSH插件，并在全局配置中配置一下。<br><img src="http://7xiqxx.com1.z0.glb.clouddn.com/B7FAD378-98CD-480D-906B-3657E4A5FEB8.png" alt=""></p>
<p>然后下面是项目中的配置</p>
<p><img src="http://7xiqxx.com1.z0.glb.clouddn.com/F254D9A3-8589-4FE7-9993-BFF799982B7D.png" alt=""></p>
<p>上图中的war其实是基于全局配置中的路径，举个例子：</p>
<blockquote>
<p>全局配置中的Remote Directory是 <code>/web</code>，项目配置中的Remote directory是<code>war</code>，那么实际上war传送的路径是/web/war    </p>
</blockquote>
<p>最后就是最重要的脚本        </p>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本的目的就是kill掉当前tomcat的进程，复制war包，启动tomcat。<br>脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#defined </span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_40/</div><div class="line">TOMCAT_HOME=<span class="string">"/mnt/web/apache-tomcat-7.0.54"</span></div><div class="line">TOMCAT_PORT=8080</div><div class="line">PROJECT=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line"><span class="comment">#param validate</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-lt</span> 1 ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"you must use like this : ./deploy.sh &lt;projectname&gt; [tomcat port] [tomcat home dir]"</span>  </div><div class="line">  <span class="built_in">exit</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">   TOMCAT_PORT=<span class="variable">$2</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$3</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">   TOMCAT_HOME=<span class="string">"<span class="variable">$3</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment">#shutdown tomcat</span></div><div class="line"><span class="comment">#"$TOMCAT_HOME"/bin/shutdown.sh</span></div><div class="line"><span class="comment">#echo "tomcat shutdown"</span></div><div class="line"></div><div class="line"><span class="comment">#check tomcat process</span></div><div class="line">tomcat_pid=`/usr/sbin/lsof -n -P -t -i :<span class="variable">$TOMCAT_PORT</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"current :"</span> <span class="variable">$tomcat_pid</span></div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$tomcat_pid</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"> sleep 5</div><div class="line"> tomcat_pid=`/usr/sbin/lsof -n -P -t -i :<span class="variable">$TOMCAT_PORT</span>`</div><div class="line"> <span class="built_in">echo</span> <span class="string">"scan tomcat pid :"</span> <span class="variable">$tomcat_pid</span></div><div class="line"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$tomcat_pid</span>"</span> ]; <span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"kill tomcat :"</span> <span class="variable">$tomcat_pid</span></div><div class="line">   <span class="built_in">kill</span> -9 <span class="variable">$tomcat_pid</span></div><div class="line"> <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#publish project</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"scan no tomcat pid,<span class="variable">$PROJECT</span> publishing"</span></div><div class="line">rm -rf <span class="string">"<span class="variable">$TOMCAT_HOME</span>"</span>/webapps/<span class="variable">$PROJECT</span></div><div class="line">cp /yourwarpath/<span class="variable">$PROJECT</span>.war <span class="string">"<span class="variable">$TOMCAT_HOME</span>"</span>/webapps/<span class="variable">$PROJECT</span>.war</div><div class="line"><span class="comment">#bak project</span></div><div class="line">BAK_DIR=/yourwarpath/bak/<span class="variable">$PROJECT</span>/`date +%Y%m%d`</div><div class="line">mkdir -p <span class="string">"<span class="variable">$BAK_DIR</span>"</span></div><div class="line">cp <span class="string">"<span class="variable">$TOMCAT_HOME</span>"</span>/webapps/<span class="variable">$PROJECT</span>.war <span class="string">"<span class="variable">$BAK_DIR</span>"</span>/<span class="string">"<span class="variable">$PROJECT</span>"</span>_`date +%H%M%S`.war</div><div class="line"><span class="comment">#remove tmp</span></div><div class="line">rm -rf /yourwarpath/<span class="variable">$PROJECT</span>.war</div><div class="line"><span class="comment">#start tomcat</span></div><div class="line"><span class="string">"<span class="variable">$TOMCAT_HOME</span>"</span>/bin/startup.sh</div><div class="line"><span class="built_in">echo</span> <span class="string">"tomcat is starting,please try to access <span class="variable">$PROJECT</span> conslone url"</span></div></pre></td></tr></table></figure>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>还有一种方式是通过jenkins的deploy plugin来部署应用，我最早的时候用过一段时间这种方式。不知道是什么原因，部署多次之后会导致内存溢出，每部署一次服务器被占用的内存就多一点。最终导致服务器崩溃，ssh都连接不上去，所以最后换了shell脚本的方案。</p>
]]></content>
      
        <categories>
            
            <category> CI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis 枚举存储]]></title>
      <url>/2015/12/11/Mybatis-%E6%9E%9A%E4%B8%BE%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>我们在写程序的时候会遇到这种需求。就是我的对象里面有一个属性是一个枚举值，但是mybatis默认是不支持的，官方提供了一个typeHandler可以用枚举的ordinal()来进行存和取的自动转换。把它配置在<br><code>mybatis-configuration.xml</code>里。    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;typeHandlers&gt;</div><div class="line">        &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot; javaType=&quot;com.xxx.user.UserType&quot;/&gt;</div><div class="line">&lt;/typeHandlers&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>但是这里有一些问题，必须如果数据库里面存在了别的数字，举个例，有以下枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum UserType&#123;</div><div class="line">    ADMIN, EDITOR</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举在数据库中对应的数字应该是0和1，问题如下</p>
<ol>
<li>枚举写的顺序不能变，否则数据库数据会错乱</li>
<li>枚举序数中间不能中断(0，2)</li>
<li>数据库里有除了0和1之外的数字，在查询数据的时候程序会得到一个异常(<code>ArrayIndexOutOfBoundsException</code>)</li>
</ol>
<p>最怕的就是程序出异常了，这里<code>ArrayIndexOutOfBoundsException</code>的原因是因为EnumOrdinalTypeHandler的代码大致是下面这个的意思。</p>
<pre><code>UserType.values()[i]
</code></pre><p>所以就出现了我们写代码其实并不经常会遇到的<code>ArrayIndexOutOfBoundsException</code></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了避免出现这些情况，有个简单的办法就是重写一个<code>EnumOrdinalTypeHandler</code>，<br>我这里贴一下我的解决方案。<br>首先要为所有枚举写一个接口，为了获取枚举对应的intValue,代码如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommonEnum</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取枚举值对应的枚举</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> enumClass 枚举类</div><div class="line">     * <span class="doctag">@param</span> enumValue 枚举值</div><div class="line">     * <span class="doctag">@return</span> 枚举</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> &lt;E extends CommonEnum&lt;E&gt;&gt; <span class="function">E <span class="title">getEnum</span><span class="params">(<span class="keyword">final</span> Class&lt;E&gt; enumClass, <span class="keyword">final</span> Integer enumValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (enumValue == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> valueOf(enumClass, enumValue);</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IllegalArgumentException ex) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取枚举值对应的枚举</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> enumClass 枚举类</div><div class="line">     * <span class="doctag">@param</span> enumValue 枚举值</div><div class="line">     * <span class="doctag">@return</span> 枚举</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> &lt;E extends CommonEnum&gt; <span class="function">E <span class="title">valueOf</span><span class="params">(Class&lt;E&gt; enumClass, Integer enumValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (enumValue == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"EnumValue is null"</span>);</div><div class="line">        <span class="keyword">return</span> getEnumMap(enumClass).get(enumValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取枚举键值对</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> enumClass 枚举类型</div><div class="line">     * <span class="doctag">@return</span> 键值对</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> &lt;E extends CommonEnum&gt; <span class="function">Map&lt;Integer, E&gt; <span class="title">getEnumMap</span><span class="params">(Class&lt;E&gt; enumClass)</span> </span>&#123;</div><div class="line">        E[] enums = enumClass.getEnumConstants();</div><div class="line">        <span class="keyword">if</span> (enums == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(enumClass.getSimpleName() + <span class="string">" does not represent an enum type."</span>);</div><div class="line">        Map&lt;Integer, E&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span> * enums.length);</div><div class="line">        <span class="keyword">for</span> (E t : enums)&#123;</div><div class="line">            map.put(t.getValue(), t);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面3个静态方法也可以提取到工具类中，我这里偷了一下懒，也因为我是用的JDK8。<br>枚举实例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserType implements CommonEnum&lt;UserType&gt; &#123;</div><div class="line">    ADMIN(<span class="number">0</span>), EDITOR(<span class="number">2</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    UserType(<span class="keyword">int</span> value) &#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就是一个很常见的枚举，重点在下面的typeHandler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEnumTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">CommonEnum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Class&lt;E&gt; type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomEnumTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Type argument cannot be null"</span>);</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        E[] enums = type.getEnumConstants();</div><div class="line">        <span class="keyword">if</span> (enums == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(type.getSimpleName() + <span class="string">" does not represent an enum type."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, E parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        ps.setInt(i, parameter.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = rs.getInt(columnName);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> CommonEnum.getEnum(type, i);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot convert "</span> + i + <span class="string">" to "</span> + type.getSimpleName() + <span class="string">" by int value."</span>, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = rs.getInt(columnIndex);</div><div class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> CommonEnum.getEnum(type, i);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot convert "</span> + i + <span class="string">" to "</span> + type.getSimpleName() + <span class="string">" by int value."</span>, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = cs.getInt(columnIndex);</div><div class="line">        <span class="keyword">if</span> (cs.wasNull()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> CommonEnum.getEnum(type, i);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot convert "</span> + i + <span class="string">" to "</span> + type.getSimpleName() + <span class="string">" by int value."</span>, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类基本上也是拷的<code>EnumOrdinalTypeHandler</code>。重要的改动的代码如下：</p>
<pre><code>ps.setInt(i, parameter.getValue());
return CommonEnum.getEnum(type, i);
</code></pre><p>第一句是插入和更新的时候用到的，第二句是查询的时候用到的，最后把<code>mybatis-configuration.xml</code>里的改一下。    </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;typeHandlers&gt;</div><div class="line">        &lt;typeHandler handler="xxx.CustomEnumTypeHandler" javaType="com.xxx.user.UserType"/&gt;</div><div class="line">&lt;/typeHandlers&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos 6.5 安装docker]]></title>
      <url>/2015/12/08/centos-6-5-%E5%AE%89%E8%A3%85docker/</url>
      <content type="html"><![CDATA[<p>先试试把开环境用docker来部署。</p>
<p><a href="http://docs.docker.com/engine/installation/centos/" target="_blank" rel="external">http://docs.docker.com/engine/installation/centos/</a><br>直接按照这里安装就可以了，不过我在这里遇到了一点问题。<br>我是centos6.5，内核在 3.8 以上<br>通过以下命令查看您的 CentOS 内核：  </p>
<pre><code>uname -r
</code></pre><p>如果执行以上命令后，输出的内核版本号低于 3.8，请参考下面的方法来来升级您的 Linux 内核。  </p>
<p>对于 CentOS 6.5 而言，内核版本默认是 2.6。首先，可通过以下命令安装最新内核：  </p>
<pre><code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -ivh http://www.elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm
yum -y --enablerepo=elrepo-kernel install kernel-lt
</code></pre><p>随后，编辑以下配置文件：  </p>
<pre><code>vi /etc/grub.conf
</code></pre><p>将<code>default=1</code>修改为<code>default=0</code>。<br><a id="more"></a><br>最后，通过<code>reboot</code>命令重启操作系统。</p>
<p>重启后如果不出意外的话，再次查看内核，您的 CentOS 内核将会显示为 3.10。</p>
<p>如果到这里，您和我们所期望的结果是一致的。恭喜您！下面我们就一起来安装 Docker 了。</p>
<p>接下来按照官网文档的步骤安装  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div><div class="line">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;</div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div><div class="line">sudo yum install docker-engine</div><div class="line">```  </div><div class="line">我在这里遇到了下面的一个问题：</div><div class="line"></div><div class="line">	Error: docker-engine conflicts with docker-io-1.7.1-2.el6.x86_64</div><div class="line">	</div><div class="line"></div><div class="line">查了一会发现是因为docker-io改名为docker-engine，所以造成冲突了，我这台服务器还安装过以前版本的，执行以下命令来删除老的版本。 </div><div class="line">	</div><div class="line">	yum remove docker-io</div><div class="line"></div><div class="line">然后再来安装</div><div class="line"></div><div class="line">	sudo yum install docker-engine</div><div class="line"></div><div class="line">就可以安装成功了，继续下一步。我试着部署一个tomcat，执行以下命令下载一个centos镜像</div><div class="line"></div><div class="line">	docker pull centos</div><div class="line"></div><div class="line">然后我发现每次命令都要用sudo，很不方便</div><div class="line"></div><div class="line">原来默认安装完 docker 后，每次执行 docker 都需要运行 sudo 命令，非常浪费时间影响效率。如果不跟 sudo，直接执行 `docker images` 命令会有如下问题：</div><div class="line"></div><div class="line">	FATA[0000] Get http:///var/run/docker.sock/v1.18/images/json: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?  </div><div class="line"></div><div class="line">参考这里 http://bsaunder.github.io/2014/12/21/running-docker-without-sudo/     </div><div class="line">执行以下命令来解决</div><div class="line"></div><div class="line">	sudo groupadd docker</div><div class="line">	</div><div class="line">将用户加入该 group 内。</div><div class="line"></div><div class="line">	sudo gpasswd -a $&#123;USER&#125; docker</div><div class="line"></div><div class="line">重启docker</div><div class="line">	</div><div class="line">	sudo service docker restart</div><div class="line">	</div><div class="line">**切换当前会话到新group** (如果想立即生效此步不可少，因为 `groups` 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。)</div><div class="line">	</div><div class="line">	newgrp - docker</div><div class="line">	</div><div class="line">还有就是docker的官方镜像下载实在是太慢了，找到一个国内提供加速服务的[daocloud](https://dashboard.daocloud.io/)</div><div class="line"></div><div class="line">注册登录后使用加速器功能就可以了</div><div class="line"></div><div class="line">docker默认的images存放路径是/var/lib/docker  </div><div class="line">我的服务器系统硬盘自带的容量很小  </div><div class="line">所以我要修改他的存放路径，修改下面文件里的other_args参数，重启docker。</div><div class="line"></div><div class="line">	sudo vim /etc/sysconfig/docker</div><div class="line"></div><div class="line">	other_args=&quot;--graph=yourpath&quot;</div><div class="line">	</div><div class="line">下面还有一个私库的问题，不用localhost访问出现了：</div></pre></td></tr></table></figure>
<p>unable to ping registry endpoint <a href="https://10.168.248.36:5000/v0/" target="_blank" rel="external">https://10.168.248.36:5000/v0/</a><br>v2 ping attempt failed with error: Get <a href="https://10.168.248.36:5000/v2/" target="_blank" rel="external">https://10.168.248.36:5000/v2/</a>: tls: oversized record received with length 20527<br> v1 ping attempt failed with error: Get <a href="https://10.168.248.36:5000/v1/_ping" target="_blank" rel="external">https://10.168.248.36:5000/v1/_ping</a>: tls: oversized record received with length 20527</p>
<p><code>``
依然是修改</code>/etc/sysconfig/docker`里面的other_args，加上部署私库的机器的IP。</p>
<pre><code>--insecure-registry=yourip:5000
</code></pre><p>这样就可以正常的push和pull了</p>
]]></content>
      
        <categories>
            
            <category> centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitlab替换nginx服务]]></title>
      <url>/2015/10/29/gitlab%E6%9B%BF%E6%8D%A2nginx%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>之前在自己服务器上搭建服务器，这是之前的文章<br><a href="http://sail-y.github.io/2015/02/06/centos-6-5-%E5%AE%89%E8%A3%85gitlab%E5%AE%89%E8%A3%85%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="external">gitlab安装需要注意的问题</a></p>
<p>后来在按照官网上替换自带服务器上的nginx的时候出现了一点问题。也是找了很久才找到这么一篇帖子，我在这里把nginx的部分转载过来一下。<br><a id="more"></a><br><a href="https://www.owent.net/2014/10/gitlab%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%A1.html" target="_blank" rel="external">原文地址</a></p>
<blockquote>
<p>其次，我替换自己的nginx服务器的时候，nginx官方提供的包并不带gitlab要求的passenger模块，所以不能直接用官方提供的方法。我是用gitlab-ctl reconfigure生成了nginx的配置以后复制到自己的nginx里去的。生成的配置在 /var/opt/gitlab/nginx/conf/gitlab-http.conf</p>
<p>还是nginx，我的nginx的启动账户不是gitlab的（默认是gitlab-www），所以会出现502错误。日志里内容是访问fastcgi权限不足。所以还要chmod 755 /var/opt/gitlab/gitlab-rails/sockets</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转]Twitter的分布式自增ID算法Snowflake实现分析及其Java、Php和Python版]]></title>
      <url>/2015/04/22/-%E8%BD%AC-Twitter%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E8%87%AA%E5%A2%9EID%E7%AE%97%E6%B3%95Snowflake%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6Java%E3%80%81Php%E5%92%8CPython%E7%89%88/</url>
      <content type="html"><![CDATA[<p>转载：<a href="http://www.dengchuanhua.com/132.html" target="_blank" rel="external">http://www.dengchuanhua.com/132.html</a></p>
<p>在分布式系统中，需要生成全局UID的场合还是比较多的，twitter的snowflake解决了这种需求，实现也还是很简单的，除去配置信息，核心代码就是毫秒级时间41位+机器ID 10位+毫秒内序列12位。</p>
<p>该项目地址为：<a href="https://github.com/twitter/snowflake是用Scala实现的。" target="_blank" rel="external">https://github.com/twitter/snowflake是用Scala实现的。</a></p>
<p>python版详见开源项目<a href="https://github.com/erans/pysnowflake。" target="_blank" rel="external">https://github.com/erans/pysnowflake。</a></p>
<p>核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---0000000000 00</div></pre></td></tr></table></figure>
<p>在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。</p>
<p>这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。<br><a id="more"></a><br>且看其核心代码：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">&lt;/pre&gt;</div><div class="line"><span class="comment">/** Copyright 2010-2012 Twitter, Inc.*/</span></div><div class="line"><span class="keyword">package</span> com.twitter.service.snowflake</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.twitter.ostrich.stats.<span class="type">Stats</span></div><div class="line"><span class="keyword">import</span> com.twitter.service.snowflake.gen._</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Random</span></div><div class="line"><span class="keyword">import</span> com.twitter.logging.<span class="type">Logger</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * An object that generates IDs.</div><div class="line"> * This is broken into a separate class in case</div><div class="line"> * we ever want to support multiple worker threads</div><div class="line"> * per process</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span>(<span class="params">val workerId: <span class="type">Long</span>, val datacenterId: <span class="type">Long</span>, private val reporter: <span class="type">Reporter</span>, var sequence: <span class="type">Long</span> = 0L</span>)</span></div><div class="line"><span class="keyword">extends</span> <span class="type">Snowflake</span>.<span class="type">Iface</span> &#123;</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">genCounter</span></span>(agent: <span class="type">String</span>) = &#123;</div><div class="line">    <span class="type">Stats</span>.incr(<span class="string">"ids_generated"</span>)</div><div class="line">    <span class="type">Stats</span>.incr(<span class="string">"ids_generated_%s"</span>.format(agent))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> exceptionCounter = <span class="type">Stats</span>.getCounter(<span class="string">"exceptions"</span>)</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> log = <span class="type">Logger</span>.get</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> rand = <span class="keyword">new</span> <span class="type">Random</span></div><div class="line"></div><div class="line">  <span class="keyword">val</span> twepoch = <span class="number">1288834974657</span>L</div><div class="line"></div><div class="line"> <span class="comment">//机器标识位数</span></div><div class="line"></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> workerIdBits = <span class="number">5</span>L</div><div class="line"></div><div class="line"><span class="comment">//数据中心标识位数</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> datacenterIdBits = <span class="number">5</span>L</div><div class="line"></div><div class="line"><span class="comment">//机器ID最大值</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> maxWorkerId = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; workerIdBits)</div><div class="line"></div><div class="line"><span class="comment">//数据中心ID最大值</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> maxDatacenterId = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; datacenterIdBits)</div><div class="line"></div><div class="line"><span class="comment">//毫秒内自增位</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> sequenceBits = <span class="number">12</span>L</div><div class="line"></div><div class="line"><span class="comment">//机器ID偏左移12位</span></div><div class="line"></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> workerIdShift = sequenceBits</div><div class="line"></div><div class="line"><span class="comment">//数据中心ID左移17位</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> datacenterIdShift = sequenceBits + workerIdBits</div><div class="line"></div><div class="line"><span class="comment">//时间毫秒左移22位</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> sequenceMask = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; sequenceBits)</div><div class="line"></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> lastTimestamp = <span class="number">-1</span>L</div><div class="line"></div><div class="line">  <span class="comment">// sanity check for workerId</span></div><div class="line">  <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</div><div class="line">    exceptionCounter.incr(<span class="number">1</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"worker Id can't be greater than %d or less than 0"</span>.format(maxWorkerId))</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</div><div class="line">    exceptionCounter.incr(<span class="number">1</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>.format(maxDatacenterId))</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  log.info(<span class="string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span>,</div><div class="line">    timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_id</span></span>(useragent: <span class="type">String</span>): <span class="type">Long</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (!validUseragent(useragent)) &#123;</div><div class="line">      exceptionCounter.incr(<span class="number">1</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidUserAgentError</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> id = nextId()</div><div class="line">    genCounter(useragent)</div><div class="line"></div><div class="line">    reporter.report(<span class="keyword">new</span> <span class="type">AuditLogEntry</span>(id, useragent, rand.nextLong))</div><div class="line">    id</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_worker_id</span></span>(): <span class="type">Long</span> = workerId</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_datacenter_id</span></span>(): <span class="type">Long</span> = datacenterId</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_timestamp</span></span>() = <span class="type">System</span>.currentTimeMillis</div><div class="line"></div><div class="line">  <span class="keyword">protected</span>[snowflake] <span class="function"><span class="keyword">def</span> <span class="title">nextId</span></span>(): <span class="type">Long</span> = synchronized &#123;</div><div class="line">    <span class="keyword">var</span> timestamp = timeGen()</div><div class="line"></div><div class="line"> <span class="comment">//时间错误</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</div><div class="line">      exceptionCounter.incr(<span class="number">1</span>)</div><div class="line">      log.error(<span class="string">"clock is moving backwards.  Rejecting requests until %d."</span>, lastTimestamp);</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidSystemClock</span>(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>.format(</div><div class="line">        lastTimestamp - timestamp))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</div><div class="line"><span class="comment">//当前毫秒内，则+1</span></div><div class="line">      sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask</div><div class="line">      <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//当前毫秒内计数满了，则等待下一秒</span></div><div class="line">        timestamp = tilNextMillis(lastTimestamp)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      sequence = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    lastTimestamp = timestamp</div><div class="line"><span class="comment">//ID偏移组合生成最终的ID，并返回ID   </span></div><div class="line"></div><div class="line">((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</div><div class="line">      (datacenterId &lt;&lt; datacenterIdShift) |</div><div class="line">      (workerId &lt;&lt; workerIdShift) |</div><div class="line">      sequence</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//等待下一个毫秒的到来 </span></div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">tilNextMillis</span></span>(lastTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</div><div class="line">    <span class="keyword">var</span> timestamp = timeGen()</div><div class="line">    <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class="line">      timestamp = timeGen()</div><div class="line">    &#125;</div><div class="line">    timestamp</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">timeGen</span></span>(): <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis()</div><div class="line"></div><div class="line">  <span class="keyword">val</span> <span class="type">AgentParser</span> = <span class="string">""</span><span class="string">"([a-zA-Z][a-zA-Z\-0-9]*)"</span><span class="string">""</span>.r</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validUseragent</span></span>(useragent: <span class="type">String</span>): <span class="type">Boolean</span> = useragent <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">AgentParser</span>(_) =&gt; <span class="literal">true</span></div><div class="line">    <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;pre&gt;</div></pre></td></tr></table></figure>
<p>上述为twitter的实现，下面且看一个Java实现，貌似为淘宝的朋友写的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerId;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> twepoch = <span class="number">1361753741828L</span>;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdBits = <span class="number">4L</span>;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ -<span class="number">1L</span> &lt;&lt; workerIdBits;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceBits = <span class="number">10L</span>;</div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ -<span class="number">1L</span> &lt;&lt; sequenceBits;</div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> workerId)</span> </span>&#123;</div><div class="line">  <span class="keyword">super</span>();</div><div class="line">  <span class="keyword">if</span> (workerId &gt; <span class="keyword">this</span>.maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(</div><div class="line">     <span class="string">"worker Id can't be greater than %d or less than 0"</span>,</div><div class="line">     <span class="keyword">this</span>.maxWorkerId));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.workerId = workerId;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">long</span> timestamp = <span class="keyword">this</span>.timeGen();</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lastTimestamp == timestamp) &#123;</div><div class="line">   <span class="keyword">this</span>.sequence = (<span class="keyword">this</span>.sequence + <span class="number">1</span>) &amp; <span class="keyword">this</span>.sequenceMask;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.sequence == <span class="number">0</span>) &#123;</div><div class="line">    System.out.println(<span class="string">"###########"</span> + sequenceMask);</div><div class="line">    timestamp = <span class="keyword">this</span>.tilNextMillis(<span class="keyword">this</span>.lastTimestamp);</div><div class="line">   &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="keyword">this</span>.sequence = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (timestamp &lt; <span class="keyword">this</span>.lastTimestamp) &#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(</div><div class="line">      String.format(</div><div class="line">        <span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>,</div><div class="line">        <span class="keyword">this</span>.lastTimestamp - timestamp));</div><div class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.lastTimestamp = timestamp;</div><div class="line">  <span class="keyword">long</span> nextId = ((timestamp - twepoch &lt;&lt; timestampLeftShift))</div><div class="line">    | (<span class="keyword">this</span>.workerId &lt;&lt; <span class="keyword">this</span>.workerIdShift) | (<span class="keyword">this</span>.sequence);</div><div class="line"><span class="comment">//  System.out.println("timestamp:" + timestamp + ",timestampLeftShift:"</span></div><div class="line"><span class="comment">//    + timestampLeftShift + ",nextId:" + nextId + ",workerId:"</span></div><div class="line"><span class="comment">//    + workerId + ",sequence:" + sequence);</span></div><div class="line">  <span class="keyword">return</span> nextId;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</div><div class="line">  <span class="keyword">long</span> timestamp = <span class="keyword">this</span>.timeGen();</div><div class="line">  <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class="line">   timestamp = <span class="keyword">this</span>.timeGen();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> timestamp;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> System.currentTimeMillis();</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">  IdWorker worker2 = <span class="keyword">new</span> IdWorker(<span class="number">2</span>);</div><div class="line">  System.out.println(worker2.nextId());</div><div class="line"></div><div class="line">  </div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再来看一个php的实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Idwork</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">const</span> debug = <span class="number">1</span>;</div><div class="line"><span class="keyword">static</span> $workerId;</div><div class="line"><span class="keyword">static</span> $twepoch = <span class="number">1361775855078</span>;</div><div class="line"><span class="keyword">static</span> $sequence = <span class="number">0</span>;</div><div class="line"><span class="keyword">const</span> workerIdBits = <span class="number">4</span>;</div><div class="line"><span class="keyword">static</span> $maxWorkerId = <span class="number">15</span>;</div><div class="line"><span class="keyword">const</span> sequenceBits = <span class="number">10</span>;</div><div class="line"><span class="keyword">static</span> $workerIdShift = <span class="number">10</span>;</div><div class="line"><span class="keyword">static</span> $timestampLeftShift = <span class="number">14</span>;</div><div class="line"><span class="keyword">static</span> $sequenceMask = <span class="number">1023</span>;</div><div class="line"><span class="keyword">private</span>  <span class="keyword">static</span> $lastTimestamp = <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($workId)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>($workId &gt; <span class="keyword">self</span>::$maxWorkerId || $workId&lt; <span class="number">0</span> )</div><div class="line">&#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"worker Id can't be greater than 15 or less than 0"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>::$workerId=$workId;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;__construct()-&gt;self::$workerId:'</span>.<span class="keyword">self</span>::$workerId;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeGen</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//获得当前时间戳</span></div><div class="line">$time = explode(<span class="string">' '</span>, microtime());</div><div class="line">$time2= substr($time[<span class="number">0</span>], <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">$timestramp = $time[<span class="number">1</span>].$time2;</div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;timeGen()-&gt;$timestramp:'</span>.$time[<span class="number">1</span>].$time2;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line"><span class="keyword">return</span>  $time[<span class="number">1</span>].$time2;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">tilNextMillis</span><span class="params">($lastTimestamp)</span> </span>&#123;</div><div class="line">$timestamp = <span class="keyword">$this</span>-&gt;timeGen();</div><div class="line"><span class="keyword">while</span> ($timestamp &lt;= $lastTimestamp) &#123;</div><div class="line">$timestamp = <span class="keyword">$this</span>-&gt;timeGen();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;tilNextMillis()-&gt;$timestamp:'</span>.$timestamp;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line"><span class="keyword">return</span> $timestamp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">nextId</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">$timestamp=<span class="keyword">$this</span>-&gt;timeGen();</div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;nextId()-&gt;self::$lastTimestamp1:'</span>.<span class="keyword">self</span>::$lastTimestamp;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">self</span>::$lastTimestamp == $timestamp) &#123;</div><div class="line"><span class="keyword">self</span>::$sequence = (<span class="keyword">self</span>::$sequence + <span class="number">1</span>) &amp; <span class="keyword">self</span>::$sequenceMask;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>::$sequence == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"###########"</span>.<span class="keyword">self</span>::$sequenceMask;</div><div class="line">    $timestamp = <span class="keyword">$this</span>-&gt;tilNextMillis(<span class="keyword">self</span>::$lastTimestamp);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'logdebug-&gt;nextId()-&gt;self::$lastTimestamp2:'</span>.<span class="keyword">self</span>::$lastTimestamp;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">self</span>::$sequence  = <span class="number">0</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'logdebug-&gt;nextId()-&gt;self::$sequence:'</span>.<span class="keyword">self</span>::$sequence;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($timestamp &lt; <span class="keyword">self</span>::$lastTimestamp) &#123;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> Excwption(<span class="string">"Clock moved backwards.  Refusing to generate id for "</span>.(<span class="keyword">self</span>::$lastTimestamp-$timestamp).<span class="string">" milliseconds"</span>);</div><div class="line">   &#125;</div><div class="line"><span class="keyword">self</span>::$lastTimestamp  = $timestamp;</div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;nextId()-&gt;self::$lastTimestamp3:'</span>.<span class="keyword">self</span>::$lastTimestamp;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'logdebug-&gt;nextId()-&gt;(($timestamp - self::$twepoch &lt;&lt; self::$timestampLeftShift )):'</span>.((sprintf(<span class="string">'%.0f'</span>, $timestamp) - sprintf(<span class="string">'%.0f'</span>, <span class="keyword">self</span>::$twepoch) ));</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>;</div><div class="line">$nextId = ((sprintf(<span class="string">'%.0f'</span>, $timestamp) - sprintf(<span class="string">'%.0f'</span>, <span class="keyword">self</span>::$twepoch)  )) | ( <span class="keyword">self</span>::$workerId &lt;&lt; <span class="keyword">self</span>::$workerIdShift ) | <span class="keyword">self</span>::$sequence;</div><div class="line"><span class="keyword">echo</span> <span class="string">'timestamp:'</span>.$timestamp.<span class="string">'-----'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'twepoch:'</span>.sprintf(<span class="string">'%.0f'</span>, <span class="keyword">self</span>::$twepoch).<span class="string">'-----'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'timestampLeftShift ='</span>.<span class="keyword">self</span>::$timestampLeftShift.<span class="string">'-----'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'nextId:'</span>.$nextId.<span class="string">'----'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'workId:'</span>.<span class="keyword">self</span>::$workerId.<span class="string">'-----'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'workerIdShift:'</span>.<span class="keyword">self</span>::$workerIdShift.<span class="string">'-----'</span>;</div><div class="line"><span class="keyword">return</span> $nextId;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$Idwork = <span class="keyword">new</span> Idwork(<span class="number">1</span>);</div><div class="line">$a= $Idwork-&gt;nextId();</div><div class="line">$Idwork = <span class="keyword">new</span> Idwork(<span class="number">2</span>);</div><div class="line">$a= $Idwork-&gt;nextId();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式自增ID算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 接口版本管理]]></title>
      <url>/2015/03/31/Spring-MVC-%E6%8E%A5%E5%8F%A3%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>随着我们的应用后台不断的发版，因为改动导致了数据结构的变化，这个时候就需要对HTTP API进行版本控制了。对原有的客户端进行兼容，搜索一番后找到一个方法。<br>先看这个文章，提供了一个解决方案。<br><a href="http://www.cnblogs.com/jcli/p/springmvc_restful_version.html" target="_blank" rel="external">http://www.cnblogs.com/jcli/p/springmvc_restful_version.html</a></p>
<p>Spring MVC通过在方法上使用<code>RequestMapping</code>来确认应该使用哪个方法来响应相应的请求，而RequestMapping又通过各种RequestCondition的实现来完成各种过滤（比如：consumes，headers，methods，params，produces以及value等）。在Spring MVC框架中使用RequestConditionHolder和RequestMappingInfo这两个实现。</p>
<h6 id="自定义RequestCondition"><a href="#自定义RequestCondition" class="headerlink" title="自定义RequestCondition"></a>自定义RequestCondition</h6><ul>
<li>实现RequestCondition接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet.mvc.condition;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestCondition</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function">T <span class="title">combine</span><span class="params">(T other)</span></span>;</div><div class="line">  <span class="function">T <span class="title">getMatchingCondition</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T other, HttpServletRequest request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>继承RequestMappingHandlerMapping<ul>
<li>getCustomTypeCondition方法根据对应的Handler类返回类级别的condition</li>
<li>getCustomMethodCondition方法根据对应的Handler方法返回方法级别的condition</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>基本上我是照着他做的，不过我这里也是遇到不少的问题，因为数据是直接post的json，需要转换为实体对象，所以还需要一些额外的配置。文中提到：</p>
<blockquote>
<p>最后，得让SpringMVC加载我们定义的CustomRequestMappingHandlerMapping以覆盖原先的RequestMappingHandlerMapping, 所以要去掉前面说的<mvc:annotation-driven>这个配置，我们通过JavaConfig的方式注入</mvc:annotation-driven></p>
</blockquote>
<p>我是不太愿意去掉<code>&lt;mvc:annotation-driven/&gt;</code>的，不过试了半天也没有好的效果，因为<br><code>&lt;mvc:annotation-driven/&gt;</code>注册的东西太多了。<br>我尝试直接写一个<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code> 一样包名的类来覆盖掉spring的类，来改掉getCustomTypeCondition和getCustomMethodCondition的方法实现。现在来看应该是可行的，但我没有这样干是因为中途遇见一个问题一直没调试好，最终又换成了自定义的类。这个问题就是因为客户端目前的版本号全部是在post的json中传过来的，就不考虑在路径上做改动。<br>所以我出现了这样的操作，在没找到问题之前我一直以为我重写的类这一种方式有问题，看代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ApiVersionCondition <span class="title">getMatchingCondition</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    String device = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        device = JSONUtil.parse(request.getInputStream()).getString(<span class="string">"device"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        log.error(e.getMessage(), e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> version = VersionUtil.getVersion(JSON.parseObject(device).getString(<span class="string">"app_ver"</span>));</div><div class="line">    <span class="keyword">if</span> (version &gt;= <span class="keyword">this</span>.apiVersion) <span class="comment">// 如果请求的版本号大于配置版本号， 则满足</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个就是把post过来的json数据取出来，然后取出里面的version进行判断，不过我得到这样一个错误，看了很久也没看懂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">org.springframework.http.converter.HttpMessageNotReadableException: Required request body content is missing: org.springframework.web.method.HandlerMethod$HandlerMethodParameter@bee0537e</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleEmptyBody(RequestResponseBodyMethodProcessor.java:189) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:170) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:105) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:77) ~[spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) ~[spring-web-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div><div class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.3.RELEASE.jar:4.1.3.RELEASE]</div></pre></td></tr></table></figure></p>
<p>然后才发现我在这里把inputStream读了以后，到controller那一层已经没有任何数据了。基本上是算得上自己作死加犯傻了。结果还是采取的在Http Header里面放一个版本号来进行判断。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public ApiVersionCondition getMatchingCondition(HttpServletRequest request) &#123;</div><div class="line"></div><div class="line">    int version = VersionUtil.getVersion(request.getHeader(&quot;App-Version&quot;));</div><div class="line"></div><div class="line">    if (version &gt;= this.apiVersion) // 如果请求的版本号大于配置版本号， 则满足</div><div class="line">        return this;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>说一下配置的地方，我没有用WebConfig的配置方式，但还是去掉了<code>&lt;mvc:annotation-driven&gt;</code><br>换成了几个bean。<br>下面贴上我的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!--RequestMapping解析器--&gt;</div><div class="line">&lt;bean class=&quot;com.xiaomaihd.xueshaqu.version.CustomRequestMappingHandlerMapping&quot;&gt;</div><div class="line">    &lt;property name=&quot;order&quot; value=&quot;0&quot;/&gt;</div><div class="line">    &lt;property name=&quot;interceptors&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;ref bean=&quot;conversionServiceExposingInterceptor&quot;/&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean</div><div class="line">        class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;</div><div class="line">    &lt;property name=&quot;webBindingInitializer&quot;&gt;</div><div class="line">        &lt;bean</div><div class="line">                class=&quot;org.springframework.web.bind.support.ConfigurableWebBindingInitializer&quot;&gt;</div><div class="line">            &lt;property name=&quot;conversionService&quot; ref=&quot;conversionService&quot;/&gt;</div><div class="line">            &lt;property name=&quot;validator&quot; ref=&quot;validator&quot;/&gt;</div><div class="line">        &lt;/bean&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property name=&quot;messageConverters&quot; ref=&quot;messageConverters&quot;&gt;</div><div class="line"></div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;/&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;conversionServiceExposingInterceptor&quot;</div><div class="line">      class=&quot;org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor&quot;&gt;</div><div class="line">    &lt;constructor-arg ref=&quot;conversionService&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>大功告成，目前还没发现其他的问题</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Rest </tag>
            
            <tag> Spring Mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[发现tomcat的一个bug]]></title>
      <url>/2015/03/10/%E5%8F%91%E7%8E%B0tomcat%E7%9A%84%E4%B8%80%E4%B8%AAbug/</url>
      <content type="html"><![CDATA[<p>在做项目的时候出现一个错误，看了半天没看出来是什么问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root cause</div><div class="line">java.util.NoSuchElementException</div><div class="line">	java.util.ArrayList$Itr.next(ArrayList.java:834)</div><div class="line">	org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1385)</div><div class="line">	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)</div><div class="line">	org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)</div><div class="line">	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)</div><div class="line">	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)</div><div class="line">	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:779)</div><div class="line">	org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)</div><div class="line">	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)</div><div class="line">	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)</div><div class="line">	org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)</div><div class="line">	org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)</div><div class="line">	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)</div><div class="line">	org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429)</div><div class="line">	org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2435)</div><div class="line">	org.apache.jasper.compiler.Node$Root.accept(Node.java:474)</div><div class="line">	org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377)</div><div class="line">	org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1841)</div><div class="line">	org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)</div><div class="line">	org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)</div><div class="line">	org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)</div><div class="line">	org.apache.jasper.compiler.Compiler.compile(Compiler.java:340)</div><div class="line">	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657)</div><div class="line">	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)</div><div class="line">	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)</div><div class="line">	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:727)</div></pre></td></tr></table></figure></p>
<p>找了半天才发现是tomcat的一个bug，换了一个tomcat版本就好了<br>导致这个错误的原因如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:param name=&quot;test&quot; value=&quot;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>如果是value是空值，在某些tomcat版本下就会出现这个情况，如果你遇见了，不妨换个版本试试。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Mvc 3.1 之后如何配置messageConverters]]></title>
      <url>/2015/03/06/Spring-Mvc-3-1-%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEmessageConverters/</url>
      <content type="html"><![CDATA[<p><code>&lt;mvc:annotation-driven /&gt;</code> 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。<code>&lt;mvc:annotation-driven /&gt;</code> 会自动注册<code>DefaultAnnotationHandlerMapping</code>与<code>AnnotationMethodHandlerAdapter</code> 两个bean,是spring MVC为@Controllers分发请求所必须的。</p>
<p>这句话我在很多帖子都看到过，我自己的项目本身使用的Spring MVC 3.2，实际上在3.1之后，<mvc:annotation-driven>注册的类发生了变化</mvc:annotation-driven></p>
<blockquote>
<p>Spring Framework 3.1 introduces a new set of support classes for processing requests with annotated controllers:</p>
<p>RequestMappingHandlerMapping<br>RequestMappingHandlerAdapter<br>ExceptionHandlerExceptionResolver<br>These classes are a replacement for the existing:</p>
<p>DefaultAnnotationHandlerMapping<br>AnnotationMethodHandlerAdapter<br>AnnotationMethodHandlerExceptionResolver<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/mvc</div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>The above registers a RequestMappingHandlerMapping, a RequestMappingHandlerAdapter, and an ExceptionHandlerExceptionResolver (among others) in support of processing requests with annotated controller methods using annotations such as @RequestMapping , @ExceptionHandler, and others.</p>
<p>It also enables the following:</p>
<ol>
<li>Spring 3 style type conversion through a ConversionService instance in addition to the JavaBeans PropertyEditors used for Data Binding.</li>
<li>Support for formatting Number fields using the @NumberFormat annotation through the ConversionService.</li>
<li>Support for formatting Date, Calendar, Long, and Joda Time fields using the @DateTimeFormat annotation.</li>
<li>Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath.</li>
<li>HttpMessageConverter support for @RequestBody method parameters and @ResponseBody method return values from @RequestMapping or @ExceptionHandler methods.<br>This is the complete list of HttpMessageConverters set up by mvc:annotation-driven:<ul>
<li>ByteArrayHttpMessageConverter converts byte arrays.</li>
<li>StringHttpMessageConverter converts strings.</li>
<li>ResourceHttpMessageConverter converts to/from org.springframework.core.io.Resource for all media types.</li>
<li>SourceHttpMessageConverter converts to/from a javax.xml.transform.Source.</li>
<li>FormHttpMessageConverter converts form data to/from a MultiValueMap<string, string="">.</string,></li>
<li>Jaxb2RootElementHttpMessageConverter converts Java objects to/from XML — added if   JAXB2 is present on the classpath.</li>
<li>MappingJackson2HttpMessageConverter (or MappingJacksonHttpMessageConverter) converts to/from JSON — added if Jackson 2 (or Jackson) is present on the classpath.</li>
<li>AtomFeedHttpMessageConverter converts Atom feeds — added if Rome is present on the classpath.</li>
<li>RssChannelHttpMessageConverter converts RSS feeds — added if Rome is present on the classpath.</li>
</ul>
</li>
</ol>
</blockquote>
<p>这是摘取的官方文档，可以看出，注册的类已经变成了RequestMappingHandlerMapping和 RequestMappingHandlerAdapter。<br>我之前在不知道的时候，使用AnnotationMethodHandlerAdapter 进行配置，结果在有<mvc:annotation-driven>存在的情况下，我自己配置的AnnotationMethodHandlerAdapter 怎么都不起作用，于是去掉了<mvc:annotation-driven>标签，手动注册了AnnotationMethodHandlerAdapter ，和DefaultAnnotationHandlerMapping。结果引发了其他问题，比如文件无法上传的问题。</mvc:annotation-driven></mvc:annotation-driven></p>
<p>阅读文档发现Spring提供了基于<mvc:annotation-driven>自定义messageConverters的方法，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&gt;</div><div class="line">    &lt;mvc:message-converters&gt;</div><div class="line">        &lt;bean class=&quot;org.example.MyHttpMessageConverter&quot;/&gt;</div><div class="line">        &lt;bean class=&quot;org.example.MyOtherHttpMessageConverter&quot;/&gt;</div><div class="line">    &lt;/mvc:message-converters&gt;</div><div class="line">&lt;/mvc:annotation-driven&gt;</div></pre></td></tr></table></figure></mvc:annotation-driven></p>
<p>下面展示我自己的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">	xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class="line">	xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">                     http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">                     http://www.springframework.org/schema/tx</div><div class="line">                     http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">                     http://www.springframework.org/schema/context </div><div class="line">                     http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">                     http://www.springframework.org/schema/aop</div><div class="line">                     http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">                     http://www.springframework.org/schema/jdbc</div><div class="line">                     http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">                     http://www.springframework.org/schema/util      </div><div class="line">          			 http://www.springframework.org/schema/util/spring-util-3.2.xsd</div><div class="line">                     http://www.springframework.org/schema/mvc </div><div class="line">  					 http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;</div><div class="line"></div><div class="line">	&lt;!-- spring自动扫描注解的组件 --&gt;</div><div class="line">	&lt;context:component-scan base-package=&quot;cn.xx.xx&quot;</div><div class="line">		use-default-filters=&quot;false&quot;&gt;</div><div class="line">		&lt;context:include-filter expression=&quot;org.springframework.stereotype.Controller&quot;</div><div class="line">			type=&quot;annotation&quot; /&gt;</div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">	&lt;mvc:annotation-driven&gt;</div><div class="line">		&lt;mvc:message-converters&gt;</div><div class="line">			&lt;ref bean=&quot;stringHttpMessageConverter&quot; /&gt;</div><div class="line">			&lt;ref bean=&quot;fastJsonHttpMessageConverter&quot; /&gt;</div><div class="line">			&lt;ref bean=&quot;marshallingHttpMessageConverter&quot; /&gt;</div><div class="line">		&lt;/mvc:message-converters&gt;</div><div class="line">	&lt;/mvc:annotation-driven&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;stringHttpMessageConverter&quot;</div><div class="line">		class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</div><div class="line">		&lt;constructor-arg value=&quot;UTF-8&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;&lt;!-- </div><div class="line">			避免出现乱码 --&gt;</div><div class="line">		&lt;property name=&quot;supportedMediaTypes&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	&lt;bean id=&quot;fastJsonHttpMessageConverter&quot;</div><div class="line">		class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;</div><div class="line"></div><div class="line">		&lt;property name=&quot;supportedMediaTypes&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;</div><div class="line">				&lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;&lt;!-- 避免IE出现下载JSON文件的情况 --&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">		&lt;property name=&quot;features&quot;&gt;</div><div class="line">			&lt;util:list&gt;</div><div class="line">				&lt;!-- &lt;value&gt;WriteMapNullValue&lt;/value&gt; --&gt;</div><div class="line">				&lt;value&gt;QuoteFieldNames&lt;/value&gt;</div><div class="line">				&lt;value&gt;WriteDateUseDateFormat&lt;/value&gt;</div><div class="line">			&lt;/util:list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=&quot;marshallingHttpMessageConverter&quot;</div><div class="line">		class=&quot;org.springframework.http.converter.xml.MarshallingHttpMessageConverter&quot;&gt;</div><div class="line">		&lt;property name=&quot;marshaller&quot; ref=&quot;castorMarshaller&quot; /&gt;</div><div class="line">		&lt;property name=&quot;unmarshaller&quot; ref=&quot;castorMarshaller&quot; /&gt;</div><div class="line">		&lt;property name=&quot;supportedMediaTypes&quot;&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;value&gt;text/xml;charset=UTF-8&lt;/value&gt;</div><div class="line">				&lt;value&gt;application/xml;charset=UTF-8&lt;/value&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 返回类型定义 --&gt;</div><div class="line">	&lt;util:list id=&quot;messageConverters&quot;&gt;</div><div class="line">		&lt;ref bean=&quot;stringHttpMessageConverter&quot; /&gt;</div><div class="line">		&lt;ref bean=&quot;fastJsonHttpMessageConverter&quot; /&gt;</div><div class="line">		&lt;ref bean=&quot;marshallingHttpMessageConverter&quot; /&gt;</div><div class="line">	&lt;/util:list&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;castorMarshaller&quot; class=&quot;org.springframework.oxm.castor.CastorMarshaller&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- AOP自动注解功能 --&gt;</div><div class="line">	&lt;aop:aspectj-autoproxy /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 不进行拦截的 --&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/&quot; mapping=&quot;/**/*.html&quot; order=&quot;0&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/images/&quot; mapping=&quot;/images/**&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/img/&quot; mapping=&quot;/img/**&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/download/&quot; mapping=&quot;/download/**&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/css/&quot; mapping=&quot;/css/**&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/plugin/&quot; mapping=&quot;/plugin/**&quot; /&gt;</div><div class="line">	&lt;mvc:resources location=&quot;/WEB-INF/pages/&quot; mapping=&quot;/pages/**&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;messageSource&quot;</div><div class="line">		class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;</div><div class="line">		&lt;property name=&quot;basename&quot; value=&quot;messages&quot;&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean</div><div class="line">		class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</div><div class="line">		&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot; /&gt;</div><div class="line">		&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 支持上传文件 --&gt;</div><div class="line">	&lt;bean id=&quot;multipartResolver&quot;</div><div class="line">		class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- restTemplate --&gt;</div><div class="line">	&lt;bean id=&quot;restTemplate&quot; class=&quot;org.springframework.web.client.RestTemplate&quot;&gt;</div><div class="line">		&lt;property name=&quot;messageConverters&quot; ref=&quot;messageConverters&quot;&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
            <tag> messageConverters </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS Jenkins + Sonar + Nexus 环境搭建]]></title>
      <url>/2015/03/06/CentOS-Jenkins-Sonar-Nexus-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="Nexus篇"><a href="#Nexus篇" class="headerlink" title="Nexus篇"></a>Nexus篇</h1><p>在Centos上安装</p>
<p>如果机器上是JDK1.6的话，nexus-2.5.1是最后一个支持JDK1.6的版本。</p>
<p>下载地址：<a href="http://www.sonatype.org/nexus/archived" target="_blank" rel="external">http://www.sonatype.org/nexus/archived</a></p>
<p>我这里使用FTP工具上传到服务器上。执行命令的时候如果遇到没有权限的地方用chmod改变文件权限。</p>
<p>设置为系统自启动服务（使用root用户）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/init.d/</div><div class="line">cp /usr/<span class="built_in">local</span>/jdk/nexus-2.5.1-01/bin/jsw/linux-x86-64/nexus nexus</div></pre></td></tr></table></figure></p>
<p>编辑<code>/etc/init.d/nexus</code>文件，添加以下变量定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NEXUS_HOME=/usr/<span class="built_in">local</span>/jdk/nexus-2.5.1-01</div><div class="line">PLATFORM=linux-x86-64</div><div class="line">PLATFORM_DIR=<span class="string">"<span class="variable">$&#123;NEXUS_HOME&#125;</span>/bin/jsw/<span class="variable">$&#123;PLATFORM&#125;</span>"</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>修改如下变量，设置启动用户为ycftp(这里用你自己的用户)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN_AS_USER=ycftp</div></pre></td></tr></table></figure></p>
<p>执行命令添加nexus自启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig –add nexus</div><div class="line">chkconfig –levels 345 nexus on</div></pre></td></tr></table></figure></p>
<p>执行如下命令启动、停止nexus服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nexus start</div><div class="line">service nexus stop</div></pre></td></tr></table></figure></p>
<p>启动后可通过<a href="http://yourip:8081/nexus访问" target="_blank" rel="external">http://yourip:8081/nexus访问</a></p>
<p>用admin/admin123登陆<br>登陆后点击左侧Repositories，将下图所示设置为true，就可以搜索了<br><img src="http://img.blog.csdn.net/20140826131253109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="http://img.blog.csdn.net/20140826131504260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>这个时候还搜索不到</p>
<p>需要再右击选项点击 Repair Index如下所示<br><img src="http://img.blog.csdn.net/20140826131615365?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>修复完成后便可以搜索了。</p>
<h1 id="Jenkins篇"><a href="#Jenkins篇" class="headerlink" title="Jenkins篇"></a>Jenkins篇</h1><p>添加Jenkins的源（repository）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo wget -O/etc/yum.repos.d/jenkins.repo http://jenkins-ci.org/redhat/jenkins.repo</div><div class="line">sudo rpm--import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</div></pre></td></tr></table></figure></p>
<p>不然你在启动jenkins服务的时候他会说你没有什么key啥的。</p>
<p>安装Jenkins：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum installjenkins</div></pre></td></tr></table></figure></p>
<p>安装完成后，有如下相关目录：</p>
<p><code>/usr/lib/jenkins/</code>：jenkins安装目录，WAR包会放在这里。</p>
<p>注意修改端口号</p>
<p><code>/etc/sysconfig/jenkins</code>：jenkins配置文件，“端口”，“JENKINS_HOME”等都可以在这里配置。内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Path:        Development/Jenkins</span></div><div class="line"><span class="comment">## Description: Configuration for theJenkins continuous build server</span></div><div class="line"><span class="comment">## Type:        string</span></div><div class="line"><span class="comment">## Default:     "/var/lib/jenkins"</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Directory where Jenkins store itsconfiguration and working</span></div><div class="line"><span class="comment"># files (checkouts, build reports, artifacts,...).</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_HOME=<span class="string">"/var/lib/jenkins"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        string</span></div><div class="line"><span class="comment">## Default:     ""</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Java executable to run Jenkins</span></div><div class="line"><span class="comment"># When left empty, we'll try to find thesuitable Java.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_JAVA_CMD=<span class="string">""</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        string</span></div><div class="line"><span class="comment">## Default:     "jenkins"</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Unix user account that runs the Jenkinsdaemon</span></div><div class="line"><span class="comment"># Be careful when you change this, as youneed to update</span></div><div class="line"><span class="comment"># permissions of $JENKINS_HOME and/var/log/jenkins.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_USER=<span class="string">"jenkins"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        string</span></div><div class="line"><span class="comment">## Default:     "-Djava.awt.headless=true"</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Options to pass to java when runningJenkins.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_JAVA_OPTIONS=<span class="string">"-Djava.awt.headless=true"</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">## Type:        integer(0:65535)</span></div><div class="line"><span class="comment">## Default:     8080</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Port Jenkins is listening on.</span></div><div class="line"><span class="comment"># Set to -1 to disable</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_PORT=<span class="string">"8085"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        integer(0:65535)</span></div><div class="line"><span class="comment">## Default:     8009</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Ajp13 Port Jenkins is listening on.</span></div><div class="line"><span class="comment"># Set to -1 to disable</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_AJP_PORT=<span class="string">"8019"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        integer(1:9)</span></div><div class="line"><span class="comment">## Default:     5</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Debug level for logs -- the higher thevalue, the more verbose.</span></div><div class="line"><span class="comment"># 5 is INFO.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_DEBUG_LEVEL=<span class="string">"5"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        yesno</span></div><div class="line"><span class="comment">## Default:     no</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Whether to enable access logging or not.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_ENABLE_ACCESS_LOG=<span class="string">"no"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        integer</span></div><div class="line"><span class="comment">## Default:     100</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Maximum number of HTTP worker threads.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_HANDLER_MAX=<span class="string">"100"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        integer</span></div><div class="line"><span class="comment">## Default:     20</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Maximum number of idle HTTP workerthreads.</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_HANDLER_IDLE=<span class="string">"20"</span></div><div class="line"> </div><div class="line"><span class="comment">## Type:        string</span></div><div class="line"><span class="comment">## Default:     ""</span></div><div class="line"><span class="comment">## ServiceRestart: jenkins</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Pass arbitrary arguments to Jenkins.</span></div><div class="line"><span class="comment"># Full option list: java -jar jenkins.war--help</span></div><div class="line"><span class="comment">#</span></div><div class="line">JENKINS_ARGS=<span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>我这里修改端口号为8085，避免和本机tomcat冲突</p>
<p>启动Jenkins<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo servicejenkins start</div></pre></td></tr></table></figure></p>
<p>启动后用 <code>http://yourip:8085/</code> 访问<br><img src="http://img.blog.csdn.net/20140826131719653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h1 id="Sonar篇"><a href="#Sonar篇" class="headerlink" title="Sonar篇"></a>Sonar篇</h1><p>首先下载<a href="http://www.sonarqube.org/downloads/" target="_blank" rel="external">http://www.sonarqube.org/downloads/</a></p>
<p>我用的ftp工具上传到服务器。</p>
<p>编辑~/.bash_profile，添加环境变量</p>
<p>添加SONAR_RUNNER_HOME(就是sonar-runner-2.4的全路径名，比如/usr/local/sonar-runner-2.4)环境变量，并将SONAR_RUNNER_HOME/bin加入PATH变量中</p>
<p>记得使环境变量生效</p>
<p>source ~/.bash_profile</p>
<p>我这里使用mysql数据库，但不说mysql怎么安装了。</p>
<p>先配置Sonar要用的数据库环境：</p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul>
<li><p>在mysql中执行如下脚本创建数据库及mysql用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</div><div class="line">CREATE USER <span class="string">'sonar'</span> IDENTIFIED BY <span class="string">'sonar'</span>;</div><div class="line">GRANT ALL ON sonar.* TO <span class="string">'sonar'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'sonar'</span>;</div><div class="line">GRANT ALL ON sonar.* TO <span class="string">'sonar'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'sonar'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>编辑${SONAR_HOME}/conf/sonar.properties配置数据库:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sonar.jdbc.username=sonar</div><div class="line">sonar.jdbc.password=sonar</div><div class="line"></div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Optionalproperties</span></div><div class="line"></div><div class="line">sonar.jdbc.driverClassName:com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>
</li>
<li><p>配置DB驱动包<br>如果使用Oracle数据库，必须手动复制驱动类到${SONAR_HOME}/extensions/jdbc-driver/oracle/目录下。其它支持的数据库默认提供了驱动，<a href="http://docs.codehaus.org/display/SONAR/Analysis+Parameters" target="_blank" rel="external">http://docs.codehaus.org/display/SONAR/Analysis+Parameters</a> 列举了一些常用的配置及默认值.</p>
</li>
</ul>
<h2 id="修改sonar配置文件"><a href="#修改sonar配置文件" class="headerlink" title="修改sonar配置文件"></a>修改sonar配置文件</h2><p>编辑sonar所在的目录（比如/usr/local/sonar-4.4）中conf/sonar.properties文件，配置数据库设置，默认已经提供了各类数据库的支持，只要将注释去掉就可以。这里使用mysql，因此取消mysql模块的注释，并将sonar中原有的嵌入式的数据库的jdbc.url注释掉。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vi sonar.properties</span></div><div class="line"></div><div class="line"><span class="comment">#需要注释下面这条语句</span></div><div class="line"></div><div class="line"><span class="comment">#sonar.jdbc.url=jdbc:h2:tcp://localhost:9092/sonar</span></div><div class="line"></div><div class="line">sonar.jdbc.username=sonar</div><div class="line"></div><div class="line">sonar.jdbc.password=sonar</div><div class="line"></div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=<span class="literal">true</span>&amp;characterEncoding=</div><div class="line"></div><div class="line">utf8&amp;rewriteBatchedStatements=<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Optional properties</span></div><div class="line"></div><div class="line">sonar.jdbc.driverClassName=com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>
<h2 id="修改sonar-runner的配置文件"><a href="#修改sonar-runner的配置文件" class="headerlink" title="修改sonar-runner的配置文件"></a>修改sonar-runner的配置文件</h2><p>切换至sonar-runner的安装目录下，修改sonar-runner.properties根据实际使用数据库情况取消相应注释，这里需要和sonar.properties中保持一致。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Configure here general information about the environment， such as SonarQube DB details for example</span></div><div class="line"><span class="comment">#No information about specific project should appear here</span></div><div class="line"><span class="comment">#----- Default SonarQube server</span></div><div class="line">sonar.host.url=http://localhost:9000</div><div class="line"><span class="comment">#----- PostgreSQL</span></div><div class="line"><span class="comment">#sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span></div><div class="line"><span class="comment">#----- MySQL</span></div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</div><div class="line">sonar.jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line"><span class="comment">#----- Oracle</span></div><div class="line"><span class="comment">#sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE</span></div><div class="line"><span class="comment">#----- Microsoft SQLServer</span></div><div class="line"><span class="comment">#sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor</span></div><div class="line"><span class="comment">#----- Global database settings</span></div><div class="line">sonar.jdbc.username=sonar</div><div class="line">sonar.jdbc.password=sonar</div><div class="line"><span class="comment">#----- Default source code encoding</span></div><div class="line">sonar.sourceEncoding=UTF-8</div><div class="line"><span class="comment">#----- Security (when 'sonar.forceAuthentication' is set to 'true')</span></div><div class="line">sonar.login=admin</div><div class="line">sonar.password=admin</div></pre></td></tr></table></figure></p>
<p>运行如下命令启动sonar，其它操作系统sonar均提供了启动脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$&#123;SONAR_HOME&#125;</span>/bin/linux-x86-64/sonar.sh start</div></pre></td></tr></table></figure></p>
<p>如果遇到wrapper没有执行权限，用chmod命令赋予权限</p>
<p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 wrapper</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问: <a href="http://yourip:9000/" target="_blank" rel="external">http://yourip:9000/</a> ，运行界面如下：<br><img src="http://img.blog.csdn.net/20140826131827217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>配置为自启动服务</p>
<p>使用<code>root</code>账户或者开启<code>sudo</code>权限操作。</p>
<p>创建自启动脚本文件<code>/etc/init.d/sonar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi/etc/init.d/sonar</div></pre></td></tr></table></figure>
<p>添加如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># rc file for SonarQube</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># chkconfig: 345 96 10</span></div><div class="line"><span class="comment"># description: SonarQube system (www.sonarsource.org)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">### BEGIN INIT INFO</span></div><div class="line"><span class="comment"># Provides: sonar</span></div><div class="line"><span class="comment"># Required-Start: $network</span></div><div class="line"><span class="comment"># Required-Stop: $network</span></div><div class="line"><span class="comment"># Default-Start: 3 4 5</span></div><div class="line"><span class="comment"># Default-Stop: 0 1 2 6</span></div><div class="line"><span class="comment"># Short-Description: SonarQube system (www.sonarsource.org)</span></div><div class="line"><span class="comment"># Description: SonarQube system (www.sonarsource.org)</span></div><div class="line"><span class="comment">### END INIT INFO</span></div><div class="line"></div><div class="line">/usr/bin/sonar $*</div></pre></td></tr></table></figure></p>
<p>添加启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> <span class="variable">$SONAR_HOME</span>/bin/linux-x86-64/sonar.sh /usr/bin/sonar</div><div class="line">chmod 755 /etc/init.d/sonar</div><div class="line">chkconfig --add sonar</div></pre></td></tr></table></figure></p>
<h2 id="与Jenkins集成"><a href="#与Jenkins集成" class="headerlink" title="与Jenkins集成"></a>与Jenkins集成</h2><p>在jenkins的插件管理中选择安装sonar jenkins plugin，该插件可以使项目每次构建都调用sonar进行代码度量。具体配置方式不再叙述。</p>
]]></content>
      
        <categories>
            
            <category> CI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos 6.5 安装gitlab安装需注意的问题]]></title>
      <url>/2015/02/06/centos-6-5-%E5%AE%89%E8%A3%85gitlab%E5%AE%89%E8%A3%85%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>安装gitlab<br>首先按照官网进行操作，环境为centos 6.5<br><a href="https://about.gitlab.com/downloads/" target="_blank" rel="external">https://about.gitlab.com/downloads/</a><br>注意安装过程中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure></p>
<p>出现错误，在<code>/etc/gitlab/gitlab.rb</code>中修改域名后再执行一次方可启动成功<br><img src="http://img.blog.csdn.net/20141207182607301?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWZpc2Fib3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"><br><a id="more"></a><br>进页面提示<code>502</code>，用命令查看日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl tail postgresql</div></pre></td></tr></table></figure></p>
<p>提示内存不足，官方也是建议1g内存进行搭建，512m的话也可以安装但是要添加swap，不然启动后就会提示内存不足，我目前是512的，添加<em>swap</em>后访问成功，但是有点慢可能，还是升为1g最好。</p>
<p>上面的图是我目前的配置，注意这里修改了gitlab默认的仓库存储路径，教程官网有<br><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md" target="_blank" rel="external">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md</a><br>我这里贴出来给大家看看</p>
<h4 id="Storing-Git-data-in-an-alternative-directory"><a href="#Storing-Git-data-in-an-alternative-directory" class="headerlink" title="Storing Git data in an alternative directory"></a>Storing Git data in an alternative directory</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Prevent users from writing to the repositories while you move them.</span></div><div class="line">sudo gitlab-ctl stop</div><div class="line"><span class="comment"># Only move 'repositories'; 'gitlab-satellites' will be recreated</span></div><div class="line"><span class="comment"># automatically. Note there is _no_ slash behind 'repositories', but there _is_ a</span></div><div class="line"><span class="comment"># slash behind 'git-data'.</span></div><div class="line">sudo rsync -av /var/opt/gitlab/git-data/repositories /mnt/nas/git-data/</div><div class="line"><span class="comment"># Fix permissions if necessary</span></div><div class="line">sudo gitlab-ctl reconfigure</div><div class="line"><span class="comment"># Double-check directory layout in /mnt/nas/git-data. Expected output:</span></div><div class="line"><span class="comment"># gitlab-satellites repositories</span></div><div class="line">sudo ls /mnt/nas/git-data/</div><div class="line"><span class="comment"># Done! Start GitLab and verify that you can browse through the repositories in</span></div><div class="line"><span class="comment"># the web interface.</span></div><div class="line">sudo gitlab-ctl start</div></pre></td></tr></table></figure>
<p>可以看到这下面是安装完成后gitlab一些文件和数据的路径    </p>
<blockquote>
<p>注：看到网上很多资料都不对，可能是过时了，所以搞gitlab建议大家还是以官网为主，说不定你在看我这个文章的时候也过时了</p>
</blockquote>
<h4 id="Omnibus-gitlab-uses-four-different-directories"><a href="#Omnibus-gitlab-uses-four-different-directories" class="headerlink" title="Omnibus-gitlab uses four different directories."></a>Omnibus-gitlab uses four different directories.</h4><ul>
<li><code>/opt/gitlab</code> holds application code for GitLab and its dependencies.</li>
<li><code>/var/opt/gitlab</code> holds application data and configuration files that gitlab-ctl reconfigure writes to.</li>
<li><code>/etc/gitlab</code> holds configuration files for omnibus-gitlab. These are the only files that you should ever have to edit manually.</li>
<li><code>/var/log/gitlab</code> contains all log data generated by components of omnibus-gitlab.</li>
</ul>
<p>有错误的时候尽量用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl tail</div><div class="line">``` </div><div class="line">查看日志分析错误原因，我在配置邮件的时候也是试了很久才用上</div><div class="line"></div><div class="line">接下来我们来配置邮件，我这里使用SMTP，用腾讯企业邮箱</div><div class="line">还是修改`/etc/gitlab/gitlab.rb` 配置文件，再次**提醒**网上很多文章可以已经过时了</div><div class="line">附上官网地址</div><div class="line">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md</div><div class="line">```ruby</div><div class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.exmail.qq.com"</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_port'</span>] = 25  </div><div class="line">gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"xx@xxx.com"</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"password"</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_domain'</span>] = <span class="string">"exmail.qq.com"</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span>  </div><div class="line">gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span>  </div><div class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'xx@xxx.com'</span>  </div><div class="line"><span class="comment">##修改gitlab配置的发信人  </span></div><div class="line">user[<span class="string">"git_user_email"</span>] = <span class="string">"xx@xxx.com"</span></div></pre></td></tr></table></figure></p>
<p>保持发信人和登录邮箱一致,我配置这里的时候也出错了，原因是我在看腾讯官网时候写的是用的SSL，端口是465<br>但是gitlab好像不是用的<code>ssl</code>，gitlab的教程里也没找到是否启用ssl的配置，我也没去深究了，于是把端口号改为<code>25</code>，邮件发送成功。<br>大家在测试邮件的时候可以用忘记密码来发送邮件测试，然后用<code>gitlab-ctl tail</code>来查看，大概等1分钟就能看到发送邮件的日志，出错了再具体分析原因</p>
]]></content>
      
        <categories>
            
            <category> centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> gitlab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis-memcached框架配置]]></title>
      <url>/2015/02/06/mybatis-memcached%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>官方放出了mybatis和memcached的整合包，先附上官方文档地址<br><a href="http://mybatis.github.io/memcached-cache/" target="_blank" rel="external">http://mybatis.github.io/memcached-cache/</a><br>文档很简洁，事实证明使用起来也很简单<br>memcached的安装我这里就不再讲了，网上很容易找到<br>在项目中引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-memcached<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后在想使用的mapper中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.acme.FooMapper"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.memcached.MemcachedCache"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>就可以用了</p>
<p>再建一个memcached.properties，对他进行配置<br>我简单测试了一下发现它可以配置多个服务器，用逗号分隔，经测试如果某一台挂掉，他会选择正常的那台<br>如果2台都挂掉，就会报错,估计我们还是希望在memcached服务器挂掉后从数据库读取数据，不知道大家有什么好的实现方式或者思路吗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.mybatis.caches.memcached.servers=172.29.33.201:11211,localhost:11211</div><div class="line">org.mybatis.caches.memcached.expiration=30 </div><div class="line">org.mybatis.caches.memcached.asyncget=false</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos6.5使用yum安装mysql]]></title>
      <url>/2015/01/31/centos6-5%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85mysql/</url>
      <content type="html"><![CDATA[<p>要使用yum 安装mysql，要使用mysql的yum仓库，先从官网下载适合你系统的仓库<br><a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="external">http://dev.mysql.com/downloads/repo/yum/</a><br>centos 6.5 对应的是mysql-community-release-el6-5.noarch.rpm<br>然后安装一下这个仓库列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum localinstall mysql-community-release-el6-5.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>执行这个命令后就能看到可安装的mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果我们是要安装最新的版本，那么可以直接执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install mysql-community-server</div></pre></td></tr></table></figure></p>
<p>如果我们要选择版本，可以先执行下面这个命令查看一下有哪些版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum repolist all | grep mysql</div></pre></td></tr></table></figure></p>
<p>如果要选择版本的话，有两种方式，一种是使用命令来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shell&gt; sudo yum-config-manager --disable mysql56-community</div><div class="line">shell&gt; sudo yum-config-manager --enable mysql57-community-dmr</div></pre></td></tr></table></figure></p>
<p>这个命令就是在仓库中启用5.7版本的，禁用5.6版本子仓库<br>或者编辑/etc/yum.repos.d/mysql-community.repo文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Enable to use MySQL 5.6</span></div><div class="line">[mysql56-community]</div><div class="line">name=MySQL 5.6 Community Server</div><div class="line">baseurl=//repo.mysql.com/yum/mysql-5.6-community/el/5/<span class="variable">$basearch</span>/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</div></pre></td></tr></table></figure></p>
<p><code>enabled=0</code>表示禁用<br>比如要安装5.7版本的<em>mysql</em>，要确定5.6的<code>enabled=0</code>，5.7的<code>enabled=1</code>，一次保证只启用一个子仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Note: MySQL 5.7 is currently in development. For use at your own risk.</span></div><div class="line"><span class="comment"># Please read with sub pages: https://dev.mysql.com/doc/relnotes/mysql/5.7/en/</span></div><div class="line">[mysql57-community-dmr]</div><div class="line">name=MySQL 5.7 Community Server Development Milestone Release</div><div class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/<span class="variable">$basearch</span>/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</div></pre></td></tr></table></figure></p>
<p>然后我们就可以愉快的安装mysql了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install mysql-community-server</div></pre></td></tr></table></figure></p>
<p>安装完成后我们启动mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysqld start</div></pre></td></tr></table></figure></p>
<p>查看mysql状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mysqld status</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring mvc @ResponseBody 返回枚举类型]]></title>
      <url>/2015/01/31/Spring-mvc-ResponseBody-%E8%BF%94%E5%9B%9E%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>我们在用<code>@ResponseBody</code>返回实体对象可以用<code>spring mvc</code>自动帮我们转化成json串<br>但是当实体中包含了枚举类型的属性的时候怎么办，我这里使用的是<code>fastjson</code>，他默认是转换成了字符串。<br>根据我上一篇博文的解决方案，我们这里自定义一个<code>FastJsonHttpMessageConverter</code><br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">Object</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Charset UTF8     = Charset.forName(<span class="string">"UTF-8"</span>);  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Charset             charset  = UTF8;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> SerializerFeature[] features = <span class="keyword">new</span> SerializerFeature[<span class="number">0</span>];  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastJsonHttpMessageConverter</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"json"</span>, UTF8), <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"*+json"</span>, UTF8));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Charset <span class="title">getCharset</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.charset;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharset</span><span class="params">(Charset charset)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.charset = charset;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> SerializerFeature[] getFeatures() &#123;  </div><div class="line">        <span class="keyword">return</span> features;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFeatures</span><span class="params">(SerializerFeature... features)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.features = features;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;? extends Object&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException,  </span></div><div class="line">            HttpMessageNotReadableException &#123;  </div><div class="line">  </div><div class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();  </div><div class="line">  </div><div class="line">        InputStream in = inputMessage.getBody();  </div><div class="line">  </div><div class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  </div><div class="line">        <span class="keyword">for</span> (;;) &#123;  </div><div class="line">            <span class="keyword">int</span> len = in.read(buf);  </div><div class="line">            <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;  </div><div class="line">                baos.write(buf, <span class="number">0</span>, len);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">byte</span>[] bytes = baos.toByteArray();  </div><div class="line">        <span class="keyword">return</span> JSON.parseObject(bytes, <span class="number">0</span>, bytes.length, charset.newDecoder(), clazz);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object obj, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException,  </span></div><div class="line">            HttpMessageNotWritableException &#123;  </div><div class="line">  </div><div class="line">        OutputStream out = outputMessage.getBody();  </div><div class="line">        String text = JSONUtil.toJSONString(obj, features);  </div><div class="line">        <span class="keyword">byte</span>[] bytes = text.getBytes(charset);  </div><div class="line">        out.write(bytes);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实我就改了一句代码，如下所示，这样我们就可以返回想要的索引数字了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String text = JSONUtil.toJSONString(obj, features);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring mvc </tag>
            
            <tag> fastjson </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fastjson序列化枚举属性]]></title>
      <url>/2015/01/30/fastjson%E5%BA%8F%E5%88%97%E5%8C%96%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>我的实体类里面有一个属性是枚举类型的，但是我在转换的时候我不希望取它的name，而是它的索引值0,1,2,3,搜索一番后发现这个回答</p>
<blockquote>
<p><a href="http://zhidao.baidu.com/link?url=5_N_6oaQaN6s-JLAZzwy-Fdbt93qC7VmzIfLvifZk463bKCwh7xBweUgBlJLczgHF9y7kjqNktsJmEVUuPlNkCw4sjfLaXq9ITfz9ieQH5u" target="_blank" rel="external">fastjson enum 枚举 反序列化</a><br>为了方便大家查看，我把内容贴过来<br>看fastjson源码，SerializeWriter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeEnum</span><span class="params">( Enum &lt; ?&gt;value, <span class="keyword">char</span> c )</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> ( value == <span class="keyword">null</span> )</div><div class="line">	&#123;</div><div class="line">		writeNull(); 　</div><div class="line">		write( <span class="string">','</span> ); 　</div><div class="line">		<span class="keyword">return</span>; 　</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> ( isEnabled( SerializerFeature.WriteEnumUsingToString ) )</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> ( isEnabled( SerializerFeature.UseSingleQuotes ) )</div><div class="line">		&#123;</div><div class="line">			write( <span class="string">'\''</span> ); 　</div><div class="line">			write( value.name() ); 　</div><div class="line">			write( <span class="string">'\''</span> ); 　</div><div class="line">			write( c );</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			write( <span class="string">'\"'</span> ); 　</div><div class="line">			write( value.name() ); 　</div><div class="line">			write( <span class="string">'\"'</span> ); 　</div><div class="line">			write( c ); 　</div><div class="line">		&#125; 　</div><div class="line">		<span class="keyword">return</span>; 　</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	writeIntAndChar( value.ordinal(), c ); 　</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>可以看出SerializeWriter在初始化的时候，features不要设置SerializerFeature.WriteEnumUsingToString<br>因为JSON.DEFAULT_PARSER_FEATURE是enable了SerializerFeature.WriteEnumUsingToString，也就是说是读枚举的value值而不是int值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_GENERATE_FEATURE;　　</div><div class="line"><span class="keyword">static</span> &#123;　　</div><div class="line">	<span class="keyword">int</span> features = <span class="number">0</span>;　　</div><div class="line">	features |= com.alibaba.fastjson.serializer.SerializerFeature.QuoteFieldNames.getMask();　　</div><div class="line">	features |= com.alibaba.fastjson.serializer.SerializerFeature.SkipTransientField.getMask();　　</div><div class="line">	features |= com.alibaba.fastjson.serializer.SerializerFeature.WriteEnumUsingToString.getMask();　　</div><div class="line">	features |= com.alibaba.fastjson.serializer.SerializerFeature.SortField.getMask();　　 </div><div class="line">	<span class="comment">// features |= com.alibaba.fastjson.serializer.SerializerFeature.WriteSlashAsSpecial.getMask();</span></div><div class="line">	DEFAULT_GENERATE_FEATURE = features;　　</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以，解决你这个问题的方法就是之前调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSONSerializer.config(SerializerFeature.WriteEnumUsingToString,<span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>但是<code>JSONSerializer.config</code>不是一个<strong>静态方法</strong>，不能直接调用<br>而且如果直接调用<code>JSON.toJSON</code>把实体类转为<code>json</code>，这里还有另外一句代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (clazz.isEnum()) &#123;  </div><div class="line">    <span class="keyword">return</span> ((Enum&lt;?&gt;) javaObject).name();  </div><div class="line">&#125;</div><div class="line">```    </div><div class="line">如果是枚举类型，不管你怎么改配置都不会给你转成索引值的情况，所以我们这里就先想把实体转成`jsonString`，再把`jsonString`转成`JSONObject`。</div><div class="line">再继续看`fastjson`的源码</div><div class="line">在`JOSN.toJSONString`中</div><div class="line"></div><div class="line">```<span class="function">java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializerFeature... features)</span> &#123;  </div><div class="line">    SerializeWriter out = <span class="keyword">new</span> SerializeWriter();  </div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out);  </div><div class="line">        <span class="keyword">for</span> (com.alibaba.fastjson.serializer.SerializerFeature feature : features) &#123;  </div><div class="line">            serializer.config(feature, <span class="keyword">true</span>);  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        serializer.write(object);  </div><div class="line"></div><div class="line">        <span class="keyword">return</span> out.toString();  </div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">        out.close();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他这里也是用的<code>serializer.config</code>来配置的，干脆我们自己写个工具方法吧，同时把<code>WriteEnumUsingToString</code>禁用掉<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SerializerFeature[] CONFIG = <span class="keyword">new</span> SerializerFeature[]&#123;  </div><div class="line">        SerializerFeature.WriteNullBooleanAsFalse,<span class="comment">//boolean为null时输出false  </span></div><div class="line">        SerializerFeature.WriteMapNullValue, <span class="comment">//输出空置的字段  </span></div><div class="line">        SerializerFeature.WriteNonStringKeyAsString,<span class="comment">//如果key不为String 则转换为String 比如Map的key为Integer  </span></div><div class="line">        SerializerFeature.WriteNullListAsEmpty,<span class="comment">//list为null时输出[]  </span></div><div class="line">        SerializerFeature.WriteNullNumberAsZero,<span class="comment">//number为null时输出0  </span></div><div class="line">        SerializerFeature.WriteNullStringAsEmpty<span class="comment">//String为null时输出""  </span></div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">toJSON</span><span class="params">(Object javaObject)</span> </span>&#123;  </div><div class="line"></div><div class="line">    SerializeWriter out = <span class="keyword">new</span> SerializeWriter();  </div><div class="line">    String jsonStr;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out);  </div><div class="line"></div><div class="line">        <span class="keyword">for</span> (com.alibaba.fastjson.serializer.SerializerFeature feature : CONFIG) &#123;  </div><div class="line">            serializer.config(feature, <span class="keyword">true</span>);  </div><div class="line">        &#125;  </div><div class="line">        serializer.config(SerializerFeature.WriteEnumUsingToString, <span class="keyword">false</span>);  </div><div class="line">        serializer.write(javaObject);  </div><div class="line"></div><div class="line">        jsonStr =  out.toString();  </div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">        out.close();  </div><div class="line">    &#125;  </div><div class="line">    JSONObject jsonObject = JSON.parseObject(jsonStr);  </div><div class="line">    <span class="keyword">return</span> jsonObject;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样调用我们的工具类方法转换出来的结果，就是我们想要的数字了。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
